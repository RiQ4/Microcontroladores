
Blink2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002edc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003064  08003064  00004064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030ac  080030ac  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080030ac  080030ac  000040ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030b4  080030b4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b4  080030b4  000040b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030b8  080030b8  000040b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080030c8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080030c8  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a08b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172a  00000000  00000000  0000f0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  000107f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a1  00000000  00000000  000110a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c4d  00000000  00000000  00011741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6fa  00000000  00000000  0003638e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3bec  00000000  00000000  00040a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124674  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002294  00000000  00000000  001246b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0012694c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800304c 	.word	0x0800304c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800304c 	.word	0x0800304c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 f9fe 	bl	80008be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f825 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f8a5 	bl	8000614 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ca:	f000 f873 	bl	80005b4 <MX_USART2_UART_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80004ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d6:	f000 fd1b 	bl	8000f10 <HAL_GPIO_ReadPin>
 80004da:	4603      	mov	r3, r0
 80004dc:	607b      	str	r3, [r7, #4]
	  if (state == 1) {
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10a      	bne.n	80004fa <main+0x42>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2120      	movs	r1, #32
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ec:	f000 fd28 	bl	8000f40 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1000);
 80004f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004f4:	f000 fa58 	bl	80009a8 <HAL_Delay>
 80004f8:	e7e9      	b.n	80004ce <main+0x16>
	  	  }
	  else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2120      	movs	r1, #32
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000502:	f000 fd1d 	bl	8000f40 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000506:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800050a:	f000 fa4d 	bl	80009a8 <HAL_Delay>
  {
 800050e:	e7de      	b.n	80004ce <main+0x16>

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b096      	sub	sp, #88	@ 0x58
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2244      	movs	r2, #68	@ 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fd67 	bl	8002ff2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000532:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000536:	f000 fd29 	bl	8000f8c <HAL_PWREx_ControlVoltageScaling>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000540:	f000 f8cc 	bl	80006dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000544:	2302      	movs	r3, #2
 8000546:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800054c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	2310      	movs	r3, #16
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800055a:	2301      	movs	r3, #1
 800055c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800055e:	230a      	movs	r3, #10
 8000560:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000562:	2307      	movs	r3, #7
 8000564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fd60 	bl	8001038 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800057e:	f000 f8ad 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2303      	movs	r3, #3
 8000588:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000596:	463b      	mov	r3, r7
 8000598:	2104      	movs	r1, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f001 f928 	bl	80017f0 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005a6:	f000 f899 	bl	80006dc <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3758      	adds	r7, #88	@ 0x58
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ba:	4a15      	ldr	r2, [pc, #84]	@ (8000610 <MX_USART2_UART_Init+0x5c>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005be:	4b13      	ldr	r3, [pc, #76]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005f8:	f001 ffda 	bl	80025b0 <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000602:	f000 f86b 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000028 	.word	0x20000028
 8000610:	40004400 	.word	0x40004400

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	4b2b      	ldr	r3, [pc, #172]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	4a2a      	ldr	r2, [pc, #168]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000636:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800064c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064e:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	4a1e      	ldr	r2, [pc, #120]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2120      	movs	r1, #32
 800068e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000692:	f000 fc55 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000696:	2320      	movs	r3, #32
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f000 fa84 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_BTN_Pin */
  GPIO_InitStruct.Pin = INPUT_BTN_Pin;
 80006b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_BTN_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006cc:	f000 fa76 	bl	8000bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	@ 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <HAL_MspInit+0x44>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006f2:	4a0e      	ldr	r2, [pc, #56]	@ (800072c <HAL_MspInit+0x44>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <HAL_MspInit+0x44>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <HAL_MspInit+0x44>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070a:	4a08      	ldr	r2, [pc, #32]	@ (800072c <HAL_MspInit+0x44>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000710:	6593      	str	r3, [r2, #88]	@ 0x58
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <HAL_MspInit+0x44>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0ac      	sub	sp, #176	@ 0xb0
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2288      	movs	r2, #136	@ 0x88
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fc4e 	bl	8002ff2 <memset>
  if(huart->Instance==USART2)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <HAL_UART_MspInit+0xb0>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d13b      	bne.n	80007d8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000760:	2302      	movs	r3, #2
 8000762:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000764:	2300      	movs	r3, #0
 8000766:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4618      	mov	r0, r3
 800076e:	f001 fa63 	bl	8001c38 <HAL_RCCEx_PeriphCLKConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000778:	f7ff ffb0 	bl	80006dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077c:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <HAL_UART_MspInit+0xb4>)
 800077e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000780:	4a18      	ldr	r2, [pc, #96]	@ (80007e4 <HAL_UART_MspInit+0xb4>)
 8000782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000786:	6593      	str	r3, [r2, #88]	@ 0x58
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <HAL_UART_MspInit+0xb4>)
 800078a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800078c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <HAL_UART_MspInit+0xb4>)
 8000796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000798:	4a12      	ldr	r2, [pc, #72]	@ (80007e4 <HAL_UART_MspInit+0xb4>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a0:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <HAL_UART_MspInit+0xb4>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ac:	230c      	movs	r3, #12
 80007ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007c4:	2307      	movs	r3, #7
 80007c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ce:	4619      	mov	r1, r3
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d4:	f000 f9f2 	bl	8000bbc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007d8:	bf00      	nop
 80007da:	37b0      	adds	r7, #176	@ 0xb0
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40004400 	.word	0x40004400
 80007e4:	40021000 	.word	0x40021000

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <NMI_Handler+0x4>

080007f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <MemManage_Handler+0x4>

08000800 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <UsageFault_Handler+0x4>

08000810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083e:	f000 f893 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <SystemInit+0x20>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000852:	4a05      	ldr	r2, [pc, #20]	@ (8000868 <SystemInit+0x20>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800086c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000870:	f7ff ffea 	bl	8000848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000876:	490d      	ldr	r1, [pc, #52]	@ (80008ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000878:	4a0d      	ldr	r2, [pc, #52]	@ (80008b0 <LoopForever+0xe>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800088c:	4c0a      	ldr	r4, [pc, #40]	@ (80008b8 <LoopForever+0x16>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800089a:	f002 fbb3 	bl	8003004 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800089e:	f7ff fe0b 	bl	80004b8 <main>

080008a2 <LoopForever>:

LoopForever:
    b LoopForever
 80008a2:	e7fe      	b.n	80008a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b0:	080030bc 	.word	0x080030bc
  ldr r2, =_sbss
 80008b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008b8:	200000b4 	.word	0x200000b4

080008bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <ADC1_2_IRQHandler>

080008be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f000 f943 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 f80e 	bl	80008f0 <HAL_InitTick>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	e001      	b.n	80008e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008e0:	f7ff ff02 	bl	80006e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008fc:	4b17      	ldr	r3, [pc, #92]	@ (800095c <HAL_InitTick+0x6c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d023      	beq.n	800094c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <HAL_InitTick+0x70>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <HAL_InitTick+0x6c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f941 	bl	8000ba2 <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10f      	bne.n	8000946 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d809      	bhi.n	8000940 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f919 	bl	8000b6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000938:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <HAL_InitTick+0x74>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e007      	b.n	8000950 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e004      	b.n	8000950 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	73fb      	strb	r3, [r7, #15]
 800094a:	e001      	b.n	8000950 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000950:	7bfb      	ldrb	r3, [r7, #15]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000008 	.word	0x20000008
 8000960:	20000000 	.word	0x20000000
 8000964:	20000004 	.word	0x20000004

08000968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	@ (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008
 800098c:	200000b0 	.word	0x200000b0

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	@ (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200000b0 	.word	0x200000b0

080009a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b0:	f7ff ffee 	bl	8000990 <HAL_GetTick>
 80009b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c0:	d005      	beq.n	80009ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <HAL_Delay+0x44>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ce:	bf00      	nop
 80009d0:	f7ff ffde 	bl	8000990 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8f7      	bhi.n	80009d0 <HAL_Delay+0x28>
  {
  }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	@ (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	@ (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	@ 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	@ 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f7ff ff8e 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff47 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7c:	f7ff ff5c 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000b80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff ff8e 	bl	8000aa8 <NVIC_EncodePriority>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff5d 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffb0 	bl	8000b10 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b087      	sub	sp, #28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e17f      	b.n	8000ecc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 8171 	beq.w	8000ec6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d005      	beq.n	8000bfc <HAL_GPIO_Init+0x40>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d130      	bne.n	8000c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c32:	2201      	movs	r2, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	f003 0201 	and.w	r2, r3, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d118      	bne.n	8000c9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c70:	2201      	movs	r2, #1
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	f003 0201 	and.w	r2, r3, #1
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d017      	beq.n	8000cd8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d123      	bne.n	8000d2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	08da      	lsrs	r2, r3, #3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3208      	adds	r2, #8
 8000cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	08da      	lsrs	r2, r3, #3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3208      	adds	r2, #8
 8000d26:	6939      	ldr	r1, [r7, #16]
 8000d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0203 	and.w	r2, r3, #3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f000 80ac 	beq.w	8000ec6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000eec <HAL_GPIO_Init+0x330>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d72:	4a5e      	ldr	r2, [pc, #376]	@ (8000eec <HAL_GPIO_Init+0x330>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8000eec <HAL_GPIO_Init+0x330>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d86:	4a5a      	ldr	r2, [pc, #360]	@ (8000ef0 <HAL_GPIO_Init+0x334>)
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000db0:	d025      	beq.n	8000dfe <HAL_GPIO_Init+0x242>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4f      	ldr	r2, [pc, #316]	@ (8000ef4 <HAL_GPIO_Init+0x338>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d01f      	beq.n	8000dfa <HAL_GPIO_Init+0x23e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4e      	ldr	r2, [pc, #312]	@ (8000ef8 <HAL_GPIO_Init+0x33c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d019      	beq.n	8000df6 <HAL_GPIO_Init+0x23a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8000efc <HAL_GPIO_Init+0x340>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0x236>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8000f00 <HAL_GPIO_Init+0x344>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x232>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8000f04 <HAL_GPIO_Init+0x348>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x22e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8000f08 <HAL_GPIO_Init+0x34c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x22a>
 8000de2:	2306      	movs	r3, #6
 8000de4:	e00c      	b.n	8000e00 <HAL_GPIO_Init+0x244>
 8000de6:	2307      	movs	r3, #7
 8000de8:	e00a      	b.n	8000e00 <HAL_GPIO_Init+0x244>
 8000dea:	2305      	movs	r3, #5
 8000dec:	e008      	b.n	8000e00 <HAL_GPIO_Init+0x244>
 8000dee:	2304      	movs	r3, #4
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x244>
 8000df2:	2303      	movs	r3, #3
 8000df4:	e004      	b.n	8000e00 <HAL_GPIO_Init+0x244>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e002      	b.n	8000e00 <HAL_GPIO_Init+0x244>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <HAL_GPIO_Init+0x244>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	f002 0203 	and.w	r2, r2, #3
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	4093      	lsls	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e10:	4937      	ldr	r1, [pc, #220]	@ (8000ef0 <HAL_GPIO_Init+0x334>)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3302      	adds	r3, #2
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f0c <HAL_GPIO_Init+0x350>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e42:	4a32      	ldr	r2, [pc, #200]	@ (8000f0c <HAL_GPIO_Init+0x350>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e48:	4b30      	ldr	r3, [pc, #192]	@ (8000f0c <HAL_GPIO_Init+0x350>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e6c:	4a27      	ldr	r2, [pc, #156]	@ (8000f0c <HAL_GPIO_Init+0x350>)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e72:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <HAL_GPIO_Init+0x350>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e96:	4a1d      	ldr	r2, [pc, #116]	@ (8000f0c <HAL_GPIO_Init+0x350>)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <HAL_GPIO_Init+0x350>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ec0:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <HAL_GPIO_Init+0x350>)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f47f ae78 	bne.w	8000bcc <HAL_GPIO_Init+0x10>
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010000 	.word	0x40010000
 8000ef4:	48000400 	.word	0x48000400
 8000ef8:	48000800 	.word	0x48000800
 8000efc:	48000c00 	.word	0x48000c00
 8000f00:	48001000 	.word	0x48001000
 8000f04:	48001400 	.word	0x48001400
 8000f08:	48001800 	.word	0x48001800
 8000f0c:	40010400 	.word	0x40010400

08000f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e001      	b.n	8000f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f50:	787b      	ldrb	r3, [r7, #1]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40007000 	.word	0x40007000

08000f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f9a:	d130      	bne.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f9c:	4b23      	ldr	r3, [pc, #140]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fa8:	d038      	beq.n	800101c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000faa:	4b20      	ldr	r3, [pc, #128]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2232      	movs	r2, #50	@ 0x32
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001034 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	0c9b      	lsrs	r3, r3, #18
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fd0:	e002      	b.n	8000fd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fe4:	d102      	bne.n	8000fec <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f2      	bne.n	8000fd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ff8:	d110      	bne.n	800101c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e00f      	b.n	800101e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800100a:	d007      	beq.n	800101c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001014:	4a05      	ldr	r2, [pc, #20]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800101a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40007000 	.word	0x40007000
 8001030:	20000000 	.word	0x20000000
 8001034:	431bde83 	.word	0x431bde83

08001038 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e3ca      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800104a:	4b97      	ldr	r3, [pc, #604]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001054:	4b94      	ldr	r3, [pc, #592]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80e4 	beq.w	8001234 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <HAL_RCC_OscConfig+0x4a>
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	2b0c      	cmp	r3, #12
 8001076:	f040 808b 	bne.w	8001190 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2b01      	cmp	r3, #1
 800107e:	f040 8087 	bne.w	8001190 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001082:	4b89      	ldr	r3, [pc, #548]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <HAL_RCC_OscConfig+0x62>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e3a2      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1a      	ldr	r2, [r3, #32]
 800109e:	4b82      	ldr	r3, [pc, #520]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <HAL_RCC_OscConfig+0x7c>
 80010aa:	4b7f      	ldr	r3, [pc, #508]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010b2:	e005      	b.n	80010c0 <HAL_RCC_OscConfig+0x88>
 80010b4:	4b7c      	ldr	r3, [pc, #496]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d223      	bcs.n	800110c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fd55 	bl	8001b78 <RCC_SetFlashLatencyFromMSIRange>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e383      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d8:	4b73      	ldr	r3, [pc, #460]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a72      	ldr	r2, [pc, #456]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b70      	ldr	r3, [pc, #448]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	496d      	ldr	r1, [pc, #436]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f6:	4b6c      	ldr	r3, [pc, #432]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	4968      	ldr	r1, [pc, #416]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001106:	4313      	orrs	r3, r2
 8001108:	604b      	str	r3, [r1, #4]
 800110a:	e025      	b.n	8001158 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800110c:	4b66      	ldr	r3, [pc, #408]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a65      	ldr	r2, [pc, #404]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b63      	ldr	r3, [pc, #396]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4960      	ldr	r1, [pc, #384]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112a:	4b5f      	ldr	r3, [pc, #380]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	495b      	ldr	r1, [pc, #364]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d109      	bne.n	8001158 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fd15 	bl	8001b78 <RCC_SetFlashLatencyFromMSIRange>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e343      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001158:	f000 fc4a 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 800115c:	4602      	mov	r2, r0
 800115e:	4b52      	ldr	r3, [pc, #328]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	4950      	ldr	r1, [pc, #320]	@ (80012ac <HAL_RCC_OscConfig+0x274>)
 800116a:	5ccb      	ldrb	r3, [r1, r3]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
 8001174:	4a4e      	ldr	r2, [pc, #312]	@ (80012b0 <HAL_RCC_OscConfig+0x278>)
 8001176:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001178:	4b4e      	ldr	r3, [pc, #312]	@ (80012b4 <HAL_RCC_OscConfig+0x27c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fbb7 	bl	80008f0 <HAL_InitTick>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d052      	beq.n	8001232 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	e327      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d032      	beq.n	80011fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001198:	4b43      	ldr	r3, [pc, #268]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a42      	ldr	r2, [pc, #264]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fbf4 	bl	8000990 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ac:	f7ff fbf0 	bl	8000990 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e310      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011be:	4b3a      	ldr	r3, [pc, #232]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ca:	4b37      	ldr	r3, [pc, #220]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a36      	ldr	r2, [pc, #216]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b34      	ldr	r3, [pc, #208]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4931      	ldr	r1, [pc, #196]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	492c      	ldr	r1, [pc, #176]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
 80011fc:	e01a      	b.n	8001234 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a29      	ldr	r2, [pc, #164]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800120a:	f7ff fbc1 	bl	8000990 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001212:	f7ff fbbd 	bl	8000990 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e2dd      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001224:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f0      	bne.n	8001212 <HAL_RCC_OscConfig+0x1da>
 8001230:	e000      	b.n	8001234 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001232:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d074      	beq.n	800132a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2b08      	cmp	r3, #8
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x21a>
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b0c      	cmp	r3, #12
 800124a:	d10e      	bne.n	800126a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d10b      	bne.n	800126a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d064      	beq.n	8001328 <HAL_RCC_OscConfig+0x2f0>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d160      	bne.n	8001328 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e2ba      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x24a>
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0b      	ldr	r2, [pc, #44]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800127a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e026      	b.n	80012d0 <HAL_RCC_OscConfig+0x298>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800128a:	d115      	bne.n	80012b8 <HAL_RCC_OscConfig+0x280>
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001292:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a02      	ldr	r2, [pc, #8]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800129e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e014      	b.n	80012d0 <HAL_RCC_OscConfig+0x298>
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	08003064 	.word	0x08003064
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004
 80012b8:	4ba0      	ldr	r3, [pc, #640]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a9f      	ldr	r2, [pc, #636]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80012be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b9d      	ldr	r3, [pc, #628]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a9c      	ldr	r2, [pc, #624]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fb5a 	bl	8000990 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fb56 	bl	8000990 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	@ 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e276      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f2:	4b92      	ldr	r3, [pc, #584]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x2a8>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fb46 	bl	8000990 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fb42 	bl	8000990 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	@ 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e262      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800131a:	4b88      	ldr	r3, [pc, #544]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x2d0>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d060      	beq.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b04      	cmp	r3, #4
 800133a:	d005      	beq.n	8001348 <HAL_RCC_OscConfig+0x310>
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b0c      	cmp	r3, #12
 8001340:	d119      	bne.n	8001376 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d116      	bne.n	8001376 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001348:	4b7c      	ldr	r3, [pc, #496]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_RCC_OscConfig+0x328>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e23f      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4b76      	ldr	r3, [pc, #472]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	061b      	lsls	r3, r3, #24
 800136e:	4973      	ldr	r1, [pc, #460]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001374:	e040      	b.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d023      	beq.n	80013c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137e:	4b6f      	ldr	r3, [pc, #444]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6e      	ldr	r2, [pc, #440]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff fb01 	bl	8000990 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fafd 	bl	8000990 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e21d      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a4:	4b65      	ldr	r3, [pc, #404]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b62      	ldr	r3, [pc, #392]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	061b      	lsls	r3, r3, #24
 80013be:	495f      	ldr	r1, [pc, #380]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
 80013c4:	e018      	b.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	4b5d      	ldr	r3, [pc, #372]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a5c      	ldr	r2, [pc, #368]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff fadd 	bl	8000990 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fad9 	bl	8000990 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e1f9      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ec:	4b53      	ldr	r3, [pc, #332]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d03c      	beq.n	800147e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01c      	beq.n	8001446 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140c:	4b4b      	ldr	r3, [pc, #300]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800140e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001412:	4a4a      	ldr	r2, [pc, #296]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff fab8 	bl	8000990 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fab4 	bl	8000990 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1d4      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001436:	4b41      	ldr	r3, [pc, #260]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0ef      	beq.n	8001424 <HAL_RCC_OscConfig+0x3ec>
 8001444:	e01b      	b.n	800147e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001446:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800144c:	4a3b      	ldr	r2, [pc, #236]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001456:	f7ff fa9b 	bl	8000990 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fa97 	bl	8000990 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1b7      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001470:	4b32      	ldr	r3, [pc, #200]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ef      	bne.n	800145e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 80a6 	beq.w	80015d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10d      	bne.n	80014b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	4b27      	ldr	r3, [pc, #156]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a0:	4a26      	ldr	r2, [pc, #152]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b4:	2301      	movs	r3, #1
 80014b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b8:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <HAL_RCC_OscConfig+0x508>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d118      	bne.n	80014f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <HAL_RCC_OscConfig+0x508>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001540 <HAL_RCC_OscConfig+0x508>)
 80014ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fa5e 	bl	8000990 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d8:	f7ff fa5a 	bl	8000990 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e17a      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_RCC_OscConfig+0x508>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d108      	bne.n	8001510 <HAL_RCC_OscConfig+0x4d8>
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800150e:	e029      	b.n	8001564 <HAL_RCC_OscConfig+0x52c>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b05      	cmp	r3, #5
 8001516:	d115      	bne.n	8001544 <HAL_RCC_OscConfig+0x50c>
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151e:	4a07      	ldr	r2, [pc, #28]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800152e:	4a03      	ldr	r2, [pc, #12]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001538:	e014      	b.n	8001564 <HAL_RCC_OscConfig+0x52c>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	40007000 	.word	0x40007000
 8001544:	4b9c      	ldr	r3, [pc, #624]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154a:	4a9b      	ldr	r2, [pc, #620]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001554:	4b98      	ldr	r3, [pc, #608]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155a:	4a97      	ldr	r2, [pc, #604]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800155c:	f023 0304 	bic.w	r3, r3, #4
 8001560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d016      	beq.n	800159a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff fa10 	bl	8000990 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001572:	e00a      	b.n	800158a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f7ff fa0c 	bl	8000990 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e12a      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800158a:	4b8b      	ldr	r3, [pc, #556]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800158c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ed      	beq.n	8001574 <HAL_RCC_OscConfig+0x53c>
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159a:	f7ff f9f9 	bl	8000990 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff f9f5 	bl	8000990 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e113      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b8:	4b7f      	ldr	r3, [pc, #508]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ed      	bne.n	80015a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015cc:	4b7a      	ldr	r3, [pc, #488]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	4a79      	ldr	r2, [pc, #484]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80015d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80fe 	beq.w	80017de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	f040 80d0 	bne.w	800178c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015ec:	4b72      	ldr	r3, [pc, #456]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 0203 	and.w	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d130      	bne.n	8001662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	3b01      	subs	r3, #1
 800160c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800160e:	429a      	cmp	r2, r3
 8001610:	d127      	bne.n	8001662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800161c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d11f      	bne.n	8001662 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800162c:	2a07      	cmp	r2, #7
 800162e:	bf14      	ite	ne
 8001630:	2201      	movne	r2, #1
 8001632:	2200      	moveq	r2, #0
 8001634:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001636:	4293      	cmp	r3, r2
 8001638:	d113      	bne.n	8001662 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	3b01      	subs	r3, #1
 8001648:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d109      	bne.n	8001662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	085b      	lsrs	r3, r3, #1
 800165a:	3b01      	subs	r3, #1
 800165c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d06e      	beq.n	8001740 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b0c      	cmp	r3, #12
 8001666:	d069      	beq.n	800173c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001668:	4b53      	ldr	r3, [pc, #332]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001674:	4b50      	ldr	r3, [pc, #320]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0ad      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001684:	4b4c      	ldr	r3, [pc, #304]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a4b      	ldr	r2, [pc, #300]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800168a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800168e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001690:	f7ff f97e 	bl	8000990 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff f97a 	bl	8000990 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e09a      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016aa:	4b43      	ldr	r3, [pc, #268]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b6:	4b40      	ldr	r3, [pc, #256]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	4b40      	ldr	r3, [pc, #256]	@ (80017bc <HAL_RCC_OscConfig+0x784>)
 80016bc:	4013      	ands	r3, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016c6:	3a01      	subs	r2, #1
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	4311      	orrs	r1, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016d0:	0212      	lsls	r2, r2, #8
 80016d2:	4311      	orrs	r1, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016d8:	0852      	lsrs	r2, r2, #1
 80016da:	3a01      	subs	r2, #1
 80016dc:	0552      	lsls	r2, r2, #21
 80016de:	4311      	orrs	r1, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016e4:	0852      	lsrs	r2, r2, #1
 80016e6:	3a01      	subs	r2, #1
 80016e8:	0652      	lsls	r2, r2, #25
 80016ea:	4311      	orrs	r1, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016f0:	0912      	lsrs	r2, r2, #4
 80016f2:	0452      	lsls	r2, r2, #17
 80016f4:	430a      	orrs	r2, r1
 80016f6:	4930      	ldr	r1, [pc, #192]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016fc:	4b2e      	ldr	r3, [pc, #184]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2d      	ldr	r2, [pc, #180]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001708:	4b2b      	ldr	r3, [pc, #172]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4a2a      	ldr	r2, [pc, #168]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800170e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001712:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001714:	f7ff f93c 	bl	8000990 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff f938 	bl	8000990 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e058      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172e:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800173a:	e050      	b.n	80017de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e04f      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001740:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d148      	bne.n	80017de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800174c:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a19      	ldr	r2, [pc, #100]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001756:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001758:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800175e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001762:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001764:	f7ff f914 	bl	8000990 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff f910 	bl	8000990 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e030      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x734>
 800178a:	e028      	b.n	80017de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d023      	beq.n	80017da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a08      	ldr	r2, [pc, #32]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001798:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff f8f7 	bl	8000990 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a4:	e00c      	b.n	80017c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff f8f3 	bl	8000990 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d905      	bls.n	80017c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e013      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
 80017b8:	40021000 	.word	0x40021000
 80017bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_RCC_OscConfig+0x7b0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1ec      	bne.n	80017a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_RCC_OscConfig+0x7b0>)
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	4905      	ldr	r1, [pc, #20]	@ (80017e8 <HAL_RCC_OscConfig+0x7b0>)
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_RCC_OscConfig+0x7b4>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	60cb      	str	r3, [r1, #12]
 80017d8:	e001      	b.n	80017de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	feeefffc 	.word	0xfeeefffc

080017f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0e7      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001804:	4b75      	ldr	r3, [pc, #468]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d910      	bls.n	8001834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b72      	ldr	r3, [pc, #456]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0207 	bic.w	r2, r3, #7
 800181a:	4970      	ldr	r1, [pc, #448]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b6e      	ldr	r3, [pc, #440]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0cf      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d010      	beq.n	8001862 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	4b66      	ldr	r3, [pc, #408]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800184c:	429a      	cmp	r2, r3
 800184e:	d908      	bls.n	8001862 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b63      	ldr	r3, [pc, #396]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4960      	ldr	r1, [pc, #384]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d04c      	beq.n	8001908 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001876:	4b5a      	ldr	r3, [pc, #360]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d121      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0a6      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188e:	4b54      	ldr	r3, [pc, #336]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e09a      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a6:	4b4e      	ldr	r3, [pc, #312]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e08e      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b6:	4b4a      	ldr	r3, [pc, #296]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e086      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b46      	ldr	r3, [pc, #280]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4943      	ldr	r1, [pc, #268]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018d8:	f7ff f85a 	bl	8000990 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff f856 	bl	8000990 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e06e      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b3a      	ldr	r3, [pc, #232]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d010      	beq.n	8001936 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	4b31      	ldr	r3, [pc, #196]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001920:	429a      	cmp	r2, r3
 8001922:	d208      	bcs.n	8001936 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	492b      	ldr	r1, [pc, #172]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d210      	bcs.n	8001966 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001944:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 0207 	bic.w	r2, r3, #7
 800194c:	4923      	ldr	r1, [pc, #140]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e036      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001972:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	4918      	ldr	r1, [pc, #96]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4910      	ldr	r1, [pc, #64]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019a4:	f000 f824 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	490b      	ldr	r1, [pc, #44]	@ (80019e4 <HAL_RCC_ClockConfig+0x1f4>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
 80019c0:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f8>)
 80019c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_RCC_ClockConfig+0x1fc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe ff91 	bl	80008f0 <HAL_InitTick>
 80019ce:	4603      	mov	r3, r0
 80019d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80019d2:	7afb      	ldrb	r3, [r7, #11]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08003064 	.word	0x08003064
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fe:	4b3e      	ldr	r3, [pc, #248]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a08:	4b3b      	ldr	r3, [pc, #236]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x34>
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d121      	bne.n	8001a62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d11e      	bne.n	8001a62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a24:	4b34      	ldr	r3, [pc, #208]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a30:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e005      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a40:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10d      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d102      	bne.n	8001a6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a68:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	e004      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a74:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d134      	bne.n	8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d003      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d003      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0xac>
 8001a94:	e005      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a98:	617b      	str	r3, [r7, #20]
      break;
 8001a9a:	e005      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a9e:	617b      	str	r3, [r7, #20]
      break;
 8001aa0:	e002      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	617b      	str	r3, [r7, #20]
      break;
 8001aa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	fb03 f202 	mul.w	r2, r3, r2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	0e5b      	lsrs	r3, r3, #25
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	@ 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	0800307c 	.word	0x0800307c
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	007a1200 	.word	0x007a1200

08001b08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000

08001b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b24:	f7ff fff0 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4904      	ldr	r1, [pc, #16]	@ (8001b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	08003074 	.word	0x08003074

08001b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b50:	f7ff ffda 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	0adb      	lsrs	r3, r3, #11
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4904      	ldr	r1, [pc, #16]	@ (8001b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08003074 	.word	0x08003074

08001b78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b84:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b90:	f7ff f9ee 	bl	8000f70 <HAL_PWREx_GetVoltageRange>
 8001b94:	6178      	str	r0, [r7, #20]
 8001b96:	e014      	b.n	8001bc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b98:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba4:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bb0:	f7ff f9de 	bl	8000f70 <HAL_PWREx_GetVoltageRange>
 8001bb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bba:	4a1d      	ldr	r2, [pc, #116]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bc8:	d10b      	bne.n	8001be2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b80      	cmp	r3, #128	@ 0x80
 8001bce:	d919      	bls.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bd4:	d902      	bls.n	8001bdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	e013      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bdc:	2301      	movs	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e010      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b80      	cmp	r3, #128	@ 0x80
 8001be6:	d902      	bls.n	8001bee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001be8:	2303      	movs	r3, #3
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	e00a      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b80      	cmp	r3, #128	@ 0x80
 8001bf2:	d102      	bne.n	8001bfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	e004      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b70      	cmp	r3, #112	@ 0x70
 8001bfe:	d101      	bne.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c00:	2301      	movs	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 0207 	bic.w	r2, r3, #7
 8001c0c:	4909      	ldr	r1, [pc, #36]	@ (8001c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c14:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c40:	2300      	movs	r3, #0
 8001c42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c44:	2300      	movs	r3, #0
 8001c46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d041      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c5c:	d02a      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c5e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c62:	d824      	bhi.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c68:	d008      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c6e:	d81e      	bhi.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00a      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c78:	d010      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001c7a:	e018      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c7c:	4b86      	ldr	r3, [pc, #536]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4a85      	ldr	r2, [pc, #532]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c88:	e015      	b.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 fabb 	bl	800220c <RCCEx_PLLSAI1_Config>
 8001c96:	4603      	mov	r3, r0
 8001c98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c9a:	e00c      	b.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3320      	adds	r3, #32
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fba6 	bl	80023f4 <RCCEx_PLLSAI2_Config>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cac:	e003      	b.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	74fb      	strb	r3, [r7, #19]
      break;
 8001cb2:	e000      	b.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cb6:	7cfb      	ldrb	r3, [r7, #19]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10b      	bne.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cbc:	4b76      	ldr	r3, [pc, #472]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cca:	4973      	ldr	r1, [pc, #460]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001cd2:	e001      	b.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cd4:	7cfb      	ldrb	r3, [r7, #19]
 8001cd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d041      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ce8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001cec:	d02a      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001cee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001cf2:	d824      	bhi.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001cf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cf8:	d008      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cfe:	d81e      	bhi.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d08:	d010      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d0a:	e018      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d0c:	4b62      	ldr	r3, [pc, #392]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4a61      	ldr	r2, [pc, #388]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d18:	e015      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fa73 	bl	800220c <RCCEx_PLLSAI1_Config>
 8001d26:	4603      	mov	r3, r0
 8001d28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d2a:	e00c      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3320      	adds	r3, #32
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fb5e 	bl	80023f4 <RCCEx_PLLSAI2_Config>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d3c:	e003      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	74fb      	strb	r3, [r7, #19]
      break;
 8001d42:	e000      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d46:	7cfb      	ldrb	r3, [r7, #19]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d4c:	4b52      	ldr	r3, [pc, #328]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d5a:	494f      	ldr	r1, [pc, #316]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d62:	e001      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d64:	7cfb      	ldrb	r3, [r7, #19]
 8001d66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a0 	beq.w	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d7a:	4b47      	ldr	r3, [pc, #284]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00d      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	4b41      	ldr	r3, [pc, #260]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d94:	4a40      	ldr	r2, [pc, #256]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dac:	4b3b      	ldr	r3, [pc, #236]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a3a      	ldr	r2, [pc, #232]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001db8:	f7fe fdea 	bl	8000990 <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dbe:	e009      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7fe fde6 	bl	8000990 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d902      	bls.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8001dd2:	e005      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0ef      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001de0:	7cfb      	ldrb	r3, [r7, #19]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d15c      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001de6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001df0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01f      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d019      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e04:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e10:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e16:	4a20      	ldr	r2, [pc, #128]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e20:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e30:	4a19      	ldr	r2, [pc, #100]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d016      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7fe fda5 	bl	8000990 <HAL_GetTick>
 8001e46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e48:	e00b      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7fe fda1 	bl	8000990 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d902      	bls.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	74fb      	strb	r3, [r7, #19]
            break;
 8001e60:	e006      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e62:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ec      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e76:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e86:	4904      	ldr	r1, [pc, #16]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001e8e:	e009      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	74bb      	strb	r3, [r7, #18]
 8001e94:	e006      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea0:	7cfb      	ldrb	r3, [r7, #19]
 8001ea2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea4:	7c7b      	ldrb	r3, [r7, #17]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d105      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eaa:	4b9e      	ldr	r3, [pc, #632]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	4a9d      	ldr	r2, [pc, #628]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ec2:	4b98      	ldr	r3, [pc, #608]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec8:	f023 0203 	bic.w	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed0:	4994      	ldr	r1, [pc, #592]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ee4:	4b8f      	ldr	r3, [pc, #572]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eea:	f023 020c 	bic.w	r2, r3, #12
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef2:	498c      	ldr	r1, [pc, #560]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f06:	4b87      	ldr	r3, [pc, #540]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	4983      	ldr	r1, [pc, #524]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00a      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f28:	4b7e      	ldr	r3, [pc, #504]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	497b      	ldr	r1, [pc, #492]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f4a:	4b76      	ldr	r3, [pc, #472]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f58:	4972      	ldr	r1, [pc, #456]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f6c:	4b6d      	ldr	r3, [pc, #436]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	496a      	ldr	r1, [pc, #424]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f8e:	4b65      	ldr	r3, [pc, #404]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	4961      	ldr	r1, [pc, #388]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fb0:	4b5c      	ldr	r3, [pc, #368]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fbe:	4959      	ldr	r1, [pc, #356]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fd2:	4b54      	ldr	r3, [pc, #336]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe0:	4950      	ldr	r1, [pc, #320]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002002:	4948      	ldr	r1, [pc, #288]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002016:	4b43      	ldr	r3, [pc, #268]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002024:	493f      	ldr	r1, [pc, #252]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d028      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002038:	4b3a      	ldr	r3, [pc, #232]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002046:	4937      	ldr	r1, [pc, #220]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002052:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002056:	d106      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002058:	4b32      	ldr	r3, [pc, #200]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a31      	ldr	r2, [pc, #196]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002062:	60d3      	str	r3, [r2, #12]
 8002064:	e011      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800206a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800206e:	d10c      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3304      	adds	r3, #4
 8002074:	2101      	movs	r1, #1
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f8c8 	bl	800220c <RCCEx_PLLSAI1_Config>
 800207c:	4603      	mov	r3, r0
 800207e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002086:	7cfb      	ldrb	r3, [r7, #19]
 8002088:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d028      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002096:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a4:	491f      	ldr	r1, [pc, #124]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020b4:	d106      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020c0:	60d3      	str	r3, [r2, #12]
 80020c2:	e011      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2101      	movs	r1, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 f899 	bl	800220c <RCCEx_PLLSAI1_Config>
 80020da:	4603      	mov	r3, r0
 80020dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d02b      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002102:	4908      	ldr	r1, [pc, #32]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800210e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002112:	d109      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a02      	ldr	r2, [pc, #8]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800211e:	60d3      	str	r3, [r2, #12]
 8002120:	e014      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800212c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002130:	d10c      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	2101      	movs	r1, #1
 8002138:	4618      	mov	r0, r3
 800213a:	f000 f867 	bl	800220c <RCCEx_PLLSAI1_Config>
 800213e:	4603      	mov	r3, r0
 8002140:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d02f      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002158:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002166:	4928      	ldr	r1, [pc, #160]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002172:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002176:	d10d      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3304      	adds	r3, #4
 800217c:	2102      	movs	r1, #2
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f844 	bl	800220c <RCCEx_PLLSAI1_Config>
 8002184:	4603      	mov	r3, r0
 8002186:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d014      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800218e:	7cfb      	ldrb	r3, [r7, #19]
 8002190:	74bb      	strb	r3, [r7, #18]
 8002192:	e011      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800219c:	d10c      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3320      	adds	r3, #32
 80021a2:	2102      	movs	r1, #2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f925 	bl	80023f4 <RCCEx_PLLSAI2_Config>
 80021aa:	4603      	mov	r3, r0
 80021ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ae:	7cfb      	ldrb	r3, [r7, #19]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021c4:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021d2:	490d      	ldr	r1, [pc, #52]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021f6:	4904      	ldr	r1, [pc, #16]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000

0800220c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800221a:	4b75      	ldr	r3, [pc, #468]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d018      	beq.n	8002258 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002226:	4b72      	ldr	r3, [pc, #456]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0203 	and.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d10d      	bne.n	8002252 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
       ||
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800223e:	4b6c      	ldr	r3, [pc, #432]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
       ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d047      	beq.n	80022e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	e044      	b.n	80022e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d018      	beq.n	8002292 <RCCEx_PLLSAI1_Config+0x86>
 8002260:	2b03      	cmp	r3, #3
 8002262:	d825      	bhi.n	80022b0 <RCCEx_PLLSAI1_Config+0xa4>
 8002264:	2b01      	cmp	r3, #1
 8002266:	d002      	beq.n	800226e <RCCEx_PLLSAI1_Config+0x62>
 8002268:	2b02      	cmp	r3, #2
 800226a:	d009      	beq.n	8002280 <RCCEx_PLLSAI1_Config+0x74>
 800226c:	e020      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800226e:	4b60      	ldr	r3, [pc, #384]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d11d      	bne.n	80022b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800227e:	e01a      	b.n	80022b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002280:	4b5b      	ldr	r3, [pc, #364]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d116      	bne.n	80022ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002290:	e013      	b.n	80022ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002292:	4b57      	ldr	r3, [pc, #348]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800229e:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022ae:	e006      	b.n	80022be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      break;
 80022b4:	e004      	b.n	80022c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022b6:	bf00      	nop
 80022b8:	e002      	b.n	80022c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ba:	bf00      	nop
 80022bc:	e000      	b.n	80022c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022be:	bf00      	nop
    }

    if(status == HAL_OK)
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10d      	bne.n	80022e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022c6:	4b4a      	ldr	r3, [pc, #296]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	430b      	orrs	r3, r1
 80022dc:	4944      	ldr	r1, [pc, #272]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d17d      	bne.n	80023e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022e8:	4b41      	ldr	r3, [pc, #260]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a40      	ldr	r2, [pc, #256]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f4:	f7fe fb4c 	bl	8000990 <HAL_GetTick>
 80022f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022fa:	e009      	b.n	8002310 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022fc:	f7fe fb48 	bl	8000990 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d902      	bls.n	8002310 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	73fb      	strb	r3, [r7, #15]
        break;
 800230e:	e005      	b.n	800231c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002310:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ef      	bne.n	80022fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d160      	bne.n	80023e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d111      	bne.n	800234c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002328:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6892      	ldr	r2, [r2, #8]
 8002338:	0211      	lsls	r1, r2, #8
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68d2      	ldr	r2, [r2, #12]
 800233e:	0912      	lsrs	r2, r2, #4
 8002340:	0452      	lsls	r2, r2, #17
 8002342:	430a      	orrs	r2, r1
 8002344:	492a      	ldr	r1, [pc, #168]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	610b      	str	r3, [r1, #16]
 800234a:	e027      	b.n	800239c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d112      	bne.n	8002378 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002352:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800235a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6892      	ldr	r2, [r2, #8]
 8002362:	0211      	lsls	r1, r2, #8
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6912      	ldr	r2, [r2, #16]
 8002368:	0852      	lsrs	r2, r2, #1
 800236a:	3a01      	subs	r2, #1
 800236c:	0552      	lsls	r2, r2, #21
 800236e:	430a      	orrs	r2, r1
 8002370:	491f      	ldr	r1, [pc, #124]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	610b      	str	r3, [r1, #16]
 8002376:	e011      	b.n	800239c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002378:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002380:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6892      	ldr	r2, [r2, #8]
 8002388:	0211      	lsls	r1, r2, #8
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6952      	ldr	r2, [r2, #20]
 800238e:	0852      	lsrs	r2, r2, #1
 8002390:	3a01      	subs	r2, #1
 8002392:	0652      	lsls	r2, r2, #25
 8002394:	430a      	orrs	r2, r1
 8002396:	4916      	ldr	r1, [pc, #88]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a8:	f7fe faf2 	bl	8000990 <HAL_GetTick>
 80023ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023ae:	e009      	b.n	80023c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023b0:	f7fe faee 	bl	8000990 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d902      	bls.n	80023c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	73fb      	strb	r3, [r7, #15]
          break;
 80023c2:	e005      	b.n	80023d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023c4:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ef      	beq.n	80023b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	4904      	ldr	r1, [pc, #16]	@ (80023f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000

080023f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002402:	4b6a      	ldr	r3, [pc, #424]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d018      	beq.n	8002440 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800240e:	4b67      	ldr	r3, [pc, #412]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0203 	and.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d10d      	bne.n	800243a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
       ||
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002426:	4b61      	ldr	r3, [pc, #388]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
       ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d047      	beq.n	80024ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	e044      	b.n	80024ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d018      	beq.n	800247a <RCCEx_PLLSAI2_Config+0x86>
 8002448:	2b03      	cmp	r3, #3
 800244a:	d825      	bhi.n	8002498 <RCCEx_PLLSAI2_Config+0xa4>
 800244c:	2b01      	cmp	r3, #1
 800244e:	d002      	beq.n	8002456 <RCCEx_PLLSAI2_Config+0x62>
 8002450:	2b02      	cmp	r3, #2
 8002452:	d009      	beq.n	8002468 <RCCEx_PLLSAI2_Config+0x74>
 8002454:	e020      	b.n	8002498 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002456:	4b55      	ldr	r3, [pc, #340]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d11d      	bne.n	800249e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002466:	e01a      	b.n	800249e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002468:	4b50      	ldr	r3, [pc, #320]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002470:	2b00      	cmp	r3, #0
 8002472:	d116      	bne.n	80024a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002478:	e013      	b.n	80024a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800247a:	4b4c      	ldr	r3, [pc, #304]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002486:	4b49      	ldr	r3, [pc, #292]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002496:	e006      	b.n	80024a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      break;
 800249c:	e004      	b.n	80024a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800249e:	bf00      	nop
 80024a0:	e002      	b.n	80024a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10d      	bne.n	80024ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ae:	4b3f      	ldr	r3, [pc, #252]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6819      	ldr	r1, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	430b      	orrs	r3, r1
 80024c4:	4939      	ldr	r1, [pc, #228]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d167      	bne.n	80025a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024d0:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a35      	ldr	r2, [pc, #212]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024dc:	f7fe fa58 	bl	8000990 <HAL_GetTick>
 80024e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024e2:	e009      	b.n	80024f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024e4:	f7fe fa54 	bl	8000990 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d902      	bls.n	80024f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	73fb      	strb	r3, [r7, #15]
        break;
 80024f6:	e005      	b.n	8002504 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024f8:	4b2c      	ldr	r3, [pc, #176]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ef      	bne.n	80024e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d14a      	bne.n	80025a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d111      	bne.n	8002534 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002510:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6892      	ldr	r2, [r2, #8]
 8002520:	0211      	lsls	r1, r2, #8
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68d2      	ldr	r2, [r2, #12]
 8002526:	0912      	lsrs	r2, r2, #4
 8002528:	0452      	lsls	r2, r2, #17
 800252a:	430a      	orrs	r2, r1
 800252c:	491f      	ldr	r1, [pc, #124]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800252e:	4313      	orrs	r3, r2
 8002530:	614b      	str	r3, [r1, #20]
 8002532:	e011      	b.n	8002558 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002534:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800253c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6892      	ldr	r2, [r2, #8]
 8002544:	0211      	lsls	r1, r2, #8
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6912      	ldr	r2, [r2, #16]
 800254a:	0852      	lsrs	r2, r2, #1
 800254c:	3a01      	subs	r2, #1
 800254e:	0652      	lsls	r2, r2, #25
 8002550:	430a      	orrs	r2, r1
 8002552:	4916      	ldr	r1, [pc, #88]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002554:	4313      	orrs	r3, r2
 8002556:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a13      	ldr	r2, [pc, #76]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7fe fa14 	bl	8000990 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800256a:	e009      	b.n	8002580 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800256c:	f7fe fa10 	bl	8000990 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d902      	bls.n	8002580 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	73fb      	strb	r3, [r7, #15]
          break;
 800257e:	e005      	b.n	800258c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002580:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ef      	beq.n	800256c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	4904      	ldr	r1, [pc, #16]	@ (80025ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800259c:	4313      	orrs	r3, r2
 800259e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e040      	b.n	8002644 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe f8ac 	bl	8000730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	@ 0x24
 80025dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fae0 	bl	8002bbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f825 	bl	800264c <UART_SetConfig>
 8002602:	4603      	mov	r3, r0
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e01b      	b.n	8002644 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800261a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800262a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fb5f 	bl	8002d00 <UART_CheckIdleState>
 8002642:	4603      	mov	r3, r0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800264c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002650:	b08a      	sub	sp, #40	@ 0x28
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	431a      	orrs	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	431a      	orrs	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4313      	orrs	r3, r2
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4ba4      	ldr	r3, [pc, #656]	@ (800290c <UART_SetConfig+0x2c0>)
 800267c:	4013      	ands	r3, r2
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002684:	430b      	orrs	r3, r1
 8002686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a99      	ldr	r2, [pc, #612]	@ (8002910 <UART_SetConfig+0x2c4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d004      	beq.n	80026b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b4:	4313      	orrs	r3, r2
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a90      	ldr	r2, [pc, #576]	@ (8002914 <UART_SetConfig+0x2c8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d126      	bne.n	8002724 <UART_SetConfig+0xd8>
 80026d6:	4b90      	ldr	r3, [pc, #576]	@ (8002918 <UART_SetConfig+0x2cc>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d81b      	bhi.n	800271c <UART_SetConfig+0xd0>
 80026e4:	a201      	add	r2, pc, #4	@ (adr r2, 80026ec <UART_SetConfig+0xa0>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	080026fd 	.word	0x080026fd
 80026f0:	0800270d 	.word	0x0800270d
 80026f4:	08002705 	.word	0x08002705
 80026f8:	08002715 	.word	0x08002715
 80026fc:	2301      	movs	r3, #1
 80026fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002702:	e116      	b.n	8002932 <UART_SetConfig+0x2e6>
 8002704:	2302      	movs	r3, #2
 8002706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800270a:	e112      	b.n	8002932 <UART_SetConfig+0x2e6>
 800270c:	2304      	movs	r3, #4
 800270e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002712:	e10e      	b.n	8002932 <UART_SetConfig+0x2e6>
 8002714:	2308      	movs	r3, #8
 8002716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800271a:	e10a      	b.n	8002932 <UART_SetConfig+0x2e6>
 800271c:	2310      	movs	r3, #16
 800271e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002722:	e106      	b.n	8002932 <UART_SetConfig+0x2e6>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a7c      	ldr	r2, [pc, #496]	@ (800291c <UART_SetConfig+0x2d0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d138      	bne.n	80027a0 <UART_SetConfig+0x154>
 800272e:	4b7a      	ldr	r3, [pc, #488]	@ (8002918 <UART_SetConfig+0x2cc>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b0c      	cmp	r3, #12
 800273a:	d82d      	bhi.n	8002798 <UART_SetConfig+0x14c>
 800273c:	a201      	add	r2, pc, #4	@ (adr r2, 8002744 <UART_SetConfig+0xf8>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002779 	.word	0x08002779
 8002748:	08002799 	.word	0x08002799
 800274c:	08002799 	.word	0x08002799
 8002750:	08002799 	.word	0x08002799
 8002754:	08002789 	.word	0x08002789
 8002758:	08002799 	.word	0x08002799
 800275c:	08002799 	.word	0x08002799
 8002760:	08002799 	.word	0x08002799
 8002764:	08002781 	.word	0x08002781
 8002768:	08002799 	.word	0x08002799
 800276c:	08002799 	.word	0x08002799
 8002770:	08002799 	.word	0x08002799
 8002774:	08002791 	.word	0x08002791
 8002778:	2300      	movs	r3, #0
 800277a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800277e:	e0d8      	b.n	8002932 <UART_SetConfig+0x2e6>
 8002780:	2302      	movs	r3, #2
 8002782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002786:	e0d4      	b.n	8002932 <UART_SetConfig+0x2e6>
 8002788:	2304      	movs	r3, #4
 800278a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800278e:	e0d0      	b.n	8002932 <UART_SetConfig+0x2e6>
 8002790:	2308      	movs	r3, #8
 8002792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002796:	e0cc      	b.n	8002932 <UART_SetConfig+0x2e6>
 8002798:	2310      	movs	r3, #16
 800279a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800279e:	e0c8      	b.n	8002932 <UART_SetConfig+0x2e6>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a5e      	ldr	r2, [pc, #376]	@ (8002920 <UART_SetConfig+0x2d4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d125      	bne.n	80027f6 <UART_SetConfig+0x1aa>
 80027aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002918 <UART_SetConfig+0x2cc>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80027b4:	2b30      	cmp	r3, #48	@ 0x30
 80027b6:	d016      	beq.n	80027e6 <UART_SetConfig+0x19a>
 80027b8:	2b30      	cmp	r3, #48	@ 0x30
 80027ba:	d818      	bhi.n	80027ee <UART_SetConfig+0x1a2>
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d00a      	beq.n	80027d6 <UART_SetConfig+0x18a>
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d814      	bhi.n	80027ee <UART_SetConfig+0x1a2>
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <UART_SetConfig+0x182>
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d008      	beq.n	80027de <UART_SetConfig+0x192>
 80027cc:	e00f      	b.n	80027ee <UART_SetConfig+0x1a2>
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027d4:	e0ad      	b.n	8002932 <UART_SetConfig+0x2e6>
 80027d6:	2302      	movs	r3, #2
 80027d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027dc:	e0a9      	b.n	8002932 <UART_SetConfig+0x2e6>
 80027de:	2304      	movs	r3, #4
 80027e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027e4:	e0a5      	b.n	8002932 <UART_SetConfig+0x2e6>
 80027e6:	2308      	movs	r3, #8
 80027e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027ec:	e0a1      	b.n	8002932 <UART_SetConfig+0x2e6>
 80027ee:	2310      	movs	r3, #16
 80027f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027f4:	e09d      	b.n	8002932 <UART_SetConfig+0x2e6>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002924 <UART_SetConfig+0x2d8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d125      	bne.n	800284c <UART_SetConfig+0x200>
 8002800:	4b45      	ldr	r3, [pc, #276]	@ (8002918 <UART_SetConfig+0x2cc>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002806:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800280a:	2bc0      	cmp	r3, #192	@ 0xc0
 800280c:	d016      	beq.n	800283c <UART_SetConfig+0x1f0>
 800280e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002810:	d818      	bhi.n	8002844 <UART_SetConfig+0x1f8>
 8002812:	2b80      	cmp	r3, #128	@ 0x80
 8002814:	d00a      	beq.n	800282c <UART_SetConfig+0x1e0>
 8002816:	2b80      	cmp	r3, #128	@ 0x80
 8002818:	d814      	bhi.n	8002844 <UART_SetConfig+0x1f8>
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <UART_SetConfig+0x1d8>
 800281e:	2b40      	cmp	r3, #64	@ 0x40
 8002820:	d008      	beq.n	8002834 <UART_SetConfig+0x1e8>
 8002822:	e00f      	b.n	8002844 <UART_SetConfig+0x1f8>
 8002824:	2300      	movs	r3, #0
 8002826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800282a:	e082      	b.n	8002932 <UART_SetConfig+0x2e6>
 800282c:	2302      	movs	r3, #2
 800282e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002832:	e07e      	b.n	8002932 <UART_SetConfig+0x2e6>
 8002834:	2304      	movs	r3, #4
 8002836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800283a:	e07a      	b.n	8002932 <UART_SetConfig+0x2e6>
 800283c:	2308      	movs	r3, #8
 800283e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002842:	e076      	b.n	8002932 <UART_SetConfig+0x2e6>
 8002844:	2310      	movs	r3, #16
 8002846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800284a:	e072      	b.n	8002932 <UART_SetConfig+0x2e6>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a35      	ldr	r2, [pc, #212]	@ (8002928 <UART_SetConfig+0x2dc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d12a      	bne.n	80028ac <UART_SetConfig+0x260>
 8002856:	4b30      	ldr	r3, [pc, #192]	@ (8002918 <UART_SetConfig+0x2cc>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002860:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002864:	d01a      	beq.n	800289c <UART_SetConfig+0x250>
 8002866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800286a:	d81b      	bhi.n	80028a4 <UART_SetConfig+0x258>
 800286c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002870:	d00c      	beq.n	800288c <UART_SetConfig+0x240>
 8002872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002876:	d815      	bhi.n	80028a4 <UART_SetConfig+0x258>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <UART_SetConfig+0x238>
 800287c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002880:	d008      	beq.n	8002894 <UART_SetConfig+0x248>
 8002882:	e00f      	b.n	80028a4 <UART_SetConfig+0x258>
 8002884:	2300      	movs	r3, #0
 8002886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800288a:	e052      	b.n	8002932 <UART_SetConfig+0x2e6>
 800288c:	2302      	movs	r3, #2
 800288e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002892:	e04e      	b.n	8002932 <UART_SetConfig+0x2e6>
 8002894:	2304      	movs	r3, #4
 8002896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800289a:	e04a      	b.n	8002932 <UART_SetConfig+0x2e6>
 800289c:	2308      	movs	r3, #8
 800289e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028a2:	e046      	b.n	8002932 <UART_SetConfig+0x2e6>
 80028a4:	2310      	movs	r3, #16
 80028a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028aa:	e042      	b.n	8002932 <UART_SetConfig+0x2e6>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a17      	ldr	r2, [pc, #92]	@ (8002910 <UART_SetConfig+0x2c4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d13a      	bne.n	800292c <UART_SetConfig+0x2e0>
 80028b6:	4b18      	ldr	r3, [pc, #96]	@ (8002918 <UART_SetConfig+0x2cc>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028c4:	d01a      	beq.n	80028fc <UART_SetConfig+0x2b0>
 80028c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028ca:	d81b      	bhi.n	8002904 <UART_SetConfig+0x2b8>
 80028cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028d0:	d00c      	beq.n	80028ec <UART_SetConfig+0x2a0>
 80028d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028d6:	d815      	bhi.n	8002904 <UART_SetConfig+0x2b8>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <UART_SetConfig+0x298>
 80028dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e0:	d008      	beq.n	80028f4 <UART_SetConfig+0x2a8>
 80028e2:	e00f      	b.n	8002904 <UART_SetConfig+0x2b8>
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028ea:	e022      	b.n	8002932 <UART_SetConfig+0x2e6>
 80028ec:	2302      	movs	r3, #2
 80028ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028f2:	e01e      	b.n	8002932 <UART_SetConfig+0x2e6>
 80028f4:	2304      	movs	r3, #4
 80028f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028fa:	e01a      	b.n	8002932 <UART_SetConfig+0x2e6>
 80028fc:	2308      	movs	r3, #8
 80028fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002902:	e016      	b.n	8002932 <UART_SetConfig+0x2e6>
 8002904:	2310      	movs	r3, #16
 8002906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800290a:	e012      	b.n	8002932 <UART_SetConfig+0x2e6>
 800290c:	efff69f3 	.word	0xefff69f3
 8002910:	40008000 	.word	0x40008000
 8002914:	40013800 	.word	0x40013800
 8002918:	40021000 	.word	0x40021000
 800291c:	40004400 	.word	0x40004400
 8002920:	40004800 	.word	0x40004800
 8002924:	40004c00 	.word	0x40004c00
 8002928:	40005000 	.word	0x40005000
 800292c:	2310      	movs	r3, #16
 800292e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a9f      	ldr	r2, [pc, #636]	@ (8002bb4 <UART_SetConfig+0x568>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d17a      	bne.n	8002a32 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800293c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002940:	2b08      	cmp	r3, #8
 8002942:	d824      	bhi.n	800298e <UART_SetConfig+0x342>
 8002944:	a201      	add	r2, pc, #4	@ (adr r2, 800294c <UART_SetConfig+0x300>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	08002971 	.word	0x08002971
 8002950:	0800298f 	.word	0x0800298f
 8002954:	08002979 	.word	0x08002979
 8002958:	0800298f 	.word	0x0800298f
 800295c:	0800297f 	.word	0x0800297f
 8002960:	0800298f 	.word	0x0800298f
 8002964:	0800298f 	.word	0x0800298f
 8002968:	0800298f 	.word	0x0800298f
 800296c:	08002987 	.word	0x08002987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002970:	f7ff f8d6 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8002974:	61f8      	str	r0, [r7, #28]
        break;
 8002976:	e010      	b.n	800299a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002978:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb8 <UART_SetConfig+0x56c>)
 800297a:	61fb      	str	r3, [r7, #28]
        break;
 800297c:	e00d      	b.n	800299a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800297e:	f7ff f837 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 8002982:	61f8      	str	r0, [r7, #28]
        break;
 8002984:	e009      	b.n	800299a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800298a:	61fb      	str	r3, [r7, #28]
        break;
 800298c:	e005      	b.n	800299a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002998:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80fb 	beq.w	8002b98 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d305      	bcc.n	80029be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d903      	bls.n	80029c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80029c4:	e0e8      	b.n	8002b98 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	2200      	movs	r2, #0
 80029ca:	461c      	mov	r4, r3
 80029cc:	4615      	mov	r5, r2
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	022b      	lsls	r3, r5, #8
 80029d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80029dc:	0222      	lsls	r2, r4, #8
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	6849      	ldr	r1, [r1, #4]
 80029e2:	0849      	lsrs	r1, r1, #1
 80029e4:	2000      	movs	r0, #0
 80029e6:	4688      	mov	r8, r1
 80029e8:	4681      	mov	r9, r0
 80029ea:	eb12 0a08 	adds.w	sl, r2, r8
 80029ee:	eb43 0b09 	adc.w	fp, r3, r9
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a00:	4650      	mov	r0, sl
 8002a02:	4659      	mov	r1, fp
 8002a04:	f7fd fbe0 	bl	80001c8 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a16:	d308      	bcc.n	8002a2a <UART_SetConfig+0x3de>
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a1e:	d204      	bcs.n	8002a2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	e0b6      	b.n	8002b98 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002a30:	e0b2      	b.n	8002b98 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a3a:	d15e      	bne.n	8002afa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d828      	bhi.n	8002a96 <UART_SetConfig+0x44a>
 8002a44:	a201      	add	r2, pc, #4	@ (adr r2, 8002a4c <UART_SetConfig+0x400>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002a71 	.word	0x08002a71
 8002a50:	08002a79 	.word	0x08002a79
 8002a54:	08002a81 	.word	0x08002a81
 8002a58:	08002a97 	.word	0x08002a97
 8002a5c:	08002a87 	.word	0x08002a87
 8002a60:	08002a97 	.word	0x08002a97
 8002a64:	08002a97 	.word	0x08002a97
 8002a68:	08002a97 	.word	0x08002a97
 8002a6c:	08002a8f 	.word	0x08002a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a70:	f7ff f856 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8002a74:	61f8      	str	r0, [r7, #28]
        break;
 8002a76:	e014      	b.n	8002aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a78:	f7ff f868 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8002a7c:	61f8      	str	r0, [r7, #28]
        break;
 8002a7e:	e010      	b.n	8002aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a80:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb8 <UART_SetConfig+0x56c>)
 8002a82:	61fb      	str	r3, [r7, #28]
        break;
 8002a84:	e00d      	b.n	8002aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a86:	f7fe ffb3 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 8002a8a:	61f8      	str	r0, [r7, #28]
        break;
 8002a8c:	e009      	b.n	8002aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a92:	61fb      	str	r3, [r7, #28]
        break;
 8002a94:	e005      	b.n	8002aa2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002aa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d077      	beq.n	8002b98 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005a      	lsls	r2, r3, #1
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	441a      	add	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b0f      	cmp	r3, #15
 8002ac2:	d916      	bls.n	8002af2 <UART_SetConfig+0x4a6>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aca:	d212      	bcs.n	8002af2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f023 030f 	bic.w	r3, r3, #15
 8002ad4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	8afb      	ldrh	r3, [r7, #22]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	8afa      	ldrh	r2, [r7, #22]
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	e052      	b.n	8002b98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002af8:	e04e      	b.n	8002b98 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002afa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d827      	bhi.n	8002b52 <UART_SetConfig+0x506>
 8002b02:	a201      	add	r2, pc, #4	@ (adr r2, 8002b08 <UART_SetConfig+0x4bc>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b2d 	.word	0x08002b2d
 8002b0c:	08002b35 	.word	0x08002b35
 8002b10:	08002b3d 	.word	0x08002b3d
 8002b14:	08002b53 	.word	0x08002b53
 8002b18:	08002b43 	.word	0x08002b43
 8002b1c:	08002b53 	.word	0x08002b53
 8002b20:	08002b53 	.word	0x08002b53
 8002b24:	08002b53 	.word	0x08002b53
 8002b28:	08002b4b 	.word	0x08002b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b2c:	f7fe fff8 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8002b30:	61f8      	str	r0, [r7, #28]
        break;
 8002b32:	e014      	b.n	8002b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b34:	f7ff f80a 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8002b38:	61f8      	str	r0, [r7, #28]
        break;
 8002b3a:	e010      	b.n	8002b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb8 <UART_SetConfig+0x56c>)
 8002b3e:	61fb      	str	r3, [r7, #28]
        break;
 8002b40:	e00d      	b.n	8002b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b42:	f7fe ff55 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 8002b46:	61f8      	str	r0, [r7, #28]
        break;
 8002b48:	e009      	b.n	8002b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b4e:	61fb      	str	r3, [r7, #28]
        break;
 8002b50:	e005      	b.n	8002b5e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002b5c:	bf00      	nop
    }

    if (pclk != 0U)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d019      	beq.n	8002b98 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	085a      	lsrs	r2, r3, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	441a      	add	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	d909      	bls.n	8002b92 <UART_SetConfig+0x546>
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b84:	d205      	bcs.n	8002b92 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	e002      	b.n	8002b98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002ba4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3728      	adds	r7, #40	@ 0x28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40008000 	.word	0x40008000
 8002bb8:	00f42400 	.word	0x00f42400

08002bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01a      	beq.n	8002cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cba:	d10a      	bne.n	8002cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b098      	sub	sp, #96	@ 0x60
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d10:	f7fd fe3e 	bl	8000990 <HAL_GetTick>
 8002d14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d12e      	bne.n	8002d82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f88c 	bl	8002e50 <UART_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d021      	beq.n	8002d82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d46:	e853 3f00 	ldrex	r3, [r3]
 8002d4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d52:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d64:	e841 2300 	strex	r3, r2, [r1]
 8002d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e6      	bne.n	8002d3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e062      	b.n	8002e48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d149      	bne.n	8002e24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f856 	bl	8002e50 <UART_WaitOnFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d03c      	beq.n	8002e24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	623b      	str	r3, [r7, #32]
   return(result);
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd0:	e841 2300 	strex	r3, r2, [r1]
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e6      	bne.n	8002daa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3308      	adds	r3, #8
 8002de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	e853 3f00 	ldrex	r3, [r3]
 8002dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3308      	adds	r3, #8
 8002dfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dfc:	61fa      	str	r2, [r7, #28]
 8002dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e00:	69b9      	ldr	r1, [r7, #24]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	e841 2300 	strex	r3, r2, [r1]
 8002e08:	617b      	str	r3, [r7, #20]
   return(result);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e5      	bne.n	8002ddc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e011      	b.n	8002e48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3758      	adds	r7, #88	@ 0x58
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e60:	e04f      	b.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d04b      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6a:	f7fd fd91 	bl	8000990 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e04e      	b.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d037      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b80      	cmp	r3, #128	@ 0x80
 8002e96:	d034      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b40      	cmp	r3, #64	@ 0x40
 8002e9c:	d031      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d110      	bne.n	8002ece <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f838 	bl	8002f2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e029      	b.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002edc:	d111      	bne.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f81e 	bl	8002f2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e00f      	b.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	bf0c      	ite	eq
 8002f12:	2301      	moveq	r3, #1
 8002f14:	2300      	movne	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d0a0      	beq.n	8002e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b095      	sub	sp, #84	@ 0x54
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f58:	e841 2300 	strex	r3, r2, [r1]
 8002f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e6      	bne.n	8002f32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3308      	adds	r3, #8
 8002f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	e853 3f00 	ldrex	r3, [r3]
 8002f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f023 0301 	bic.w	r3, r3, #1
 8002f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3308      	adds	r3, #8
 8002f82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f8c:	e841 2300 	strex	r3, r2, [r1]
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e5      	bne.n	8002f64 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d118      	bne.n	8002fd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f023 0310 	bic.w	r3, r3, #16
 8002fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	6979      	ldr	r1, [r7, #20]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	613b      	str	r3, [r7, #16]
   return(result);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e6      	bne.n	8002fa0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fe6:	bf00      	nop
 8002fe8:	3754      	adds	r7, #84	@ 0x54
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <memset>:
 8002ff2:	4402      	add	r2, r0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d100      	bne.n	8002ffc <memset+0xa>
 8002ffa:	4770      	bx	lr
 8002ffc:	f803 1b01 	strb.w	r1, [r3], #1
 8003000:	e7f9      	b.n	8002ff6 <memset+0x4>
	...

08003004 <__libc_init_array>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	4d0d      	ldr	r5, [pc, #52]	@ (800303c <__libc_init_array+0x38>)
 8003008:	4c0d      	ldr	r4, [pc, #52]	@ (8003040 <__libc_init_array+0x3c>)
 800300a:	1b64      	subs	r4, r4, r5
 800300c:	10a4      	asrs	r4, r4, #2
 800300e:	2600      	movs	r6, #0
 8003010:	42a6      	cmp	r6, r4
 8003012:	d109      	bne.n	8003028 <__libc_init_array+0x24>
 8003014:	4d0b      	ldr	r5, [pc, #44]	@ (8003044 <__libc_init_array+0x40>)
 8003016:	4c0c      	ldr	r4, [pc, #48]	@ (8003048 <__libc_init_array+0x44>)
 8003018:	f000 f818 	bl	800304c <_init>
 800301c:	1b64      	subs	r4, r4, r5
 800301e:	10a4      	asrs	r4, r4, #2
 8003020:	2600      	movs	r6, #0
 8003022:	42a6      	cmp	r6, r4
 8003024:	d105      	bne.n	8003032 <__libc_init_array+0x2e>
 8003026:	bd70      	pop	{r4, r5, r6, pc}
 8003028:	f855 3b04 	ldr.w	r3, [r5], #4
 800302c:	4798      	blx	r3
 800302e:	3601      	adds	r6, #1
 8003030:	e7ee      	b.n	8003010 <__libc_init_array+0xc>
 8003032:	f855 3b04 	ldr.w	r3, [r5], #4
 8003036:	4798      	blx	r3
 8003038:	3601      	adds	r6, #1
 800303a:	e7f2      	b.n	8003022 <__libc_init_array+0x1e>
 800303c:	080030b4 	.word	0x080030b4
 8003040:	080030b4 	.word	0x080030b4
 8003044:	080030b4 	.word	0x080030b4
 8003048:	080030b8 	.word	0x080030b8

0800304c <_init>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr

08003058 <_fini>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr
