
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004b78  08004b78  00005b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc0  08004bc0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004bc0  08004bc0  00005bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bc8  08004bc8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bc8  08004bc8  00005bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bcc  08004bcc  00005bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004bd0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08004bdc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08004bdc  0000612c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f331  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7d  00000000  00000000  0001536d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000172f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4f  00000000  00000000  00018050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f79  00000000  00000000  00018a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f35a  00000000  00000000  0003fa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8b0c  00000000  00000000  0004ed72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014787e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003854  00000000  00000000  001478c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0014b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b60 	.word	0x08004b60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004b60 	.word	0x08004b60

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fb33 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f831 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f959 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ca:	f000 f927 	bl	800071c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004ce:	f000 f87d 	bl	80005cc <MX_ADC1_Init>
  MX_DAC1_Init();
 80004d2:	f000 f8f1 	bl	80006b8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  int val = 1;
 80004d6:	2301      	movs	r3, #1
 80004d8:	607b      	str	r3, [r7, #4]
  HAL_DAC_Init(&hdac1);
 80004da:	4811      	ldr	r0, [pc, #68]	@ (8000520 <main+0x68>)
 80004dc:	f001 ff6d 	bl	80023ba <HAL_DAC_Init>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80004e0:	2110      	movs	r1, #16
 80004e2:	480f      	ldr	r0, [pc, #60]	@ (8000520 <main+0x68>)
 80004e4:	f001 ff8b 	bl	80023fe <HAL_DAC_Start>

  HAL_ADC_Init(&hadc1);
 80004e8:	480e      	ldr	r0, [pc, #56]	@ (8000524 <main+0x6c>)
 80004ea:	f000 fdcd 	bl	8001088 <HAL_ADC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hadc1.Init.NbrOfConversion = 1;
 80004ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000524 <main+0x6c>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	61da      	str	r2, [r3, #28]
	  HAL_ADC_Start(&hadc1);
 80004f4:	480b      	ldr	r0, [pc, #44]	@ (8000524 <main+0x6c>)
 80004f6:	f000 ff17 	bl	8001328 <HAL_ADC_Start>
	  val = HAL_ADC_GetValue(&hadc1);
 80004fa:	480a      	ldr	r0, [pc, #40]	@ (8000524 <main+0x6c>)
 80004fc:	f001 f801 	bl	8001502 <HAL_ADC_GetValue>
 8000500:	4603      	mov	r3, r0
 8000502:	607b      	str	r3, [r7, #4]
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, val);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	2110      	movs	r1, #16
 800050a:	4805      	ldr	r0, [pc, #20]	@ (8000520 <main+0x68>)
 800050c:	f001 ffc4 	bl	8002498 <HAL_DAC_SetValue>
	  HAL_ADC_Stop(&hadc1);
 8000510:	4804      	ldr	r0, [pc, #16]	@ (8000524 <main+0x6c>)
 8000512:	f000 ffc3 	bl	800149c <HAL_ADC_Stop>
	  HAL_Delay(1);
 8000516:	2001      	movs	r0, #1
 8000518:	f000 fb82 	bl	8000c20 <HAL_Delay>
	  hadc1.Init.NbrOfConversion = 1;
 800051c:	bf00      	nop
 800051e:	e7e6      	b.n	80004ee <main+0x36>
 8000520:	2000008c 	.word	0x2000008c
 8000524:	20000028 	.word	0x20000028

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	@ 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	@ 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f004 fae5 	bl	8004b06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800054e:	f002 faa7 	bl	8002aa0 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 f94c 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	2310      	movs	r3, #16
 8000568:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000572:	2301      	movs	r3, #1
 8000574:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000576:	230a      	movs	r3, #10
 8000578:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fade 	bl	8002b4c <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000596:	f000 f92d 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2303      	movs	r3, #3
 80005a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fea6 	bl	8003304 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005be:	f000 f919 	bl	80007f4 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3758      	adds	r7, #88	@ 0x58
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ee:	4b2f      	ldr	r3, [pc, #188]	@ (80006ac <MX_ADC1_Init+0xe0>)
 80005f0:	4a2f      	ldr	r2, [pc, #188]	@ (80006b0 <MX_ADC1_Init+0xe4>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005f4:	4b2d      	ldr	r3, [pc, #180]	@ (80006ac <MX_ADC1_Init+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000600:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <MX_ADC1_Init+0xe0>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060c:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <MX_ADC1_Init+0xe0>)
 800060e:	2204      	movs	r2, #4
 8000610:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000612:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <MX_ADC1_Init+0xe0>)
 8000614:	2200      	movs	r2, #0
 8000616:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000618:	4b24      	ldr	r3, [pc, #144]	@ (80006ac <MX_ADC1_Init+0xe0>)
 800061a:	2200      	movs	r2, #0
 800061c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800061e:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <MX_ADC1_Init+0xe0>)
 8000620:	2201      	movs	r2, #1
 8000622:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <MX_ADC1_Init+0xe0>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <MX_ADC1_Init+0xe0>)
 800062e:	2200      	movs	r2, #0
 8000630:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000632:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <MX_ADC1_Init+0xe0>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000640:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <MX_ADC1_Init+0xe0>)
 8000642:	2200      	movs	r2, #0
 8000644:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <MX_ADC1_Init+0xe0>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064e:	4817      	ldr	r0, [pc, #92]	@ (80006ac <MX_ADC1_Init+0xe0>)
 8000650:	f000 fd1a 	bl	8001088 <HAL_ADC_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800065a:	f000 f8cb 	bl	80007f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	4810      	ldr	r0, [pc, #64]	@ (80006ac <MX_ADC1_Init+0xe0>)
 800066a:	f001 fd11 	bl	8002090 <HAL_ADCEx_MultiModeConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000674:	f000 f8be 	bl	80007f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_ADC1_Init+0xe8>)
 800067a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067c:	2306      	movs	r3, #6
 800067e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000684:	237f      	movs	r3, #127	@ 0x7f
 8000686:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000688:	2304      	movs	r3, #4
 800068a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	@ (80006ac <MX_ADC1_Init+0xe0>)
 8000696:	f000 ff41 	bl	800151c <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006a0:	f000 f8a8 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	@ 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000028 	.word	0x20000028
 80006b0:	50040000 	.word	0x50040000
 80006b4:	04300002 	.word	0x04300002

080006b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	@ 0x28
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2224      	movs	r2, #36	@ 0x24
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fa1e 	bl	8004b06 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006ca:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_DAC1_Init+0x5c>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_DAC1_Init+0x60>)
 80006ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006d0:	4810      	ldr	r0, [pc, #64]	@ (8000714 <MX_DAC1_Init+0x5c>)
 80006d2:	f001 fe72 	bl	80023ba <HAL_DAC_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006dc:	f000 f88a 	bl	80007f4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2210      	movs	r2, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	@ (8000714 <MX_DAC1_Init+0x5c>)
 80006fc:	f001 fef1 	bl	80024e2 <HAL_DAC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f875 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	@ 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000008c 	.word	0x2000008c
 8000718:	40007400 	.word	0x40007400

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_USART2_UART_Init+0x58>)
 8000722:	4a15      	ldr	r2, [pc, #84]	@ (8000778 <MX_USART2_UART_Init+0x5c>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_USART2_UART_Init+0x58>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_USART2_UART_Init+0x58>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_USART2_UART_Init+0x58>)
 8000760:	f003 fcb0 	bl	80040c4 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f843 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000a0 	.word	0x200000a0
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_GPIO_Init+0x74>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	4a1a      	ldr	r2, [pc, #104]	@ (80007f0 <MX_GPIO_Init+0x74>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_GPIO_Init+0x74>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_GPIO_Init+0x74>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_GPIO_Init+0x74>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <HAL_MspInit+0x44>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800080a:	4a0e      	ldr	r2, [pc, #56]	@ (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6613      	str	r3, [r2, #96]	@ 0x60
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_MspInit+0x44>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000822:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <HAL_MspInit+0x44>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000828:	6593      	str	r3, [r2, #88]	@ 0x58
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0ac      	sub	sp, #176	@ 0xb0
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2288      	movs	r2, #136	@ 0x88
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f004 f94c 	bl	8004b06 <memset>
  if(hadc->Instance==ADC1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a27      	ldr	r2, [pc, #156]	@ (8000910 <HAL_ADC_MspInit+0xc8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d146      	bne.n	8000906 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000878:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800087c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800087e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000882:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800088e:	2308      	movs	r3, #8
 8000890:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000892:	2307      	movs	r3, #7
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800089a:	2302      	movs	r3, #2
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800089e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008a2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 ff4f 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80008b4:	f7ff ff9e 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008b8:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <HAL_ADC_MspInit+0xcc>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008bc:	4a15      	ldr	r2, [pc, #84]	@ (8000914 <HAL_ADC_MspInit+0xcc>)
 80008be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c4:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <HAL_ADC_MspInit+0xcc>)
 80008c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d0:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <HAL_ADC_MspInit+0xcc>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000914 <HAL_ADC_MspInit+0xcc>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <HAL_ADC_MspInit+0xcc>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e8:	2301      	movs	r3, #1
 80008ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008ee:	230b      	movs	r3, #11
 80008f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	@ (8000918 <HAL_ADC_MspInit+0xd0>)
 8000902:	f001 ff15 	bl	8002730 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000906:	bf00      	nop
 8000908:	37b0      	adds	r7, #176	@ 0xb0
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	50040000 	.word	0x50040000
 8000914:	40021000 	.word	0x40021000
 8000918:	48000800 	.word	0x48000800

0800091c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a15      	ldr	r2, [pc, #84]	@ (8000990 <HAL_DAC_MspInit+0x74>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d124      	bne.n	8000988 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <HAL_DAC_MspInit+0x78>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000942:	4a14      	ldr	r2, [pc, #80]	@ (8000994 <HAL_DAC_MspInit+0x78>)
 8000944:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000948:	6593      	str	r3, [r2, #88]	@ 0x58
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_DAC_MspInit+0x78>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <HAL_DAC_MspInit+0x78>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	4a0e      	ldr	r2, [pc, #56]	@ (8000994 <HAL_DAC_MspInit+0x78>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <HAL_DAC_MspInit+0x78>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800096e:	2320      	movs	r3, #32
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000972:	2303      	movs	r3, #3
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000984:	f001 fed4 	bl	8002730 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	@ 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40007400 	.word	0x40007400
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0ac      	sub	sp, #176	@ 0xb0
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2288      	movs	r2, #136	@ 0x88
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f004 f8a4 	bl	8004b06 <memset>
  if(huart->Instance==USART2)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a21      	ldr	r2, [pc, #132]	@ (8000a48 <HAL_UART_MspInit+0xb0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d13b      	bne.n	8000a40 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 feb9 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009e0:	f7ff ff08 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e4:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <HAL_UART_MspInit+0xb4>)
 80009e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e8:	4a18      	ldr	r2, [pc, #96]	@ (8000a4c <HAL_UART_MspInit+0xb4>)
 80009ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f0:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <HAL_UART_MspInit+0xb4>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <HAL_UART_MspInit+0xb4>)
 80009fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a00:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <HAL_UART_MspInit+0xb4>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <HAL_UART_MspInit+0xb4>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a14:	230c      	movs	r3, #12
 8000a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a36:	4619      	mov	r1, r3
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3c:	f001 fe78 	bl	8002730 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a40:	bf00      	nop
 8000a42:	37b0      	adds	r7, #176	@ 0xb0
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40004400 	.word	0x40004400
 8000a4c:	40021000 	.word	0x40021000

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <NMI_Handler+0x4>

08000a58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <MemManage_Handler+0x4>

08000a68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa6:	f000 f89b 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	@ (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad8:	f7ff ffea 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	@ (8000b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b18 <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b20 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f004 f809 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b06:	f7ff fcd7 	bl	80004b8 <main>

08000b0a <LoopForever>:

LoopForever:
    b LoopForever
 8000b0a:	e7fe      	b.n	8000b0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b18:	08004bd0 	.word	0x08004bd0
  ldr r2, =_sbss
 8000b1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b20:	2000012c 	.word	0x2000012c

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_Init+0x3c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <HAL_Init+0x3c>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f001 fc08 	bl	8002354 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 f80f 	bl	8000b68 <HAL_InitTick>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	e001      	b.n	8000b5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b56:	f7ff fe53 	bl	8000800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b74:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <HAL_InitTick+0x6c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d023      	beq.n	8000bc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b7c:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <HAL_InitTick+0x70>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <HAL_InitTick+0x6c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fc05 	bl	80023a2 <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10f      	bne.n	8000bbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d809      	bhi.n	8000bb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f001 fbdd 	bl	800236a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <HAL_InitTick+0x74>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	e007      	b.n	8000bc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e004      	b.n	8000bc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e001      	b.n	8000bc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000128 	.word	0x20000128

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	@ (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000128 	.word	0x20000128

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff ffee 	bl	8000c08 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c46:	bf00      	nop
 8000c48:	f7ff ffde 	bl	8000c08 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008

08000c68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	609a      	str	r2, [r3, #8]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3360      	adds	r3, #96	@ 0x60
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <LL_ADC_SetOffset+0x44>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d08:	bf00      	nop
 8000d0a:	371c      	adds	r7, #28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	03fff000 	.word	0x03fff000

08000d18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3360      	adds	r3, #96	@ 0x60
 8000d26:	461a      	mov	r2, r3
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3360      	adds	r3, #96	@ 0x60
 8000d54:	461a      	mov	r2, r3
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d6e:	bf00      	nop
 8000d70:	371c      	adds	r7, #28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b087      	sub	sp, #28
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3330      	adds	r3, #48	@ 0x30
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	0a1b      	lsrs	r3, r3, #8
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	f003 030c 	and.w	r3, r3, #12
 8000d96:	4413      	add	r3, r2
 8000d98:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	f003 031f 	and.w	r3, r3, #31
 8000da4:	211f      	movs	r1, #31
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	401a      	ands	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	0e9b      	lsrs	r3, r3, #26
 8000db2:	f003 011f 	and.w	r1, r3, #31
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	f003 031f 	and.w	r3, r3, #31
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dc6:	bf00      	nop
 8000dc8:	371c      	adds	r7, #28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b087      	sub	sp, #28
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3314      	adds	r3, #20
 8000de2:	461a      	mov	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	0e5b      	lsrs	r3, r3, #25
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	4413      	add	r3, r2
 8000df0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	0d1b      	lsrs	r3, r3, #20
 8000dfa:	f003 031f 	and.w	r3, r3, #31
 8000dfe:	2107      	movs	r1, #7
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	401a      	ands	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	0d1b      	lsrs	r3, r3, #20
 8000e0c:	f003 031f 	and.w	r3, r3, #31
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	431a      	orrs	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e1c:	bf00      	nop
 8000e1e:	371c      	adds	r7, #28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e40:	43db      	mvns	r3, r3
 8000e42:	401a      	ands	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0318 	and.w	r3, r3, #24
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e4c:	40d9      	lsrs	r1, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	400b      	ands	r3, r1
 8000e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e56:	431a      	orrs	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	0007ffff 	.word	0x0007ffff

08000e70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 031f 	and.w	r3, r3, #31
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000e9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6093      	str	r3, [r2, #8]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ec4:	d101      	bne.n	8000eca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ee8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000eec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f14:	d101      	bne.n	8000f1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f3c:	f043 0201 	orr.w	r2, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f64:	f043 0202 	orr.w	r2, r3, #2
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d101      	bne.n	8000f90 <LL_ADC_IsEnabled+0x18>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <LL_ADC_IsEnabled+0x1a>
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d101      	bne.n	8000fb6 <LL_ADC_IsDisableOngoing+0x18>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <LL_ADC_IsDisableOngoing+0x1a>
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fd8:	f043 0204 	orr.w	r2, r3, #4
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ffc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001000:	f043 0210 	orr.w	r2, r3, #16
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b04      	cmp	r3, #4
 8001026:	d101      	bne.n	800102c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800104a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800104e:	f043 0220 	orr.w	r2, r3, #32
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b08      	cmp	r3, #8
 8001074:	d101      	bne.n	800107a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e130      	b.n	8001304 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d109      	bne.n	80010c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff fbc9 	bl	8000848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fef1 	bl	8000eb0 <LL_ADC_IsDeepPowerDownEnabled>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fed7 	bl	8000e8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff0c 	bl	8000f00 <LL_ADC_IsInternalRegulatorEnabled>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d115      	bne.n	800111a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fef0 	bl	8000ed8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010f8:	4b84      	ldr	r3, [pc, #528]	@ (800130c <HAL_ADC_Init+0x284>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	099b      	lsrs	r3, r3, #6
 80010fe:	4a84      	ldr	r2, [pc, #528]	@ (8001310 <HAL_ADC_Init+0x288>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	099b      	lsrs	r3, r3, #6
 8001106:	3301      	adds	r3, #1
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800110c:	e002      	b.n	8001114 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3b01      	subs	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f9      	bne.n	800110e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff feee 	bl	8000f00 <LL_ADC_IsInternalRegulatorEnabled>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10d      	bne.n	8001146 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112e:	f043 0210 	orr.w	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113a:	f043 0201 	orr.w	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff62 	bl	8001014 <LL_ADC_REG_IsConversionOngoing>
 8001150:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	f040 80c9 	bne.w	80012f2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 80c5 	bne.w	80012f2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800116c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001170:	f043 0202 	orr.w	r2, r3, #2
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fefb 	bl	8000f78 <LL_ADC_IsEnabled>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d115      	bne.n	80011b4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001188:	4862      	ldr	r0, [pc, #392]	@ (8001314 <HAL_ADC_Init+0x28c>)
 800118a:	f7ff fef5 	bl	8000f78 <LL_ADC_IsEnabled>
 800118e:	4604      	mov	r4, r0
 8001190:	4861      	ldr	r0, [pc, #388]	@ (8001318 <HAL_ADC_Init+0x290>)
 8001192:	f7ff fef1 	bl	8000f78 <LL_ADC_IsEnabled>
 8001196:	4603      	mov	r3, r0
 8001198:	431c      	orrs	r4, r3
 800119a:	4860      	ldr	r0, [pc, #384]	@ (800131c <HAL_ADC_Init+0x294>)
 800119c:	f7ff feec 	bl	8000f78 <LL_ADC_IsEnabled>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4323      	orrs	r3, r4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4619      	mov	r1, r3
 80011ae:	485c      	ldr	r0, [pc, #368]	@ (8001320 <HAL_ADC_Init+0x298>)
 80011b0:	f7ff fd5a 	bl	8000c68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7e5b      	ldrb	r3, [r3, #25]
 80011b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d106      	bne.n	80011f0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	3b01      	subs	r3, #1
 80011e8:	045b      	lsls	r3, r3, #17
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d009      	beq.n	800120c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001204:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	4b44      	ldr	r3, [pc, #272]	@ (8001324 <HAL_ADC_Init+0x29c>)
 8001214:	4013      	ands	r3, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	69b9      	ldr	r1, [r7, #24]
 800121c:	430b      	orrs	r3, r1
 800121e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff1c 	bl	8001062 <LL_ADC_INJ_IsConversionOngoing>
 800122a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d13d      	bne.n	80012ae <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d13a      	bne.n	80012ae <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800123c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001244:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001254:	f023 0302 	bic.w	r3, r3, #2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	69b9      	ldr	r1, [r7, #24]
 800125e:	430b      	orrs	r3, r1
 8001260:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001268:	2b01      	cmp	r3, #1
 800126a:	d118      	bne.n	800129e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001276:	f023 0304 	bic.w	r3, r3, #4
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001282:	4311      	orrs	r1, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001288:	4311      	orrs	r1, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800128e:	430a      	orrs	r2, r1
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0201 	orr.w	r2, r2, #1
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	e007      	b.n	80012ae <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d10c      	bne.n	80012d0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	f023 010f 	bic.w	r1, r3, #15
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	1e5a      	subs	r2, r3, #1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80012ce:	e007      	b.n	80012e0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 020f 	bic.w	r2, r2, #15
 80012de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e4:	f023 0303 	bic.w	r3, r3, #3
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80012f0:	e007      	b.n	8001302 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012f6:	f043 0210 	orr.w	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001302:	7ffb      	ldrb	r3, [r7, #31]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3724      	adds	r7, #36	@ 0x24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd90      	pop	{r4, r7, pc}
 800130c:	20000000 	.word	0x20000000
 8001310:	053e2d63 	.word	0x053e2d63
 8001314:	50040000 	.word	0x50040000
 8001318:	50040100 	.word	0x50040100
 800131c:	50040200 	.word	0x50040200
 8001320:	50040300 	.word	0x50040300
 8001324:	fff0c007 	.word	0xfff0c007

08001328 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001330:	4857      	ldr	r0, [pc, #348]	@ (8001490 <HAL_ADC_Start+0x168>)
 8001332:	f7ff fd9d 	bl	8000e70 <LL_ADC_GetMultimode>
 8001336:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe69 	bl	8001014 <LL_ADC_REG_IsConversionOngoing>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	f040 809c 	bne.w	8001482 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <HAL_ADC_Start+0x30>
 8001354:	2302      	movs	r3, #2
 8001356:	e097      	b.n	8001488 <HAL_ADC_Start+0x160>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fd89 	bl	8001e78 <ADC_Enable>
 8001366:	4603      	mov	r3, r0
 8001368:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	2b00      	cmp	r3, #0
 800136e:	f040 8083 	bne.w	8001478 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001376:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a42      	ldr	r2, [pc, #264]	@ (8001494 <HAL_ADC_Start+0x16c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d002      	beq.n	8001396 <HAL_ADC_Start+0x6e>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	e000      	b.n	8001398 <HAL_ADC_Start+0x70>
 8001396:	4b40      	ldr	r3, [pc, #256]	@ (8001498 <HAL_ADC_Start+0x170>)
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4293      	cmp	r3, r2
 800139e:	d002      	beq.n	80013a6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013be:	d106      	bne.n	80013ce <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c4:	f023 0206 	bic.w	r2, r3, #6
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	221c      	movs	r2, #28
 80013da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001494 <HAL_ADC_Start+0x16c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d002      	beq.n	80013f4 <HAL_ADC_Start+0xcc>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	e000      	b.n	80013f6 <HAL_ADC_Start+0xce>
 80013f4:	4b28      	ldr	r3, [pc, #160]	@ (8001498 <HAL_ADC_Start+0x170>)
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d008      	beq.n	8001410 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d002      	beq.n	8001410 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	2b09      	cmp	r3, #9
 800140e:	d114      	bne.n	800143a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001422:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001426:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fdc6 	bl	8000fc4 <LL_ADC_REG_StartConversion>
 8001438:	e025      	b.n	8001486 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800143e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <HAL_ADC_Start+0x16c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d002      	beq.n	8001456 <HAL_ADC_Start+0x12e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	e000      	b.n	8001458 <HAL_ADC_Start+0x130>
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <HAL_ADC_Start+0x170>)
 8001458:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00f      	beq.n	8001486 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800146e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	655a      	str	r2, [r3, #84]	@ 0x54
 8001476:	e006      	b.n	8001486 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001480:	e001      	b.n	8001486 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001482:	2302      	movs	r3, #2
 8001484:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001486:	7dfb      	ldrb	r3, [r7, #23]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	50040300 	.word	0x50040300
 8001494:	50040100 	.word	0x50040100
 8001498:	50040000 	.word	0x50040000

0800149c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_Stop+0x16>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e023      	b.n	80014fa <HAL_ADC_Stop+0x5e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80014ba:	2103      	movs	r1, #3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fc1f 	bl	8001d00 <ADC_ConversionStop>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 fd59 	bl	8001f84 <ADC_Disable>
 80014d2:	4603      	mov	r3, r0
 80014d4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d109      	bne.n	80014f0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	f043 0201 	orr.w	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b0b6      	sub	sp, #216	@ 0xd8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_ADC_ConfigChannel+0x22>
 800153a:	2302      	movs	r3, #2
 800153c:	e3c9      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x7b6>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fd62 	bl	8001014 <LL_ADC_REG_IsConversionOngoing>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 83aa 	bne.w	8001cac <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b05      	cmp	r3, #5
 8001566:	d824      	bhi.n	80015b2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	3b02      	subs	r3, #2
 800156e:	2b03      	cmp	r3, #3
 8001570:	d81b      	bhi.n	80015aa <HAL_ADC_ConfigChannel+0x8e>
 8001572:	a201      	add	r2, pc, #4	@ (adr r2, 8001578 <HAL_ADC_ConfigChannel+0x5c>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001589 	.word	0x08001589
 800157c:	08001591 	.word	0x08001591
 8001580:	08001599 	.word	0x08001599
 8001584:	080015a1 	.word	0x080015a1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001588:	230c      	movs	r3, #12
 800158a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800158e:	e010      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001590:	2312      	movs	r3, #18
 8001592:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001596:	e00c      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001598:	2318      	movs	r3, #24
 800159a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800159e:	e008      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80015a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015a8:	e003      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80015aa:	2306      	movs	r3, #6
 80015ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015b0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80015c0:	f7ff fbdb 	bl	8000d7a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fd23 	bl	8001014 <LL_ADC_REG_IsConversionOngoing>
 80015ce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fd43 	bl	8001062 <LL_ADC_INJ_IsConversionOngoing>
 80015dc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f040 81a4 	bne.w	8001932 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 819f 	bne.w	8001932 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	461a      	mov	r2, r3
 8001602:	f7ff fbe6 	bl	8000dd2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b04      	cmp	r3, #4
 8001626:	d00a      	beq.n	800163e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6919      	ldr	r1, [r3, #16]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001638:	f7ff fb4a 	bl	8000cd0 <LL_ADC_SetOffset>
 800163c:	e179      	b.n	8001932 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fb67 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10a      	bne.n	800166a <HAL_ADC_ConfigChannel+0x14e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fb5c 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	0e9b      	lsrs	r3, r3, #26
 8001664:	f003 021f 	and.w	r2, r3, #31
 8001668:	e01e      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x18c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fb51 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001680:	fa93 f3a3 	rbit	r3, r3
 8001684:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001688:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800168c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001690:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001698:	2320      	movs	r3, #32
 800169a:	e004      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800169c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x1a4>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	0e9b      	lsrs	r3, r3, #26
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	e018      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80016d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80016dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80016e4:	2320      	movs	r3, #32
 80016e6:	e004      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80016e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80016ec:	fab3 f383 	clz	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d106      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fb20 	bl	8000d44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fb04 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x214>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2101      	movs	r1, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff faf9 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	0e9b      	lsrs	r3, r3, #26
 800172a:	f003 021f 	and.w	r2, r3, #31
 800172e:	e01e      	b.n	800176e <HAL_ADC_ConfigChannel+0x252>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff faee 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800174e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001752:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001756:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800175e:	2320      	movs	r3, #32
 8001760:	e004      	b.n	800176c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001776:	2b00      	cmp	r3, #0
 8001778:	d105      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x26a>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0e9b      	lsrs	r3, r3, #26
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	e018      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x29c>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800179a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800179e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80017a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80017aa:	2320      	movs	r3, #32
 80017ac:	e004      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80017ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d106      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2200      	movs	r2, #0
 80017c2:	2101      	movs	r1, #1
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fabd 	bl	8000d44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2102      	movs	r1, #2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff faa1 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10a      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x2da>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2102      	movs	r1, #2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fa96 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	0e9b      	lsrs	r3, r3, #26
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	e01e      	b.n	8001834 <HAL_ADC_ConfigChannel+0x318>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2102      	movs	r1, #2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fa8b 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001814:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001818:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800181c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001824:	2320      	movs	r3, #32
 8001826:	e004      	b.n	8001832 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001828:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <HAL_ADC_ConfigChannel+0x330>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0e9b      	lsrs	r3, r3, #26
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	e014      	b.n	8001876 <HAL_ADC_ConfigChannel+0x35a>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800185a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800185c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001860:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001868:	2320      	movs	r3, #32
 800186a:	e004      	b.n	8001876 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800186c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001876:	429a      	cmp	r2, r3
 8001878:	d106      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	2102      	movs	r1, #2
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fa5e 	bl	8000d44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2103      	movs	r1, #3
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fa42 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10a      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2103      	movs	r1, #3
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fa37 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	0e9b      	lsrs	r3, r3, #26
 80018ae:	f003 021f 	and.w	r2, r3, #31
 80018b2:	e017      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x3c8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2103      	movs	r1, #3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fa2c 	bl	8000d18 <LL_ADC_GetOffsetChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80018cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018ce:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80018d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80018d6:	2320      	movs	r3, #32
 80018d8:	e003      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80018da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x3e0>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0e9b      	lsrs	r3, r3, #26
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	e011      	b.n	8001920 <HAL_ADC_ConfigChannel+0x404>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800190a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800190c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800190e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001914:	2320      	movs	r3, #32
 8001916:	e003      	b.n	8001920 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001920:	429a      	cmp	r2, r3
 8001922:	d106      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	2103      	movs	r1, #3
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fa09 	bl	8000d44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fb1e 	bl	8000f78 <LL_ADC_IsEnabled>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 8140 	bne.w	8001bc4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6819      	ldr	r1, [r3, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	461a      	mov	r2, r3
 8001952:	f7ff fa69 	bl	8000e28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	4a8f      	ldr	r2, [pc, #572]	@ (8001b98 <HAL_ADC_ConfigChannel+0x67c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	f040 8131 	bne.w	8001bc4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10b      	bne.n	800198a <HAL_ADC_ConfigChannel+0x46e>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	0e9b      	lsrs	r3, r3, #26
 8001978:	3301      	adds	r3, #1
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	2b09      	cmp	r3, #9
 8001980:	bf94      	ite	ls
 8001982:	2301      	movls	r3, #1
 8001984:	2300      	movhi	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	e019      	b.n	80019be <HAL_ADC_ConfigChannel+0x4a2>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800199a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800199c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80019a2:	2320      	movs	r3, #32
 80019a4:	e003      	b.n	80019ae <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80019a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3301      	adds	r3, #1
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	bf94      	ite	ls
 80019b8:	2301      	movls	r3, #1
 80019ba:	2300      	movhi	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d079      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d107      	bne.n	80019de <HAL_ADC_ConfigChannel+0x4c2>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	0e9b      	lsrs	r3, r3, #26
 80019d4:	3301      	adds	r3, #1
 80019d6:	069b      	lsls	r3, r3, #26
 80019d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019dc:	e015      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x4ee>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80019ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019ee:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80019f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80019f6:	2320      	movs	r3, #32
 80019f8:	e003      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80019fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	3301      	adds	r3, #1
 8001a04:	069b      	lsls	r3, r3, #26
 8001a06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x50e>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0e9b      	lsrs	r3, r3, #26
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	e017      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x53e>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001a42:	2320      	movs	r3, #32
 8001a44:	e003      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	ea42 0103 	orr.w	r1, r2, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10a      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x564>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0e9b      	lsrs	r3, r3, #26
 8001a70:	3301      	adds	r3, #1
 8001a72:	f003 021f 	and.w	r2, r3, #31
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	051b      	lsls	r3, r3, #20
 8001a7e:	e018      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x596>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a90:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001a98:	2320      	movs	r3, #32
 8001a9a:	e003      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f003 021f 	and.w	r2, r3, #31
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	e081      	b.n	8001bba <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d107      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x5b6>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0e9b      	lsrs	r3, r3, #26
 8001ac8:	3301      	adds	r3, #1
 8001aca:	069b      	lsls	r3, r3, #26
 8001acc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ad0:	e015      	b.n	8001afe <HAL_ADC_ConfigChannel+0x5e2>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e003      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	069b      	lsls	r3, r3, #26
 8001afa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x602>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0e9b      	lsrs	r3, r3, #26
 8001b10:	3301      	adds	r3, #1
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	e017      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x632>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	61bb      	str	r3, [r7, #24]
  return result;
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001b36:	2320      	movs	r3, #32
 8001b38:	e003      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	ea42 0103 	orr.w	r1, r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10d      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x65e>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0e9b      	lsrs	r3, r3, #26
 8001b64:	3301      	adds	r3, #1
 8001b66:	f003 021f 	and.w	r2, r3, #31
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	051b      	lsls	r3, r3, #20
 8001b74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b78:	e01e      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x69c>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	60fb      	str	r3, [r7, #12]
  return result;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d104      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001b92:	2320      	movs	r3, #32
 8001b94:	e006      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x688>
 8001b96:	bf00      	nop
 8001b98:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f003 021f 	and.w	r2, r3, #31
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	3b1e      	subs	r3, #30
 8001bb2:	051b      	lsls	r3, r3, #20
 8001bb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bb8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7ff f907 	bl	8000dd2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b44      	ldr	r3, [pc, #272]	@ (8001cdc <HAL_ADC_ConfigChannel+0x7c0>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d07a      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bd0:	4843      	ldr	r0, [pc, #268]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001bd2:	f7ff f86f 	bl	8000cb4 <LL_ADC_GetCommonPathInternalCh>
 8001bd6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a41      	ldr	r2, [pc, #260]	@ (8001ce4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d12c      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001be4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001be8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d126      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d004      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x6e8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a3b      	ldr	r2, [pc, #236]	@ (8001cec <HAL_ADC_ConfigChannel+0x7d0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d15d      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4834      	ldr	r0, [pc, #208]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c10:	f7ff f83d 	bl	8000c8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c14:	4b36      	ldr	r3, [pc, #216]	@ (8001cf0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	4a36      	ldr	r2, [pc, #216]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c2e:	e002      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f9      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c3c:	e040      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d118      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d112      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_ADC_ConfigChannel+0x74c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a22      	ldr	r2, [pc, #136]	@ (8001cec <HAL_ADC_ConfigChannel+0x7d0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d12d      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c70:	4619      	mov	r1, r3
 8001c72:	481b      	ldr	r0, [pc, #108]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c74:	f7ff f80b 	bl	8000c8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c78:	e024      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cfc <HAL_ADC_ConfigChannel+0x7e0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d120      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d11a      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a14      	ldr	r2, [pc, #80]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d115      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480e      	ldr	r0, [pc, #56]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ca6:	f7fe fff2 	bl	8000c8e <LL_ADC_SetCommonPathInternalCh>
 8001caa:	e00c      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb0:	f043 0220 	orr.w	r2, r3, #32
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001cbe:	e002      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cc0:	bf00      	nop
 8001cc2:	e000      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001cce:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	37d8      	adds	r7, #216	@ 0xd8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	80080000 	.word	0x80080000
 8001ce0:	50040300 	.word	0x50040300
 8001ce4:	c7520000 	.word	0xc7520000
 8001ce8:	50040000 	.word	0x50040000
 8001cec:	50040200 	.word	0x50040200
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	053e2d63 	.word	0x053e2d63
 8001cf8:	cb840000 	.word	0xcb840000
 8001cfc:	80000001 	.word	0x80000001

08001d00 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f97c 	bl	8001014 <LL_ADC_REG_IsConversionOngoing>
 8001d1c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f99d 	bl	8001062 <LL_ADC_INJ_IsConversionOngoing>
 8001d28:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d103      	bne.n	8001d38 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8098 	beq.w	8001e68 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d02a      	beq.n	8001d9c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7e5b      	ldrb	r3, [r3, #25]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d126      	bne.n	8001d9c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7e1b      	ldrb	r3, [r3, #24]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d122      	bne.n	8001d9c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001d5a:	e014      	b.n	8001d86 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	4a45      	ldr	r2, [pc, #276]	@ (8001e74 <ADC_ConversionStop+0x174>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d90d      	bls.n	8001d80 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d68:	f043 0210 	orr.w	r2, r3, #16
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e074      	b.n	8001e6a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d90:	2b40      	cmp	r3, #64	@ 0x40
 8001d92:	d1e3      	bne.n	8001d5c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2240      	movs	r2, #64	@ 0x40
 8001d9a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d014      	beq.n	8001dcc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f934 	bl	8001014 <LL_ADC_REG_IsConversionOngoing>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00c      	beq.n	8001dcc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f8f1 	bl	8000f9e <LL_ADC_IsDisableOngoing>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d104      	bne.n	8001dcc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f910 	bl	8000fec <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d014      	beq.n	8001dfc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f943 	bl	8001062 <LL_ADC_INJ_IsConversionOngoing>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f8d9 	bl	8000f9e <LL_ADC_IsDisableOngoing>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d104      	bne.n	8001dfc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f91f 	bl	800103a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d005      	beq.n	8001e0e <ADC_ConversionStop+0x10e>
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d105      	bne.n	8001e14 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001e08:	230c      	movs	r3, #12
 8001e0a:	617b      	str	r3, [r7, #20]
        break;
 8001e0c:	e005      	b.n	8001e1a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001e0e:	2308      	movs	r3, #8
 8001e10:	617b      	str	r3, [r7, #20]
        break;
 8001e12:	e002      	b.n	8001e1a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001e14:	2304      	movs	r3, #4
 8001e16:	617b      	str	r3, [r7, #20]
        break;
 8001e18:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001e1a:	f7fe fef5 	bl	8000c08 <HAL_GetTick>
 8001e1e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001e20:	e01b      	b.n	8001e5a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e22:	f7fe fef1 	bl	8000c08 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d914      	bls.n	8001e5a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e42:	f043 0210 	orr.w	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e007      	b.n	8001e6a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1dc      	bne.n	8001e22 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3720      	adds	r7, #32
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	a33fffff 	.word	0xa33fffff

08001e78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f875 	bl	8000f78 <LL_ADC_IsEnabled>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d169      	bne.n	8001f68 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	4b36      	ldr	r3, [pc, #216]	@ (8001f74 <ADC_Enable+0xfc>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00d      	beq.n	8001ebe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea6:	f043 0210 	orr.w	r2, r3, #16
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e055      	b.n	8001f6a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f830 	bl	8000f28 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ec8:	482b      	ldr	r0, [pc, #172]	@ (8001f78 <ADC_Enable+0x100>)
 8001eca:	f7fe fef3 	bl	8000cb4 <LL_ADC_GetCommonPathInternalCh>
 8001ece:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ed0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed8:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <ADC_Enable+0x104>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	4a28      	ldr	r2, [pc, #160]	@ (8001f80 <ADC_Enable+0x108>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ef2:	e002      	b.n	8001efa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f9      	bne.n	8001ef4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f00:	f7fe fe82 	bl	8000c08 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f06:	e028      	b.n	8001f5a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f833 	bl	8000f78 <LL_ADC_IsEnabled>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d104      	bne.n	8001f22 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f803 	bl	8000f28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f22:	f7fe fe71 	bl	8000c08 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d914      	bls.n	8001f5a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d00d      	beq.n	8001f5a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f42:	f043 0210 	orr.w	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e007      	b.n	8001f6a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d1cf      	bne.n	8001f08 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	8000003f 	.word	0x8000003f
 8001f78:	50040300 	.word	0x50040300
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	053e2d63 	.word	0x053e2d63

08001f84 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f804 	bl	8000f9e <LL_ADC_IsDisableOngoing>
 8001f96:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe ffeb 	bl	8000f78 <LL_ADC_IsEnabled>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d047      	beq.n	8002038 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d144      	bne.n	8002038 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030d 	and.w	r3, r3, #13
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10c      	bne.n	8001fd6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe ffc5 	bl	8000f50 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fce:	f7fe fe1b 	bl	8000c08 <HAL_GetTick>
 8001fd2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fd4:	e029      	b.n	800202a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fda:	f043 0210 	orr.w	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e023      	b.n	800203a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ff2:	f7fe fe09 	bl	8000c08 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d914      	bls.n	800202a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00d      	beq.n	800202a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	f043 0210 	orr.w	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e007      	b.n	800203a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1dc      	bne.n	8001ff2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <LL_ADC_IsEnabled>:
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <LL_ADC_IsEnabled+0x18>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <LL_ADC_IsEnabled+0x1a>
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_REG_IsConversionOngoing>:
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b04      	cmp	r3, #4
 800207a:	d101      	bne.n	8002080 <LL_ADC_REG_IsConversionOngoing+0x18>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b09f      	sub	sp, #124	@ 0x7c
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e093      	b.n	80021d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020b6:	2300      	movs	r3, #0
 80020b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80020ba:	2300      	movs	r3, #0
 80020bc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a47      	ldr	r2, [pc, #284]	@ (80021e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d102      	bne.n	80020ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020c8:	4b46      	ldr	r3, [pc, #280]	@ (80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	e001      	b.n	80020d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10b      	bne.n	80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020dc:	f043 0220 	orr.w	r2, r3, #32
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e072      	b.n	80021d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ffb8 	bl	8002068 <LL_ADC_REG_IsConversionOngoing>
 80020f8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ffb2 	bl	8002068 <LL_ADC_REG_IsConversionOngoing>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d154      	bne.n	80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800210a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800210c:	2b00      	cmp	r3, #0
 800210e:	d151      	bne.n	80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002110:	4b35      	ldr	r3, [pc, #212]	@ (80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002112:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d02c      	beq.n	8002176 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800211c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800212e:	035b      	lsls	r3, r3, #13
 8002130:	430b      	orrs	r3, r1
 8002132:	431a      	orrs	r2, r3
 8002134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002136:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002138:	4829      	ldr	r0, [pc, #164]	@ (80021e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800213a:	f7ff ff82 	bl	8002042 <LL_ADC_IsEnabled>
 800213e:	4604      	mov	r4, r0
 8002140:	4828      	ldr	r0, [pc, #160]	@ (80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002142:	f7ff ff7e 	bl	8002042 <LL_ADC_IsEnabled>
 8002146:	4603      	mov	r3, r0
 8002148:	431c      	orrs	r4, r3
 800214a:	4828      	ldr	r0, [pc, #160]	@ (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800214c:	f7ff ff79 	bl	8002042 <LL_ADC_IsEnabled>
 8002150:	4603      	mov	r3, r0
 8002152:	4323      	orrs	r3, r4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d137      	bne.n	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002160:	f023 030f 	bic.w	r3, r3, #15
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	6811      	ldr	r1, [r2, #0]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	6892      	ldr	r2, [r2, #8]
 800216c:	430a      	orrs	r2, r1
 800216e:	431a      	orrs	r2, r3
 8002170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002172:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002174:	e028      	b.n	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800217e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002180:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002182:	4817      	ldr	r0, [pc, #92]	@ (80021e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002184:	f7ff ff5d 	bl	8002042 <LL_ADC_IsEnabled>
 8002188:	4604      	mov	r4, r0
 800218a:	4816      	ldr	r0, [pc, #88]	@ (80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800218c:	f7ff ff59 	bl	8002042 <LL_ADC_IsEnabled>
 8002190:	4603      	mov	r3, r0
 8002192:	431c      	orrs	r4, r3
 8002194:	4815      	ldr	r0, [pc, #84]	@ (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002196:	f7ff ff54 	bl	8002042 <LL_ADC_IsEnabled>
 800219a:	4603      	mov	r3, r0
 800219c:	4323      	orrs	r3, r4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d112      	bne.n	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021aa:	f023 030f 	bic.w	r3, r3, #15
 80021ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80021b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021b2:	e009      	b.n	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b8:	f043 0220 	orr.w	r2, r3, #32
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80021c6:	e000      	b.n	80021ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80021d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	377c      	adds	r7, #124	@ 0x7c
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}
 80021de:	bf00      	nop
 80021e0:	50040000 	.word	0x50040000
 80021e4:	50040100 	.word	0x50040100
 80021e8:	50040300 	.word	0x50040300
 80021ec:	50040200 	.word	0x50040200

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	@ (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	@ (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	@ 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	@ 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002320:	d301      	bcc.n	8002326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002322:	2301      	movs	r3, #1
 8002324:	e00f      	b.n	8002346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002326:	4a0a      	ldr	r2, [pc, #40]	@ (8002350 <SysTick_Config+0x40>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232e:	210f      	movs	r1, #15
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	f7ff ff8e 	bl	8002254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002338:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <SysTick_Config+0x40>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233e:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <SysTick_Config+0x40>)
 8002340:	2207      	movs	r2, #7
 8002342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	e000e010 	.word	0xe000e010

08002354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff47 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800237c:	f7ff ff5c 	bl	8002238 <__NVIC_GetPriorityGrouping>
 8002380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff8e 	bl	80022a8 <NVIC_EncodePriority>
 800238c:	4602      	mov	r2, r0
 800238e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff5d 	bl	8002254 <__NVIC_SetPriority>
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ffb0 	bl	8002310 <SysTick_Config>
 80023b0:	4603      	mov	r3, r0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e014      	b.n	80023f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	791b      	ldrb	r3, [r3, #4]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fe fa9d 	bl	800091c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	795b      	ldrb	r3, [r3, #5]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_DAC_Start+0x16>
 8002410:	2302      	movs	r3, #2
 8002412:	e03b      	b.n	800248c <HAL_DAC_Start+0x8e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6819      	ldr	r1, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2201      	movs	r2, #1
 800242e:	409a      	lsls	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10f      	bne.n	800245e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002448:	2b04      	cmp	r3, #4
 800244a:	d118      	bne.n	800247e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	e00f      	b.n	800247e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002468:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800246c:	d107      	bne.n	800247e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0202 	orr.w	r2, r2, #2
 800247c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d105      	bne.n	80024c2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	3308      	adds	r3, #8
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	e004      	b.n	80024cc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	3314      	adds	r3, #20
 80024ca:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	461a      	mov	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b088      	sub	sp, #32
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	795b      	ldrb	r3, [r3, #5]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_DAC_ConfigChannel+0x1c>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e114      	b.n	8002728 <HAL_DAC_ConfigChannel+0x246>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2202      	movs	r2, #2
 8002508:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b04      	cmp	r3, #4
 8002510:	f040 8081 	bne.w	8002616 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002514:	f7fe fb78 	bl	8000c08 <HAL_GetTick>
 8002518:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d140      	bne.n	80025a2 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002520:	e018      	b.n	8002554 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002522:	f7fe fb71 	bl	8000c08 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d911      	bls.n	8002554 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002536:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f043 0208 	orr.w	r2, r3, #8
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2203      	movs	r2, #3
 800254e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0e9      	b.n	8002728 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1df      	bne.n	8002522 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002562:	2001      	movs	r0, #1
 8002564:	f7fe fb5c 	bl	8000c20 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	6992      	ldr	r2, [r2, #24]
 8002570:	641a      	str	r2, [r3, #64]	@ 0x40
 8002572:	e023      	b.n	80025bc <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002574:	f7fe fb48 	bl	8000c08 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d90f      	bls.n	80025a2 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002588:	2b00      	cmp	r3, #0
 800258a:	da0a      	bge.n	80025a2 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f043 0208 	orr.w	r2, r3, #8
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2203      	movs	r2, #3
 800259c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0c2      	b.n	8002728 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	dbe3      	blt.n	8002574 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7fe fb37 	bl	8000c20 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	6992      	ldr	r2, [r2, #24]
 80025ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	ea02 0103 	and.w	r1, r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	409a      	lsls	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	21ff      	movs	r1, #255	@ 0xff
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	ea02 0103 	and.w	r1, r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6a1a      	ldr	r2, [r3, #32]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	409a      	lsls	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d11d      	bne.n	800265a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002624:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	221f      	movs	r2, #31
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002660:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2207      	movs	r2, #7
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	431a      	orrs	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6819      	ldr	r1, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	400a      	ands	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	22c0      	movs	r2, #192	@ 0xc0
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43da      	mvns	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	400a      	ands	r2, r1
 8002718:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273e:	e17f      	b.n	8002a40 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2101      	movs	r1, #1
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	fa01 f303 	lsl.w	r3, r1, r3
 800274c:	4013      	ands	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8171 	beq.w	8002a3a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d005      	beq.n	8002770 <HAL_GPIO_Init+0x40>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d130      	bne.n	80027d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027a6:	2201      	movs	r2, #1
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 0201 	and.w	r2, r3, #1
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d118      	bne.n	8002810 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027e4:	2201      	movs	r2, #1
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	f003 0201 	and.w	r2, r3, #1
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b03      	cmp	r3, #3
 800281a:	d017      	beq.n	800284c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2203      	movs	r2, #3
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d123      	bne.n	80028a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	08da      	lsrs	r2, r3, #3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3208      	adds	r2, #8
 8002860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	220f      	movs	r2, #15
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	08da      	lsrs	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3208      	adds	r2, #8
 800289a:	6939      	ldr	r1, [r7, #16]
 800289c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2203      	movs	r2, #3
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0203 	and.w	r2, r3, #3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80ac 	beq.w	8002a3a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a60 <HAL_GPIO_Init+0x330>)
 80028e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a60 <HAL_GPIO_Init+0x330>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80028ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002a60 <HAL_GPIO_Init+0x330>)
 80028f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002a64 <HAL_GPIO_Init+0x334>)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002924:	d025      	beq.n	8002972 <HAL_GPIO_Init+0x242>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4f      	ldr	r2, [pc, #316]	@ (8002a68 <HAL_GPIO_Init+0x338>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <HAL_GPIO_Init+0x23e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4e      	ldr	r2, [pc, #312]	@ (8002a6c <HAL_GPIO_Init+0x33c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x23a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4d      	ldr	r2, [pc, #308]	@ (8002a70 <HAL_GPIO_Init+0x340>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x236>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4c      	ldr	r2, [pc, #304]	@ (8002a74 <HAL_GPIO_Init+0x344>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x232>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4b      	ldr	r2, [pc, #300]	@ (8002a78 <HAL_GPIO_Init+0x348>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x22e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4a      	ldr	r2, [pc, #296]	@ (8002a7c <HAL_GPIO_Init+0x34c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x22a>
 8002956:	2306      	movs	r3, #6
 8002958:	e00c      	b.n	8002974 <HAL_GPIO_Init+0x244>
 800295a:	2307      	movs	r3, #7
 800295c:	e00a      	b.n	8002974 <HAL_GPIO_Init+0x244>
 800295e:	2305      	movs	r3, #5
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x244>
 8002962:	2304      	movs	r3, #4
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x244>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x244>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x244>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x244>
 8002972:	2300      	movs	r3, #0
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	f002 0203 	and.w	r2, r2, #3
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002984:	4937      	ldr	r1, [pc, #220]	@ (8002a64 <HAL_GPIO_Init+0x334>)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002992:	4b3b      	ldr	r3, [pc, #236]	@ (8002a80 <HAL_GPIO_Init+0x350>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029b6:	4a32      	ldr	r2, [pc, #200]	@ (8002a80 <HAL_GPIO_Init+0x350>)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029bc:	4b30      	ldr	r3, [pc, #192]	@ (8002a80 <HAL_GPIO_Init+0x350>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029e0:	4a27      	ldr	r2, [pc, #156]	@ (8002a80 <HAL_GPIO_Init+0x350>)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029e6:	4b26      	ldr	r3, [pc, #152]	@ (8002a80 <HAL_GPIO_Init+0x350>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a80 <HAL_GPIO_Init+0x350>)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a10:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_GPIO_Init+0x350>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a34:	4a12      	ldr	r2, [pc, #72]	@ (8002a80 <HAL_GPIO_Init+0x350>)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f47f ae78 	bne.w	8002740 <HAL_GPIO_Init+0x10>
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40010000 	.word	0x40010000
 8002a68:	48000400 	.word	0x48000400
 8002a6c:	48000800 	.word	0x48000800
 8002a70:	48000c00 	.word	0x48000c00
 8002a74:	48001000 	.word	0x48001000
 8002a78:	48001400 	.word	0x48001400
 8002a7c:	48001800 	.word	0x48001800
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a88:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40007000 	.word	0x40007000

08002aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aae:	d130      	bne.n	8002b12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ab0:	4b23      	ldr	r3, [pc, #140]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002abc:	d038      	beq.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002abe:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002acc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ace:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2232      	movs	r2, #50	@ 0x32
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0c9b      	lsrs	r3, r3, #18
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae4:	e002      	b.n	8002aec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aec:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af8:	d102      	bne.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f2      	bne.n	8002ae6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b00:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0c:	d110      	bne.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e00f      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b12:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1e:	d007      	beq.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b20:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b28:	4a05      	ldr	r2, [pc, #20]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40007000 	.word	0x40007000
 8002b44:	20000000 	.word	0x20000000
 8002b48:	431bde83 	.word	0x431bde83

08002b4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e3ca      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b5e:	4b97      	ldr	r3, [pc, #604]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b68:	4b94      	ldr	r3, [pc, #592]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80e4 	beq.w	8002d48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_RCC_OscConfig+0x4a>
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	f040 808b 	bne.w	8002ca4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	f040 8087 	bne.w	8002ca4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b96:	4b89      	ldr	r3, [pc, #548]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_RCC_OscConfig+0x62>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e3a2      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1a      	ldr	r2, [r3, #32]
 8002bb2:	4b82      	ldr	r3, [pc, #520]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x7c>
 8002bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bc6:	e005      	b.n	8002bd4 <HAL_RCC_OscConfig+0x88>
 8002bc8:	4b7c      	ldr	r3, [pc, #496]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d223      	bcs.n	8002c20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fd55 	bl	800368c <RCC_SetFlashLatencyFromMSIRange>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e383      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bec:	4b73      	ldr	r3, [pc, #460]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a72      	ldr	r2, [pc, #456]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bf2:	f043 0308 	orr.w	r3, r3, #8
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b70      	ldr	r3, [pc, #448]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	496d      	ldr	r1, [pc, #436]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c0a:	4b6c      	ldr	r3, [pc, #432]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	4968      	ldr	r1, [pc, #416]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
 8002c1e:	e025      	b.n	8002c6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c20:	4b66      	ldr	r3, [pc, #408]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a65      	ldr	r2, [pc, #404]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c26:	f043 0308 	orr.w	r3, r3, #8
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b63      	ldr	r3, [pc, #396]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4960      	ldr	r1, [pc, #384]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	495b      	ldr	r1, [pc, #364]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fd15 	bl	800368c <RCC_SetFlashLatencyFromMSIRange>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e343      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c6c:	f000 fc4a 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b52      	ldr	r3, [pc, #328]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	4950      	ldr	r1, [pc, #320]	@ (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
 8002c88:	4a4e      	ldr	r2, [pc, #312]	@ (8002dc4 <HAL_RCC_OscConfig+0x278>)
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8002dc8 <HAL_RCC_OscConfig+0x27c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd ff69 	bl	8000b68 <HAL_InitTick>
 8002c96:	4603      	mov	r3, r0
 8002c98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d052      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	e327      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d032      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cac:	4b43      	ldr	r3, [pc, #268]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a42      	ldr	r2, [pc, #264]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cb8:	f7fd ffa6 	bl	8000c08 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc0:	f7fd ffa2 	bl	8000c08 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e310      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cde:	4b37      	ldr	r3, [pc, #220]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a36      	ldr	r2, [pc, #216]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002ce4:	f043 0308 	orr.w	r3, r3, #8
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b34      	ldr	r3, [pc, #208]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4931      	ldr	r1, [pc, #196]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	492c      	ldr	r1, [pc, #176]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
 8002d10:	e01a      	b.n	8002d48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d12:	4b2a      	ldr	r3, [pc, #168]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a29      	ldr	r2, [pc, #164]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d1e:	f7fd ff73 	bl	8000c08 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d26:	f7fd ff6f 	bl	8000c08 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e2dd      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d38:	4b20      	ldr	r3, [pc, #128]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x1da>
 8002d44:	e000      	b.n	8002d48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d074      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d005      	beq.n	8002d66 <HAL_RCC_OscConfig+0x21a>
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d10e      	bne.n	8002d7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d10b      	bne.n	8002d7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d66:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d064      	beq.n	8002e3c <HAL_RCC_OscConfig+0x2f0>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d160      	bne.n	8002e3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e2ba      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x24a>
 8002d88:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	e026      	b.n	8002de4 <HAL_RCC_OscConfig+0x298>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d9e:	d115      	bne.n	8002dcc <HAL_RCC_OscConfig+0x280>
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a05      	ldr	r2, [pc, #20]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002da6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b03      	ldr	r3, [pc, #12]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a02      	ldr	r2, [pc, #8]	@ (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e014      	b.n	8002de4 <HAL_RCC_OscConfig+0x298>
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	08004b78 	.word	0x08004b78
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000004 	.word	0x20000004
 8002dcc:	4ba0      	ldr	r3, [pc, #640]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a9f      	ldr	r2, [pc, #636]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	4b9d      	ldr	r3, [pc, #628]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a9c      	ldr	r2, [pc, #624]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d013      	beq.n	8002e14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fd ff0c 	bl	8000c08 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fd ff08 	bl	8000c08 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	@ 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e276      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e06:	4b92      	ldr	r3, [pc, #584]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2a8>
 8002e12:	e014      	b.n	8002e3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fd fef8 	bl	8000c08 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fd fef4 	bl	8000c08 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	@ 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e262      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e2e:	4b88      	ldr	r3, [pc, #544]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2d0>
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d060      	beq.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_OscConfig+0x310>
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d119      	bne.n	8002e8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d116      	bne.n	8002e8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e5c:	4b7c      	ldr	r3, [pc, #496]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_OscConfig+0x328>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e23f      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e74:	4b76      	ldr	r3, [pc, #472]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	4973      	ldr	r1, [pc, #460]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e88:	e040      	b.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d023      	beq.n	8002eda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e92:	4b6f      	ldr	r3, [pc, #444]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6e      	ldr	r2, [pc, #440]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7fd feb3 	bl	8000c08 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea6:	f7fd feaf 	bl	8000c08 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e21d      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb8:	4b65      	ldr	r3, [pc, #404]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b62      	ldr	r3, [pc, #392]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	495f      	ldr	r1, [pc, #380]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e018      	b.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eda:	4b5d      	ldr	r3, [pc, #372]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a5c      	ldr	r2, [pc, #368]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fd fe8f 	bl	8000c08 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fd fe8b 	bl	8000c08 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1f9      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f00:	4b53      	ldr	r3, [pc, #332]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d03c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01c      	beq.n	8002f5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f20:	4b4b      	ldr	r3, [pc, #300]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f26:	4a4a      	ldr	r2, [pc, #296]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fd fe6a 	bl	8000c08 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fd fe66 	bl	8000c08 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e1d4      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f4a:	4b41      	ldr	r3, [pc, #260]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ef      	beq.n	8002f38 <HAL_RCC_OscConfig+0x3ec>
 8002f58:	e01b      	b.n	8002f92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f60:	4a3b      	ldr	r2, [pc, #236]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7fd fe4d 	bl	8000c08 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f72:	f7fd fe49 	bl	8000c08 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1b7      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f84:	4b32      	ldr	r3, [pc, #200]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ef      	bne.n	8002f72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80a6 	beq.w	80030ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10d      	bne.n	8002fcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb4:	4a26      	ldr	r2, [pc, #152]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fbc:	4b24      	ldr	r3, [pc, #144]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fcc:	4b21      	ldr	r3, [pc, #132]	@ (8003054 <HAL_RCC_OscConfig+0x508>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d118      	bne.n	800300a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <HAL_RCC_OscConfig+0x508>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003054 <HAL_RCC_OscConfig+0x508>)
 8002fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe4:	f7fd fe10 	bl	8000c08 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fec:	f7fd fe0c 	bl	8000c08 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e17a      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffe:	4b15      	ldr	r3, [pc, #84]	@ (8003054 <HAL_RCC_OscConfig+0x508>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <HAL_RCC_OscConfig+0x4d8>
 8003012:	4b0f      	ldr	r3, [pc, #60]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003018:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003022:	e029      	b.n	8003078 <HAL_RCC_OscConfig+0x52c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b05      	cmp	r3, #5
 800302a:	d115      	bne.n	8003058 <HAL_RCC_OscConfig+0x50c>
 800302c:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003032:	4a07      	ldr	r2, [pc, #28]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800303c:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003042:	4a03      	ldr	r2, [pc, #12]	@ (8003050 <HAL_RCC_OscConfig+0x504>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800304c:	e014      	b.n	8003078 <HAL_RCC_OscConfig+0x52c>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000
 8003058:	4b9c      	ldr	r3, [pc, #624]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305e:	4a9b      	ldr	r2, [pc, #620]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003068:	4b98      	ldr	r3, [pc, #608]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306e:	4a97      	ldr	r2, [pc, #604]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d016      	beq.n	80030ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fd fdc2 	bl	8000c08 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003086:	e00a      	b.n	800309e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003088:	f7fd fdbe 	bl	8000c08 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e12a      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309e:	4b8b      	ldr	r3, [pc, #556]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ed      	beq.n	8003088 <HAL_RCC_OscConfig+0x53c>
 80030ac:	e015      	b.n	80030da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fd fdab 	bl	8000c08 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fd fda7 	bl	8000c08 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e113      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030cc:	4b7f      	ldr	r3, [pc, #508]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ed      	bne.n	80030b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030da:	7ffb      	ldrb	r3, [r7, #31]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4b7a      	ldr	r3, [pc, #488]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e4:	4a79      	ldr	r2, [pc, #484]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80fe 	beq.w	80032f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	f040 80d0 	bne.w	80032a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003100:	4b72      	ldr	r3, [pc, #456]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003110:	429a      	cmp	r2, r3
 8003112:	d130      	bne.n	8003176 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	3b01      	subs	r3, #1
 8003120:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d127      	bne.n	8003176 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003130:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d11f      	bne.n	8003176 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003140:	2a07      	cmp	r2, #7
 8003142:	bf14      	ite	ne
 8003144:	2201      	movne	r2, #1
 8003146:	2200      	moveq	r2, #0
 8003148:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800314a:	4293      	cmp	r3, r2
 800314c:	d113      	bne.n	8003176 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003158:	085b      	lsrs	r3, r3, #1
 800315a:	3b01      	subs	r3, #1
 800315c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d109      	bne.n	8003176 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	3b01      	subs	r3, #1
 8003170:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d06e      	beq.n	8003254 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b0c      	cmp	r3, #12
 800317a:	d069      	beq.n	8003250 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800317c:	4b53      	ldr	r3, [pc, #332]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003188:	4b50      	ldr	r3, [pc, #320]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0ad      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003198:	4b4c      	ldr	r3, [pc, #304]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a4b      	ldr	r2, [pc, #300]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 800319e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031a4:	f7fd fd30 	bl	8000c08 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fd fd2c 	bl	8000c08 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e09a      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031be:	4b43      	ldr	r3, [pc, #268]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ca:	4b40      	ldr	r3, [pc, #256]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	4b40      	ldr	r3, [pc, #256]	@ (80032d0 <HAL_RCC_OscConfig+0x784>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80031da:	3a01      	subs	r2, #1
 80031dc:	0112      	lsls	r2, r2, #4
 80031de:	4311      	orrs	r1, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031e4:	0212      	lsls	r2, r2, #8
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031ec:	0852      	lsrs	r2, r2, #1
 80031ee:	3a01      	subs	r2, #1
 80031f0:	0552      	lsls	r2, r2, #21
 80031f2:	4311      	orrs	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80031f8:	0852      	lsrs	r2, r2, #1
 80031fa:	3a01      	subs	r2, #1
 80031fc:	0652      	lsls	r2, r2, #25
 80031fe:	4311      	orrs	r1, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003204:	0912      	lsrs	r2, r2, #4
 8003206:	0452      	lsls	r2, r2, #17
 8003208:	430a      	orrs	r2, r1
 800320a:	4930      	ldr	r1, [pc, #192]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 800320c:	4313      	orrs	r3, r2
 800320e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003210:	4b2e      	ldr	r3, [pc, #184]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2d      	ldr	r2, [pc, #180]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800321a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800321c:	4b2b      	ldr	r3, [pc, #172]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a2a      	ldr	r2, [pc, #168]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003222:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003226:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003228:	f7fd fcee 	bl	8000c08 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003230:	f7fd fcea 	bl	8000c08 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e058      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003242:	4b22      	ldr	r3, [pc, #136]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800324e:	e050      	b.n	80032f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e04f      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003254:	4b1d      	ldr	r3, [pc, #116]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d148      	bne.n	80032f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003260:	4b1a      	ldr	r3, [pc, #104]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800326a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800326c:	4b17      	ldr	r3, [pc, #92]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4a16      	ldr	r2, [pc, #88]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003272:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003276:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003278:	f7fd fcc6 	bl	8000c08 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fd fcc2 	bl	8000c08 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e030      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003292:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x734>
 800329e:	e028      	b.n	80032f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d023      	beq.n	80032ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a08      	ldr	r2, [pc, #32]	@ (80032cc <HAL_RCC_OscConfig+0x780>)
 80032ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fd fca9 	bl	8000c08 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b8:	e00c      	b.n	80032d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fd fca5 	bl	8000c08 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d905      	bls.n	80032d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e013      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
 80032cc:	40021000 	.word	0x40021000
 80032d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <HAL_RCC_OscConfig+0x7b0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ec      	bne.n	80032ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80032e0:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_RCC_OscConfig+0x7b0>)
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	4905      	ldr	r1, [pc, #20]	@ (80032fc <HAL_RCC_OscConfig+0x7b0>)
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_RCC_OscConfig+0x7b4>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	60cb      	str	r3, [r1, #12]
 80032ec:	e001      	b.n	80032f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	feeefffc 	.word	0xfeeefffc

08003304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0e7      	b.n	80034e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b75      	ldr	r3, [pc, #468]	@ (80034f0 <HAL_RCC_ClockConfig+0x1ec>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d910      	bls.n	8003348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b72      	ldr	r3, [pc, #456]	@ (80034f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 0207 	bic.w	r2, r3, #7
 800332e:	4970      	ldr	r1, [pc, #448]	@ (80034f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b6e      	ldr	r3, [pc, #440]	@ (80034f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0cf      	b.n	80034e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d010      	beq.n	8003376 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	4b66      	ldr	r3, [pc, #408]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003360:	429a      	cmp	r2, r3
 8003362:	d908      	bls.n	8003376 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003364:	4b63      	ldr	r3, [pc, #396]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4960      	ldr	r1, [pc, #384]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d04c      	beq.n	800341c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338a:	4b5a      	ldr	r3, [pc, #360]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d121      	bne.n	80033da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0a6      	b.n	80034e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a2:	4b54      	ldr	r3, [pc, #336]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d115      	bne.n	80033da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e09a      	b.n	80034e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ba:	4b4e      	ldr	r3, [pc, #312]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e08e      	b.n	80034e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ca:	4b4a      	ldr	r3, [pc, #296]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e086      	b.n	80034e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4b46      	ldr	r3, [pc, #280]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4943      	ldr	r1, [pc, #268]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ec:	f7fd fc0c 	bl	8000c08 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	e00a      	b.n	800340a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f4:	f7fd fc08 	bl	8000c08 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e06e      	b.n	80034e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	4b3a      	ldr	r3, [pc, #232]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 020c 	and.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	429a      	cmp	r2, r3
 800341a:	d1eb      	bne.n	80033f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4b31      	ldr	r3, [pc, #196]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003434:	429a      	cmp	r2, r3
 8003436:	d208      	bcs.n	800344a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b2e      	ldr	r3, [pc, #184]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	492b      	ldr	r1, [pc, #172]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800344a:	4b29      	ldr	r3, [pc, #164]	@ (80034f0 <HAL_RCC_ClockConfig+0x1ec>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d210      	bcs.n	800347a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003458:	4b25      	ldr	r3, [pc, #148]	@ (80034f0 <HAL_RCC_ClockConfig+0x1ec>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 0207 	bic.w	r2, r3, #7
 8003460:	4923      	ldr	r1, [pc, #140]	@ (80034f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003468:	4b21      	ldr	r3, [pc, #132]	@ (80034f0 <HAL_RCC_ClockConfig+0x1ec>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d001      	beq.n	800347a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e036      	b.n	80034e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003486:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	4918      	ldr	r1, [pc, #96]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003494:	4313      	orrs	r3, r2
 8003496:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034a4:	4b13      	ldr	r3, [pc, #76]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4910      	ldr	r1, [pc, #64]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034b8:	f000 f824 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b0d      	ldr	r3, [pc, #52]	@ (80034f4 <HAL_RCC_ClockConfig+0x1f0>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	490b      	ldr	r1, [pc, #44]	@ (80034f8 <HAL_RCC_ClockConfig+0x1f4>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
 80034d4:	4a09      	ldr	r2, [pc, #36]	@ (80034fc <HAL_RCC_ClockConfig+0x1f8>)
 80034d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034d8:	4b09      	ldr	r3, [pc, #36]	@ (8003500 <HAL_RCC_ClockConfig+0x1fc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fb43 	bl	8000b68 <HAL_InitTick>
 80034e2:	4603      	mov	r3, r0
 80034e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80034e6:	7afb      	ldrb	r3, [r7, #11]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40022000 	.word	0x40022000
 80034f4:	40021000 	.word	0x40021000
 80034f8:	08004b78 	.word	0x08004b78
 80034fc:	20000000 	.word	0x20000000
 8003500:	20000004 	.word	0x20000004

08003504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	@ 0x24
 8003508:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003512:	4b3e      	ldr	r3, [pc, #248]	@ (800360c <HAL_RCC_GetSysClockFreq+0x108>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800351c:	4b3b      	ldr	r3, [pc, #236]	@ (800360c <HAL_RCC_GetSysClockFreq+0x108>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x34>
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d121      	bne.n	8003576 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d11e      	bne.n	8003576 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003538:	4b34      	ldr	r3, [pc, #208]	@ (800360c <HAL_RCC_GetSysClockFreq+0x108>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d107      	bne.n	8003554 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003544:	4b31      	ldr	r3, [pc, #196]	@ (800360c <HAL_RCC_GetSysClockFreq+0x108>)
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	e005      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003554:	4b2d      	ldr	r3, [pc, #180]	@ (800360c <HAL_RCC_GetSysClockFreq+0x108>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003560:	4a2b      	ldr	r2, [pc, #172]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003568:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10d      	bne.n	800358c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003574:	e00a      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b04      	cmp	r3, #4
 800357a:	d102      	bne.n	8003582 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800357c:	4b25      	ldr	r3, [pc, #148]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x110>)
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	e004      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2b08      	cmp	r3, #8
 8003586:	d101      	bne.n	800358c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003588:	4b23      	ldr	r3, [pc, #140]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x114>)
 800358a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b0c      	cmp	r3, #12
 8003590:	d134      	bne.n	80035fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003592:	4b1e      	ldr	r3, [pc, #120]	@ (800360c <HAL_RCC_GetSysClockFreq+0x108>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0xa6>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d003      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0xac>
 80035a8:	e005      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x110>)
 80035ac:	617b      	str	r3, [r7, #20]
      break;
 80035ae:	e005      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035b0:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x114>)
 80035b2:	617b      	str	r3, [r7, #20]
      break;
 80035b4:	e002      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	617b      	str	r3, [r7, #20]
      break;
 80035ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035bc:	4b13      	ldr	r3, [pc, #76]	@ (800360c <HAL_RCC_GetSysClockFreq+0x108>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	3301      	adds	r3, #1
 80035c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035ca:	4b10      	ldr	r3, [pc, #64]	@ (800360c <HAL_RCC_GetSysClockFreq+0x108>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	fb03 f202 	mul.w	r2, r3, r2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035e2:	4b0a      	ldr	r3, [pc, #40]	@ (800360c <HAL_RCC_GetSysClockFreq+0x108>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	0e5b      	lsrs	r3, r3, #25
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	3301      	adds	r3, #1
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035fc:	69bb      	ldr	r3, [r7, #24]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	@ 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	08004b90 	.word	0x08004b90
 8003614:	00f42400 	.word	0x00f42400
 8003618:	007a1200 	.word	0x007a1200

0800361c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003620:	4b03      	ldr	r3, [pc, #12]	@ (8003630 <HAL_RCC_GetHCLKFreq+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000000 	.word	0x20000000

08003634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003638:	f7ff fff0 	bl	800361c <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4904      	ldr	r1, [pc, #16]	@ (800365c <HAL_RCC_GetPCLK1Freq+0x28>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021000 	.word	0x40021000
 800365c:	08004b88 	.word	0x08004b88

08003660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003664:	f7ff ffda 	bl	800361c <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	0adb      	lsrs	r3, r3, #11
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4904      	ldr	r1, [pc, #16]	@ (8003688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	08004b88 	.word	0x08004b88

0800368c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003698:	4b2a      	ldr	r3, [pc, #168]	@ (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036a4:	f7ff f9ee 	bl	8002a84 <HAL_PWREx_GetVoltageRange>
 80036a8:	6178      	str	r0, [r7, #20]
 80036aa:	e014      	b.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ac:	4b25      	ldr	r3, [pc, #148]	@ (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b0:	4a24      	ldr	r2, [pc, #144]	@ (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036b8:	4b22      	ldr	r3, [pc, #136]	@ (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036c4:	f7ff f9de 	bl	8002a84 <HAL_PWREx_GetVoltageRange>
 80036c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036dc:	d10b      	bne.n	80036f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b80      	cmp	r3, #128	@ 0x80
 80036e2:	d919      	bls.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80036e8:	d902      	bls.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ea:	2302      	movs	r3, #2
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	e013      	b.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036f0:	2301      	movs	r3, #1
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	e010      	b.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b80      	cmp	r3, #128	@ 0x80
 80036fa:	d902      	bls.n	8003702 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036fc:	2303      	movs	r3, #3
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	e00a      	b.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b80      	cmp	r3, #128	@ 0x80
 8003706:	d102      	bne.n	800370e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003708:	2302      	movs	r3, #2
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	e004      	b.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b70      	cmp	r3, #112	@ 0x70
 8003712:	d101      	bne.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003714:	2301      	movs	r3, #1
 8003716:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003718:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 0207 	bic.w	r2, r3, #7
 8003720:	4909      	ldr	r1, [pc, #36]	@ (8003748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003728:	4b07      	ldr	r3, [pc, #28]	@ (8003748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	429a      	cmp	r2, r3
 8003734:	d001      	beq.n	800373a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	40022000 	.word	0x40022000

0800374c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003754:	2300      	movs	r3, #0
 8003756:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003758:	2300      	movs	r3, #0
 800375a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003764:	2b00      	cmp	r3, #0
 8003766:	d041      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800376c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003770:	d02a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003772:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003776:	d824      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003778:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800377c:	d008      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800377e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003782:	d81e      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800378c:	d010      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800378e:	e018      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003790:	4b86      	ldr	r3, [pc, #536]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a85      	ldr	r2, [pc, #532]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800379c:	e015      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fabb 	bl	8003d20 <RCCEx_PLLSAI1_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037ae:	e00c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3320      	adds	r3, #32
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fba6 	bl	8003f08 <RCCEx_PLLSAI2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	74fb      	strb	r3, [r7, #19]
      break;
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037d0:	4b76      	ldr	r3, [pc, #472]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037de:	4973      	ldr	r1, [pc, #460]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037e6:	e001      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d041      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003800:	d02a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003802:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003806:	d824      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003808:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800380c:	d008      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800380e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003812:	d81e      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800381c:	d010      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800381e:	e018      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003820:	4b62      	ldr	r3, [pc, #392]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a61      	ldr	r2, [pc, #388]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800382a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800382c:	e015      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fa73 	bl	8003d20 <RCCEx_PLLSAI1_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800383e:	e00c      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3320      	adds	r3, #32
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb5e 	bl	8003f08 <RCCEx_PLLSAI2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003850:	e003      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	74fb      	strb	r3, [r7, #19]
      break;
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003860:	4b52      	ldr	r3, [pc, #328]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003866:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800386e:	494f      	ldr	r1, [pc, #316]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003876:	e001      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a0 	beq.w	80039ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800388e:	4b47      	ldr	r3, [pc, #284]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	4b41      	ldr	r3, [pc, #260]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	4a40      	ldr	r2, [pc, #256]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b0:	4b3e      	ldr	r3, [pc, #248]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038bc:	2301      	movs	r3, #1
 80038be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c0:	4b3b      	ldr	r3, [pc, #236]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3a      	ldr	r2, [pc, #232]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038cc:	f7fd f99c 	bl	8000c08 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038d2:	e009      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d4:	f7fd f998 	bl	8000c08 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d902      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	74fb      	strb	r3, [r7, #19]
        break;
 80038e6:	e005      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038e8:	4b31      	ldr	r3, [pc, #196]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ef      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d15c      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038fa:	4b2c      	ldr	r3, [pc, #176]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003900:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003904:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01f      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	429a      	cmp	r2, r3
 8003916:	d019      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003918:	4b24      	ldr	r3, [pc, #144]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003922:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003924:	4b21      	ldr	r3, [pc, #132]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392a:	4a20      	ldr	r2, [pc, #128]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003934:	4b1d      	ldr	r3, [pc, #116]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800393c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003944:	4a19      	ldr	r2, [pc, #100]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fd f957 	bl	8000c08 <HAL_GetTick>
 800395a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800395c:	e00b      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fd f953 	bl	8000c08 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d902      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	74fb      	strb	r3, [r7, #19]
            break;
 8003974:	e006      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003976:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ec      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800398a:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003990:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800399a:	4904      	ldr	r1, [pc, #16]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80039a2:	e009      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
 80039a8:	e006      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b8:	7c7b      	ldrb	r3, [r7, #17]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d105      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039be:	4b9e      	ldr	r3, [pc, #632]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	4a9d      	ldr	r2, [pc, #628]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d6:	4b98      	ldr	r3, [pc, #608]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039dc:	f023 0203 	bic.w	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	4994      	ldr	r1, [pc, #592]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fe:	f023 020c 	bic.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a06:	498c      	ldr	r1, [pc, #560]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a1a:	4b87      	ldr	r3, [pc, #540]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	4983      	ldr	r1, [pc, #524]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4a:	497b      	ldr	r1, [pc, #492]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a5e:	4b76      	ldr	r3, [pc, #472]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a6c:	4972      	ldr	r1, [pc, #456]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a80:	4b6d      	ldr	r3, [pc, #436]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8e:	496a      	ldr	r1, [pc, #424]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aa2:	4b65      	ldr	r3, [pc, #404]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab0:	4961      	ldr	r1, [pc, #388]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ac4:	4b5c      	ldr	r3, [pc, #368]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad2:	4959      	ldr	r1, [pc, #356]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ae6:	4b54      	ldr	r3, [pc, #336]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af4:	4950      	ldr	r1, [pc, #320]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b08:	4b4b      	ldr	r3, [pc, #300]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b16:	4948      	ldr	r1, [pc, #288]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b2a:	4b43      	ldr	r3, [pc, #268]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	493f      	ldr	r1, [pc, #252]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d028      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b5a:	4937      	ldr	r1, [pc, #220]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b6c:	4b32      	ldr	r3, [pc, #200]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a31      	ldr	r2, [pc, #196]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b76:	60d3      	str	r3, [r2, #12]
 8003b78:	e011      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f8c8 	bl	8003d20 <RCCEx_PLLSAI1_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b9a:	7cfb      	ldrb	r3, [r7, #19]
 8003b9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d028      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003baa:	4b23      	ldr	r3, [pc, #140]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb8:	491f      	ldr	r1, [pc, #124]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bc8:	d106      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bca:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	4a1a      	ldr	r2, [pc, #104]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bd4:	60d3      	str	r3, [r2, #12]
 8003bd6:	e011      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bdc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2101      	movs	r1, #1
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f899 	bl	8003d20 <RCCEx_PLLSAI1_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d02b      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c08:	4b0b      	ldr	r3, [pc, #44]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c16:	4908      	ldr	r1, [pc, #32]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c26:	d109      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c28:	4b03      	ldr	r3, [pc, #12]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a02      	ldr	r2, [pc, #8]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c32:	60d3      	str	r3, [r2, #12]
 8003c34:	e014      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 f867 	bl	8003d20 <RCCEx_PLLSAI1_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02f      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c72:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c7a:	4928      	ldr	r1, [pc, #160]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c8a:	d10d      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	2102      	movs	r1, #2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f844 	bl	8003d20 <RCCEx_PLLSAI1_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d014      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ca2:	7cfb      	ldrb	r3, [r7, #19]
 8003ca4:	74bb      	strb	r3, [r7, #18]
 8003ca6:	e011      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3320      	adds	r3, #32
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f925 	bl	8003f08 <RCCEx_PLLSAI2_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cc2:	7cfb      	ldrb	r3, [r7, #19]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cc8:	7cfb      	ldrb	r3, [r7, #19]
 8003cca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cd8:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ce6:	490d      	ldr	r1, [pc, #52]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cfa:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d0a:	4904      	ldr	r1, [pc, #16]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d12:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000

08003d20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d2e:	4b75      	ldr	r3, [pc, #468]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d018      	beq.n	8003d6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d3a:	4b72      	ldr	r3, [pc, #456]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0203 	and.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d10d      	bne.n	8003d66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d52:	4b6c      	ldr	r3, [pc, #432]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
       ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d047      	beq.n	8003df6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
 8003d6a:	e044      	b.n	8003df6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d018      	beq.n	8003da6 <RCCEx_PLLSAI1_Config+0x86>
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d825      	bhi.n	8003dc4 <RCCEx_PLLSAI1_Config+0xa4>
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d002      	beq.n	8003d82 <RCCEx_PLLSAI1_Config+0x62>
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d009      	beq.n	8003d94 <RCCEx_PLLSAI1_Config+0x74>
 8003d80:	e020      	b.n	8003dc4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d82:	4b60      	ldr	r3, [pc, #384]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d11d      	bne.n	8003dca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d92:	e01a      	b.n	8003dca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d94:	4b5b      	ldr	r3, [pc, #364]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d116      	bne.n	8003dce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e013      	b.n	8003dce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003da6:	4b57      	ldr	r3, [pc, #348]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003db2:	4b54      	ldr	r3, [pc, #336]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dc2:	e006      	b.n	8003dd2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e004      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e002      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dda:	4b4a      	ldr	r3, [pc, #296]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6819      	ldr	r1, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	430b      	orrs	r3, r1
 8003df0:	4944      	ldr	r1, [pc, #272]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d17d      	bne.n	8003ef8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003dfc:	4b41      	ldr	r3, [pc, #260]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a40      	ldr	r2, [pc, #256]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e08:	f7fc fefe 	bl	8000c08 <HAL_GetTick>
 8003e0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e0e:	e009      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e10:	f7fc fefa 	bl	8000c08 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	73fb      	strb	r3, [r7, #15]
        break;
 8003e22:	e005      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e24:	4b37      	ldr	r3, [pc, #220]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ef      	bne.n	8003e10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d160      	bne.n	8003ef8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d111      	bne.n	8003e60 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e3c:	4b31      	ldr	r3, [pc, #196]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6892      	ldr	r2, [r2, #8]
 8003e4c:	0211      	lsls	r1, r2, #8
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68d2      	ldr	r2, [r2, #12]
 8003e52:	0912      	lsrs	r2, r2, #4
 8003e54:	0452      	lsls	r2, r2, #17
 8003e56:	430a      	orrs	r2, r1
 8003e58:	492a      	ldr	r1, [pc, #168]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	610b      	str	r3, [r1, #16]
 8003e5e:	e027      	b.n	8003eb0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d112      	bne.n	8003e8c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e66:	4b27      	ldr	r3, [pc, #156]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003e6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6892      	ldr	r2, [r2, #8]
 8003e76:	0211      	lsls	r1, r2, #8
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6912      	ldr	r2, [r2, #16]
 8003e7c:	0852      	lsrs	r2, r2, #1
 8003e7e:	3a01      	subs	r2, #1
 8003e80:	0552      	lsls	r2, r2, #21
 8003e82:	430a      	orrs	r2, r1
 8003e84:	491f      	ldr	r1, [pc, #124]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	610b      	str	r3, [r1, #16]
 8003e8a:	e011      	b.n	8003eb0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6892      	ldr	r2, [r2, #8]
 8003e9c:	0211      	lsls	r1, r2, #8
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6952      	ldr	r2, [r2, #20]
 8003ea2:	0852      	lsrs	r2, r2, #1
 8003ea4:	3a01      	subs	r2, #1
 8003ea6:	0652      	lsls	r2, r2, #25
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	4916      	ldr	r1, [pc, #88]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003eb0:	4b14      	ldr	r3, [pc, #80]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a13      	ldr	r2, [pc, #76]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003eba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fc fea4 	bl	8000c08 <HAL_GetTick>
 8003ec0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ec2:	e009      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ec4:	f7fc fea0 	bl	8000c08 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d902      	bls.n	8003ed8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ed6:	e005      	b.n	8003ee4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0ef      	beq.n	8003ec4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003eea:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	4904      	ldr	r1, [pc, #16]	@ (8003f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000

08003f08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f16:	4b6a      	ldr	r3, [pc, #424]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d018      	beq.n	8003f54 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f22:	4b67      	ldr	r3, [pc, #412]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0203 	and.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d10d      	bne.n	8003f4e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
       ||
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f3a:	4b61      	ldr	r3, [pc, #388]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	091b      	lsrs	r3, r3, #4
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
       ||
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d047      	beq.n	8003fde <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
 8003f52:	e044      	b.n	8003fde <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d018      	beq.n	8003f8e <RCCEx_PLLSAI2_Config+0x86>
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d825      	bhi.n	8003fac <RCCEx_PLLSAI2_Config+0xa4>
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d002      	beq.n	8003f6a <RCCEx_PLLSAI2_Config+0x62>
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d009      	beq.n	8003f7c <RCCEx_PLLSAI2_Config+0x74>
 8003f68:	e020      	b.n	8003fac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f6a:	4b55      	ldr	r3, [pc, #340]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d11d      	bne.n	8003fb2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f7a:	e01a      	b.n	8003fb2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f7c:	4b50      	ldr	r3, [pc, #320]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d116      	bne.n	8003fb6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f8c:	e013      	b.n	8003fb6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f8e:	4b4c      	ldr	r3, [pc, #304]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10f      	bne.n	8003fba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f9a:	4b49      	ldr	r3, [pc, #292]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003faa:	e006      	b.n	8003fba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb0:	e004      	b.n	8003fbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e002      	b.n	8003fbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e000      	b.n	8003fbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10d      	bne.n	8003fde <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fc2:	4b3f      	ldr	r3, [pc, #252]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6819      	ldr	r1, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	4939      	ldr	r1, [pc, #228]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d167      	bne.n	80040b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003fe4:	4b36      	ldr	r3, [pc, #216]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a35      	ldr	r2, [pc, #212]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff0:	f7fc fe0a 	bl	8000c08 <HAL_GetTick>
 8003ff4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ff6:	e009      	b.n	800400c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ff8:	f7fc fe06 	bl	8000c08 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d902      	bls.n	800400c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	73fb      	strb	r3, [r7, #15]
        break;
 800400a:	e005      	b.n	8004018 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800400c:	4b2c      	ldr	r3, [pc, #176]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ef      	bne.n	8003ff8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d14a      	bne.n	80040b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d111      	bne.n	8004048 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004024:	4b26      	ldr	r3, [pc, #152]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800402c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6892      	ldr	r2, [r2, #8]
 8004034:	0211      	lsls	r1, r2, #8
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68d2      	ldr	r2, [r2, #12]
 800403a:	0912      	lsrs	r2, r2, #4
 800403c:	0452      	lsls	r2, r2, #17
 800403e:	430a      	orrs	r2, r1
 8004040:	491f      	ldr	r1, [pc, #124]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004042:	4313      	orrs	r3, r2
 8004044:	614b      	str	r3, [r1, #20]
 8004046:	e011      	b.n	800406c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004048:	4b1d      	ldr	r3, [pc, #116]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004050:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6892      	ldr	r2, [r2, #8]
 8004058:	0211      	lsls	r1, r2, #8
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6912      	ldr	r2, [r2, #16]
 800405e:	0852      	lsrs	r2, r2, #1
 8004060:	3a01      	subs	r2, #1
 8004062:	0652      	lsls	r2, r2, #25
 8004064:	430a      	orrs	r2, r1
 8004066:	4916      	ldr	r1, [pc, #88]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004068:	4313      	orrs	r3, r2
 800406a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800406c:	4b14      	ldr	r3, [pc, #80]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a13      	ldr	r2, [pc, #76]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004076:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fc fdc6 	bl	8000c08 <HAL_GetTick>
 800407c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800407e:	e009      	b.n	8004094 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004080:	f7fc fdc2 	bl	8000c08 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d902      	bls.n	8004094 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	73fb      	strb	r3, [r7, #15]
          break;
 8004092:	e005      	b.n	80040a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004094:	4b0a      	ldr	r3, [pc, #40]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ef      	beq.n	8004080 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040a6:	4b06      	ldr	r3, [pc, #24]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	4904      	ldr	r1, [pc, #16]	@ (80040c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40021000 	.word	0x40021000

080040c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e040      	b.n	8004158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fc fc56 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2224      	movs	r2, #36	@ 0x24
 80040f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fae0 	bl	80046d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f825 	bl	8004160 <UART_SetConfig>
 8004116:	4603      	mov	r3, r0
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e01b      	b.n	8004158 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800412e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800413e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fb5f 	bl	8004814 <UART_CheckIdleState>
 8004156:	4603      	mov	r3, r0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004164:	b08a      	sub	sp, #40	@ 0x28
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	431a      	orrs	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	431a      	orrs	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	4313      	orrs	r3, r2
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4ba4      	ldr	r3, [pc, #656]	@ (8004420 <UART_SetConfig+0x2c0>)
 8004190:	4013      	ands	r3, r2
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004198:	430b      	orrs	r3, r1
 800419a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a99      	ldr	r2, [pc, #612]	@ (8004424 <UART_SetConfig+0x2c4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c8:	4313      	orrs	r3, r2
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041dc:	430a      	orrs	r2, r1
 80041de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a90      	ldr	r2, [pc, #576]	@ (8004428 <UART_SetConfig+0x2c8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d126      	bne.n	8004238 <UART_SetConfig+0xd8>
 80041ea:	4b90      	ldr	r3, [pc, #576]	@ (800442c <UART_SetConfig+0x2cc>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d81b      	bhi.n	8004230 <UART_SetConfig+0xd0>
 80041f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004200 <UART_SetConfig+0xa0>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004211 	.word	0x08004211
 8004204:	08004221 	.word	0x08004221
 8004208:	08004219 	.word	0x08004219
 800420c:	08004229 	.word	0x08004229
 8004210:	2301      	movs	r3, #1
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004216:	e116      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004218:	2302      	movs	r3, #2
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421e:	e112      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004220:	2304      	movs	r3, #4
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004226:	e10e      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004228:	2308      	movs	r3, #8
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422e:	e10a      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004230:	2310      	movs	r3, #16
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004236:	e106      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a7c      	ldr	r2, [pc, #496]	@ (8004430 <UART_SetConfig+0x2d0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d138      	bne.n	80042b4 <UART_SetConfig+0x154>
 8004242:	4b7a      	ldr	r3, [pc, #488]	@ (800442c <UART_SetConfig+0x2cc>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b0c      	cmp	r3, #12
 800424e:	d82d      	bhi.n	80042ac <UART_SetConfig+0x14c>
 8004250:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <UART_SetConfig+0xf8>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	0800428d 	.word	0x0800428d
 800425c:	080042ad 	.word	0x080042ad
 8004260:	080042ad 	.word	0x080042ad
 8004264:	080042ad 	.word	0x080042ad
 8004268:	0800429d 	.word	0x0800429d
 800426c:	080042ad 	.word	0x080042ad
 8004270:	080042ad 	.word	0x080042ad
 8004274:	080042ad 	.word	0x080042ad
 8004278:	08004295 	.word	0x08004295
 800427c:	080042ad 	.word	0x080042ad
 8004280:	080042ad 	.word	0x080042ad
 8004284:	080042ad 	.word	0x080042ad
 8004288:	080042a5 	.word	0x080042a5
 800428c:	2300      	movs	r3, #0
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004292:	e0d8      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004294:	2302      	movs	r3, #2
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429a:	e0d4      	b.n	8004446 <UART_SetConfig+0x2e6>
 800429c:	2304      	movs	r3, #4
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a2:	e0d0      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042a4:	2308      	movs	r3, #8
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042aa:	e0cc      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042ac:	2310      	movs	r3, #16
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b2:	e0c8      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004434 <UART_SetConfig+0x2d4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d125      	bne.n	800430a <UART_SetConfig+0x1aa>
 80042be:	4b5b      	ldr	r3, [pc, #364]	@ (800442c <UART_SetConfig+0x2cc>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042c8:	2b30      	cmp	r3, #48	@ 0x30
 80042ca:	d016      	beq.n	80042fa <UART_SetConfig+0x19a>
 80042cc:	2b30      	cmp	r3, #48	@ 0x30
 80042ce:	d818      	bhi.n	8004302 <UART_SetConfig+0x1a2>
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d00a      	beq.n	80042ea <UART_SetConfig+0x18a>
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d814      	bhi.n	8004302 <UART_SetConfig+0x1a2>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <UART_SetConfig+0x182>
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d008      	beq.n	80042f2 <UART_SetConfig+0x192>
 80042e0:	e00f      	b.n	8004302 <UART_SetConfig+0x1a2>
 80042e2:	2300      	movs	r3, #0
 80042e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e8:	e0ad      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042ea:	2302      	movs	r3, #2
 80042ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f0:	e0a9      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042f2:	2304      	movs	r3, #4
 80042f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f8:	e0a5      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042fa:	2308      	movs	r3, #8
 80042fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004300:	e0a1      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004302:	2310      	movs	r3, #16
 8004304:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004308:	e09d      	b.n	8004446 <UART_SetConfig+0x2e6>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a4a      	ldr	r2, [pc, #296]	@ (8004438 <UART_SetConfig+0x2d8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d125      	bne.n	8004360 <UART_SetConfig+0x200>
 8004314:	4b45      	ldr	r3, [pc, #276]	@ (800442c <UART_SetConfig+0x2cc>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800431e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004320:	d016      	beq.n	8004350 <UART_SetConfig+0x1f0>
 8004322:	2bc0      	cmp	r3, #192	@ 0xc0
 8004324:	d818      	bhi.n	8004358 <UART_SetConfig+0x1f8>
 8004326:	2b80      	cmp	r3, #128	@ 0x80
 8004328:	d00a      	beq.n	8004340 <UART_SetConfig+0x1e0>
 800432a:	2b80      	cmp	r3, #128	@ 0x80
 800432c:	d814      	bhi.n	8004358 <UART_SetConfig+0x1f8>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <UART_SetConfig+0x1d8>
 8004332:	2b40      	cmp	r3, #64	@ 0x40
 8004334:	d008      	beq.n	8004348 <UART_SetConfig+0x1e8>
 8004336:	e00f      	b.n	8004358 <UART_SetConfig+0x1f8>
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433e:	e082      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004340:	2302      	movs	r3, #2
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004346:	e07e      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004348:	2304      	movs	r3, #4
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434e:	e07a      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004350:	2308      	movs	r3, #8
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004356:	e076      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004358:	2310      	movs	r3, #16
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435e:	e072      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a35      	ldr	r2, [pc, #212]	@ (800443c <UART_SetConfig+0x2dc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d12a      	bne.n	80043c0 <UART_SetConfig+0x260>
 800436a:	4b30      	ldr	r3, [pc, #192]	@ (800442c <UART_SetConfig+0x2cc>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004378:	d01a      	beq.n	80043b0 <UART_SetConfig+0x250>
 800437a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800437e:	d81b      	bhi.n	80043b8 <UART_SetConfig+0x258>
 8004380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004384:	d00c      	beq.n	80043a0 <UART_SetConfig+0x240>
 8004386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438a:	d815      	bhi.n	80043b8 <UART_SetConfig+0x258>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <UART_SetConfig+0x238>
 8004390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004394:	d008      	beq.n	80043a8 <UART_SetConfig+0x248>
 8004396:	e00f      	b.n	80043b8 <UART_SetConfig+0x258>
 8004398:	2300      	movs	r3, #0
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439e:	e052      	b.n	8004446 <UART_SetConfig+0x2e6>
 80043a0:	2302      	movs	r3, #2
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a6:	e04e      	b.n	8004446 <UART_SetConfig+0x2e6>
 80043a8:	2304      	movs	r3, #4
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ae:	e04a      	b.n	8004446 <UART_SetConfig+0x2e6>
 80043b0:	2308      	movs	r3, #8
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b6:	e046      	b.n	8004446 <UART_SetConfig+0x2e6>
 80043b8:	2310      	movs	r3, #16
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043be:	e042      	b.n	8004446 <UART_SetConfig+0x2e6>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a17      	ldr	r2, [pc, #92]	@ (8004424 <UART_SetConfig+0x2c4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d13a      	bne.n	8004440 <UART_SetConfig+0x2e0>
 80043ca:	4b18      	ldr	r3, [pc, #96]	@ (800442c <UART_SetConfig+0x2cc>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043d8:	d01a      	beq.n	8004410 <UART_SetConfig+0x2b0>
 80043da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043de:	d81b      	bhi.n	8004418 <UART_SetConfig+0x2b8>
 80043e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e4:	d00c      	beq.n	8004400 <UART_SetConfig+0x2a0>
 80043e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ea:	d815      	bhi.n	8004418 <UART_SetConfig+0x2b8>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <UART_SetConfig+0x298>
 80043f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f4:	d008      	beq.n	8004408 <UART_SetConfig+0x2a8>
 80043f6:	e00f      	b.n	8004418 <UART_SetConfig+0x2b8>
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fe:	e022      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004400:	2302      	movs	r3, #2
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004406:	e01e      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004408:	2304      	movs	r3, #4
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440e:	e01a      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004410:	2308      	movs	r3, #8
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004416:	e016      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004418:	2310      	movs	r3, #16
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441e:	e012      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004420:	efff69f3 	.word	0xefff69f3
 8004424:	40008000 	.word	0x40008000
 8004428:	40013800 	.word	0x40013800
 800442c:	40021000 	.word	0x40021000
 8004430:	40004400 	.word	0x40004400
 8004434:	40004800 	.word	0x40004800
 8004438:	40004c00 	.word	0x40004c00
 800443c:	40005000 	.word	0x40005000
 8004440:	2310      	movs	r3, #16
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a9f      	ldr	r2, [pc, #636]	@ (80046c8 <UART_SetConfig+0x568>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d17a      	bne.n	8004546 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004450:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004454:	2b08      	cmp	r3, #8
 8004456:	d824      	bhi.n	80044a2 <UART_SetConfig+0x342>
 8004458:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <UART_SetConfig+0x300>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004485 	.word	0x08004485
 8004464:	080044a3 	.word	0x080044a3
 8004468:	0800448d 	.word	0x0800448d
 800446c:	080044a3 	.word	0x080044a3
 8004470:	08004493 	.word	0x08004493
 8004474:	080044a3 	.word	0x080044a3
 8004478:	080044a3 	.word	0x080044a3
 800447c:	080044a3 	.word	0x080044a3
 8004480:	0800449b 	.word	0x0800449b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004484:	f7ff f8d6 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8004488:	61f8      	str	r0, [r7, #28]
        break;
 800448a:	e010      	b.n	80044ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800448c:	4b8f      	ldr	r3, [pc, #572]	@ (80046cc <UART_SetConfig+0x56c>)
 800448e:	61fb      	str	r3, [r7, #28]
        break;
 8004490:	e00d      	b.n	80044ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004492:	f7ff f837 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 8004496:	61f8      	str	r0, [r7, #28]
        break;
 8004498:	e009      	b.n	80044ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800449e:	61fb      	str	r3, [r7, #28]
        break;
 80044a0:	e005      	b.n	80044ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80fb 	beq.w	80046ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d305      	bcc.n	80044d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d903      	bls.n	80044da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044d8:	e0e8      	b.n	80046ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	2200      	movs	r2, #0
 80044de:	461c      	mov	r4, r3
 80044e0:	4615      	mov	r5, r2
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	022b      	lsls	r3, r5, #8
 80044ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044f0:	0222      	lsls	r2, r4, #8
 80044f2:	68f9      	ldr	r1, [r7, #12]
 80044f4:	6849      	ldr	r1, [r1, #4]
 80044f6:	0849      	lsrs	r1, r1, #1
 80044f8:	2000      	movs	r0, #0
 80044fa:	4688      	mov	r8, r1
 80044fc:	4681      	mov	r9, r0
 80044fe:	eb12 0a08 	adds.w	sl, r2, r8
 8004502:	eb43 0b09 	adc.w	fp, r3, r9
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004514:	4650      	mov	r0, sl
 8004516:	4659      	mov	r1, fp
 8004518:	f7fb fe56 	bl	80001c8 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4613      	mov	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800452a:	d308      	bcc.n	800453e <UART_SetConfig+0x3de>
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004532:	d204      	bcs.n	800453e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	60da      	str	r2, [r3, #12]
 800453c:	e0b6      	b.n	80046ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004544:	e0b2      	b.n	80046ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800454e:	d15e      	bne.n	800460e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004550:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004554:	2b08      	cmp	r3, #8
 8004556:	d828      	bhi.n	80045aa <UART_SetConfig+0x44a>
 8004558:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <UART_SetConfig+0x400>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004585 	.word	0x08004585
 8004564:	0800458d 	.word	0x0800458d
 8004568:	08004595 	.word	0x08004595
 800456c:	080045ab 	.word	0x080045ab
 8004570:	0800459b 	.word	0x0800459b
 8004574:	080045ab 	.word	0x080045ab
 8004578:	080045ab 	.word	0x080045ab
 800457c:	080045ab 	.word	0x080045ab
 8004580:	080045a3 	.word	0x080045a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004584:	f7ff f856 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8004588:	61f8      	str	r0, [r7, #28]
        break;
 800458a:	e014      	b.n	80045b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800458c:	f7ff f868 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8004590:	61f8      	str	r0, [r7, #28]
        break;
 8004592:	e010      	b.n	80045b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004594:	4b4d      	ldr	r3, [pc, #308]	@ (80046cc <UART_SetConfig+0x56c>)
 8004596:	61fb      	str	r3, [r7, #28]
        break;
 8004598:	e00d      	b.n	80045b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459a:	f7fe ffb3 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 800459e:	61f8      	str	r0, [r7, #28]
        break;
 80045a0:	e009      	b.n	80045b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045a6:	61fb      	str	r3, [r7, #28]
        break;
 80045a8:	e005      	b.n	80045b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d077      	beq.n	80046ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	005a      	lsls	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	441a      	add	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b0f      	cmp	r3, #15
 80045d6:	d916      	bls.n	8004606 <UART_SetConfig+0x4a6>
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045de:	d212      	bcs.n	8004606 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f023 030f 	bic.w	r3, r3, #15
 80045e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	8afb      	ldrh	r3, [r7, #22]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	8afa      	ldrh	r2, [r7, #22]
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	e052      	b.n	80046ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800460c:	e04e      	b.n	80046ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800460e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004612:	2b08      	cmp	r3, #8
 8004614:	d827      	bhi.n	8004666 <UART_SetConfig+0x506>
 8004616:	a201      	add	r2, pc, #4	@ (adr r2, 800461c <UART_SetConfig+0x4bc>)
 8004618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461c:	08004641 	.word	0x08004641
 8004620:	08004649 	.word	0x08004649
 8004624:	08004651 	.word	0x08004651
 8004628:	08004667 	.word	0x08004667
 800462c:	08004657 	.word	0x08004657
 8004630:	08004667 	.word	0x08004667
 8004634:	08004667 	.word	0x08004667
 8004638:	08004667 	.word	0x08004667
 800463c:	0800465f 	.word	0x0800465f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004640:	f7fe fff8 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8004644:	61f8      	str	r0, [r7, #28]
        break;
 8004646:	e014      	b.n	8004672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7ff f80a 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 800464c:	61f8      	str	r0, [r7, #28]
        break;
 800464e:	e010      	b.n	8004672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004650:	4b1e      	ldr	r3, [pc, #120]	@ (80046cc <UART_SetConfig+0x56c>)
 8004652:	61fb      	str	r3, [r7, #28]
        break;
 8004654:	e00d      	b.n	8004672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004656:	f7fe ff55 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 800465a:	61f8      	str	r0, [r7, #28]
        break;
 800465c:	e009      	b.n	8004672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004662:	61fb      	str	r3, [r7, #28]
        break;
 8004664:	e005      	b.n	8004672 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004670:	bf00      	nop
    }

    if (pclk != 0U)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d019      	beq.n	80046ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	085a      	lsrs	r2, r3, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	441a      	add	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	fbb2 f3f3 	udiv	r3, r2, r3
 800468a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b0f      	cmp	r3, #15
 8004690:	d909      	bls.n	80046a6 <UART_SetConfig+0x546>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004698:	d205      	bcs.n	80046a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	e002      	b.n	80046ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3728      	adds	r7, #40	@ 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c6:	bf00      	nop
 80046c8:	40008000 	.word	0x40008000
 80046cc:	00f42400 	.word	0x00f42400

080046d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01a      	beq.n	80047e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ce:	d10a      	bne.n	80047e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b098      	sub	sp, #96	@ 0x60
 8004818:	af02      	add	r7, sp, #8
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004824:	f7fc f9f0 	bl	8000c08 <HAL_GetTick>
 8004828:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b08      	cmp	r3, #8
 8004836:	d12e      	bne.n	8004896 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004838:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004840:	2200      	movs	r2, #0
 8004842:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f88c 	bl	8004964 <UART_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d021      	beq.n	8004896 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004866:	653b      	str	r3, [r7, #80]	@ 0x50
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004870:	647b      	str	r3, [r7, #68]	@ 0x44
 8004872:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800487e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e6      	bne.n	8004852 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e062      	b.n	800495c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d149      	bne.n	8004938 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ac:	2200      	movs	r2, #0
 80048ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f856 	bl	8004964 <UART_WaitOnFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d03c      	beq.n	8004938 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	623b      	str	r3, [r7, #32]
   return(result);
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80048de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e6      	bne.n	80048be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3308      	adds	r3, #8
 80048f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004910:	61fa      	str	r2, [r7, #28]
 8004912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	617b      	str	r3, [r7, #20]
   return(result);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e5      	bne.n	80048f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e011      	b.n	800495c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3758      	adds	r7, #88	@ 0x58
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004974:	e04f      	b.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d04b      	beq.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497e:	f7fc f943 	bl	8000c08 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	429a      	cmp	r2, r3
 800498c:	d302      	bcc.n	8004994 <UART_WaitOnFlagUntilTimeout+0x30>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e04e      	b.n	8004a36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d037      	beq.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b80      	cmp	r3, #128	@ 0x80
 80049aa:	d034      	beq.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b40      	cmp	r3, #64	@ 0x40
 80049b0:	d031      	beq.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d110      	bne.n	80049e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2208      	movs	r2, #8
 80049c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f838 	bl	8004a3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2208      	movs	r2, #8
 80049d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e029      	b.n	8004a36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049f0:	d111      	bne.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f81e 	bl	8004a3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e00f      	b.n	8004a36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	bf0c      	ite	eq
 8004a26:	2301      	moveq	r3, #1
 8004a28:	2300      	movne	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d0a0      	beq.n	8004976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b095      	sub	sp, #84	@ 0x54
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a64:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e6      	bne.n	8004a46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d118      	bne.n	8004ae6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f023 0310 	bic.w	r3, r3, #16
 8004ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad2:	61bb      	str	r3, [r7, #24]
 8004ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6979      	ldr	r1, [r7, #20]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e6      	bne.n	8004ab4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004afa:	bf00      	nop
 8004afc:	3754      	adds	r7, #84	@ 0x54
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <memset>:
 8004b06:	4402      	add	r2, r0
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d100      	bne.n	8004b10 <memset+0xa>
 8004b0e:	4770      	bx	lr
 8004b10:	f803 1b01 	strb.w	r1, [r3], #1
 8004b14:	e7f9      	b.n	8004b0a <memset+0x4>
	...

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2600      	movs	r6, #0
 8004b24:	42a6      	cmp	r6, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4d0b      	ldr	r5, [pc, #44]	@ (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f000 f818 	bl	8004b60 <_init>
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2600      	movs	r6, #0
 8004b36:	42a6      	cmp	r6, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b40:	4798      	blx	r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4a:	4798      	blx	r3
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	08004bc8 	.word	0x08004bc8
 8004b54:	08004bc8 	.word	0x08004bc8
 8004b58:	08004bc8 	.word	0x08004bc8
 8004b5c:	08004bcc 	.word	0x08004bcc

08004b60 <_init>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr

08004b6c <_fini>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr
