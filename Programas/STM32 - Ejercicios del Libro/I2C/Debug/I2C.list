
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08007b38  08007b38  00008b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f30  08007f30  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f38  08007f38  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f38  08007f38  00008f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f3c  08007f3c  00008f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007f40  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001d4  08008114  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08008114  00009450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd60  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5e  00000000  00000000  00016f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00018dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b4  00000000  00000000  00019a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f79  00000000  00000000  0001a404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff4d  00000000  00000000  0004137d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec47b  00000000  00000000  000512ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d745  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f8  00000000  00000000  0013d788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00141c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b20 	.word	0x08007b20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007b20 	.word	0x08007b20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	b092      	sub	sp, #72	@ 0x48
 8000e9e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f000 fdc0 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f97a 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 fa3a 	bl	8001320 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 fa08 	bl	80012c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000eb0:	f000 f9c6 	bl	8001240 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  IMU_Init();
 8000eb4:	f000 fa9a 	bl	80013ec <IMU_Init>

  for (int i =0; i < 2000; i++) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ebc:	e04b      	b.n	8000f56 <main+0xbe>
	  Read_Accel();
 8000ebe:	f000 fae5 	bl	800148c <Read_Accel>
	  Cal_AccX += AccX;
 8000ec2:	4ba5      	ldr	r3, [pc, #660]	@ (8001158 <main+0x2c0>)
 8000ec4:	ed93 7a00 	vldr	s14, [r3]
 8000ec8:	4ba4      	ldr	r3, [pc, #656]	@ (800115c <main+0x2c4>)
 8000eca:	edd3 7a00 	vldr	s15, [r3]
 8000ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed2:	4ba1      	ldr	r3, [pc, #644]	@ (8001158 <main+0x2c0>)
 8000ed4:	edc3 7a00 	vstr	s15, [r3]
	  Cal_AccY += AccY;
 8000ed8:	4ba1      	ldr	r3, [pc, #644]	@ (8001160 <main+0x2c8>)
 8000eda:	ed93 7a00 	vldr	s14, [r3]
 8000ede:	4ba1      	ldr	r3, [pc, #644]	@ (8001164 <main+0x2cc>)
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee8:	4b9d      	ldr	r3, [pc, #628]	@ (8001160 <main+0x2c8>)
 8000eea:	edc3 7a00 	vstr	s15, [r3]
	  Cal_AccZ += AccZ;
 8000eee:	4b9e      	ldr	r3, [pc, #632]	@ (8001168 <main+0x2d0>)
 8000ef0:	ed93 7a00 	vldr	s14, [r3]
 8000ef4:	4b9d      	ldr	r3, [pc, #628]	@ (800116c <main+0x2d4>)
 8000ef6:	edd3 7a00 	vldr	s15, [r3]
 8000efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efe:	4b9a      	ldr	r3, [pc, #616]	@ (8001168 <main+0x2d0>)
 8000f00:	edc3 7a00 	vstr	s15, [r3]
	  Read_Gyr();
 8000f04:	f000 fb1e 	bl	8001544 <Read_Gyr>
	  Cal_GyrX += GyrX;
 8000f08:	4b99      	ldr	r3, [pc, #612]	@ (8001170 <main+0x2d8>)
 8000f0a:	ed93 7a00 	vldr	s14, [r3]
 8000f0e:	4b99      	ldr	r3, [pc, #612]	@ (8001174 <main+0x2dc>)
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f18:	4b95      	ldr	r3, [pc, #596]	@ (8001170 <main+0x2d8>)
 8000f1a:	edc3 7a00 	vstr	s15, [r3]
	  Cal_GyrY += GyrY;
 8000f1e:	4b96      	ldr	r3, [pc, #600]	@ (8001178 <main+0x2e0>)
 8000f20:	ed93 7a00 	vldr	s14, [r3]
 8000f24:	4b95      	ldr	r3, [pc, #596]	@ (800117c <main+0x2e4>)
 8000f26:	edd3 7a00 	vldr	s15, [r3]
 8000f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2e:	4b92      	ldr	r3, [pc, #584]	@ (8001178 <main+0x2e0>)
 8000f30:	edc3 7a00 	vstr	s15, [r3]
	  Cal_GyrZ += GyrZ;
 8000f34:	4b92      	ldr	r3, [pc, #584]	@ (8001180 <main+0x2e8>)
 8000f36:	ed93 7a00 	vldr	s14, [r3]
 8000f3a:	4b92      	ldr	r3, [pc, #584]	@ (8001184 <main+0x2ec>)
 8000f3c:	edd3 7a00 	vldr	s15, [r3]
 8000f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f44:	4b8e      	ldr	r3, [pc, #568]	@ (8001180 <main+0x2e8>)
 8000f46:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(2);
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f000 fde6 	bl	8001b1c <HAL_Delay>
  for (int i =0; i < 2000; i++) {
 8000f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f52:	3301      	adds	r3, #1
 8000f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f58:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f5c:	dbaf      	blt.n	8000ebe <main+0x26>

  }

  Cal_AccX /= 2000;
 8000f5e:	4b7e      	ldr	r3, [pc, #504]	@ (8001158 <main+0x2c0>)
 8000f60:	ed93 7a00 	vldr	s14, [r3]
 8000f64:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8001188 <main+0x2f0>
 8000f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6c:	4b7a      	ldr	r3, [pc, #488]	@ (8001158 <main+0x2c0>)
 8000f6e:	edc3 7a00 	vstr	s15, [r3]
  Cal_AccY /= 2000;
 8000f72:	4b7b      	ldr	r3, [pc, #492]	@ (8001160 <main+0x2c8>)
 8000f74:	ed93 7a00 	vldr	s14, [r3]
 8000f78:	eddf 6a83 	vldr	s13, [pc, #524]	@ 8001188 <main+0x2f0>
 8000f7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f80:	4b77      	ldr	r3, [pc, #476]	@ (8001160 <main+0x2c8>)
 8000f82:	edc3 7a00 	vstr	s15, [r3]
  Cal_AccZ = 1-(Cal_AccZ/2000);
 8000f86:	4b78      	ldr	r3, [pc, #480]	@ (8001168 <main+0x2d0>)
 8000f88:	ed93 7a00 	vldr	s14, [r3]
 8000f8c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8001188 <main+0x2f0>
 8000f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9c:	4b72      	ldr	r3, [pc, #456]	@ (8001168 <main+0x2d0>)
 8000f9e:	edc3 7a00 	vstr	s15, [r3]

  Cal_GyrX /= 2000;
 8000fa2:	4b73      	ldr	r3, [pc, #460]	@ (8001170 <main+0x2d8>)
 8000fa4:	ed93 7a00 	vldr	s14, [r3]
 8000fa8:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8001188 <main+0x2f0>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8001170 <main+0x2d8>)
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
  Cal_GyrY /= 2000;
 8000fb6:	4b70      	ldr	r3, [pc, #448]	@ (8001178 <main+0x2e0>)
 8000fb8:	ed93 7a00 	vldr	s14, [r3]
 8000fbc:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8001188 <main+0x2f0>
 8000fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc4:	4b6c      	ldr	r3, [pc, #432]	@ (8001178 <main+0x2e0>)
 8000fc6:	edc3 7a00 	vstr	s15, [r3]
  Cal_GyrZ /= 2000;
 8000fca:	4b6d      	ldr	r3, [pc, #436]	@ (8001180 <main+0x2e8>)
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8001188 <main+0x2f0>
 8000fd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd8:	4b69      	ldr	r3, [pc, #420]	@ (8001180 <main+0x2e8>)
 8000fda:	edc3 7a00 	vstr	s15, [r3]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe6:	f001 f84d 	bl	8002084 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  strcpy((char*)buf, "Reading Acc.\r\n");
 8000fea:	463b      	mov	r3, r7
 8000fec:	4a67      	ldr	r2, [pc, #412]	@ (800118c <main+0x2f4>)
 8000fee:	461c      	mov	r4, r3
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff4:	c407      	stmia	r4!, {r0, r1, r2}
 8000ff6:	8023      	strh	r3, [r4, #0]
 8000ff8:	3402      	adds	r4, #2
 8000ffa:	0c1b      	lsrs	r3, r3, #16
 8000ffc:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 1000);
 8000ffe:	463b      	mov	r3, r7
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff f935 	bl	8000270 <strlen>
 8001006:	4603      	mov	r3, r0
 8001008:	b29a      	uxth	r2, r3
 800100a:	4639      	mov	r1, r7
 800100c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001010:	485f      	ldr	r0, [pc, #380]	@ (8001190 <main+0x2f8>)
 8001012:	f003 f9e1 	bl	80043d8 <HAL_UART_Transmit>
	  Read_Accel();
 8001016:	f000 fa39 	bl	800148c <Read_Accel>
	  sprintf((char*)buf, "X: %.2f, Y: %.2f, Z: %.2f\r\n", AccX-Cal_AccX, AccY-Cal_AccY, AccZ+Cal_AccZ);
 800101a:	4b50      	ldr	r3, [pc, #320]	@ (800115c <main+0x2c4>)
 800101c:	ed93 7a00 	vldr	s14, [r3]
 8001020:	4b4d      	ldr	r3, [pc, #308]	@ (8001158 <main+0x2c0>)
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102a:	ee17 0a90 	vmov	r0, s15
 800102e:	f7ff fa8b 	bl	8000548 <__aeabi_f2d>
 8001032:	4680      	mov	r8, r0
 8001034:	4689      	mov	r9, r1
 8001036:	4b4b      	ldr	r3, [pc, #300]	@ (8001164 <main+0x2cc>)
 8001038:	ed93 7a00 	vldr	s14, [r3]
 800103c:	4b48      	ldr	r3, [pc, #288]	@ (8001160 <main+0x2c8>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001046:	ee17 0a90 	vmov	r0, s15
 800104a:	f7ff fa7d 	bl	8000548 <__aeabi_f2d>
 800104e:	4604      	mov	r4, r0
 8001050:	460d      	mov	r5, r1
 8001052:	4b46      	ldr	r3, [pc, #280]	@ (800116c <main+0x2d4>)
 8001054:	ed93 7a00 	vldr	s14, [r3]
 8001058:	4b43      	ldr	r3, [pc, #268]	@ (8001168 <main+0x2d0>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001062:	ee17 0a90 	vmov	r0, s15
 8001066:	f7ff fa6f 	bl	8000548 <__aeabi_f2d>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4638      	mov	r0, r7
 8001070:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001074:	e9cd 4500 	strd	r4, r5, [sp]
 8001078:	4642      	mov	r2, r8
 800107a:	464b      	mov	r3, r9
 800107c:	4945      	ldr	r1, [pc, #276]	@ (8001194 <main+0x2fc>)
 800107e:	f004 fc21 	bl	80058c4 <siprintf>
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 1000);
 8001082:	463b      	mov	r3, r7
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f8f3 	bl	8000270 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	4639      	mov	r1, r7
 8001090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001094:	483e      	ldr	r0, [pc, #248]	@ (8001190 <main+0x2f8>)
 8001096:	f003 f99f 	bl	80043d8 <HAL_UART_Transmit>

	  strcpy((char*)buf, "Reading Rot.\r\n");
 800109a:	463b      	mov	r3, r7
 800109c:	4a3e      	ldr	r2, [pc, #248]	@ (8001198 <main+0x300>)
 800109e:	461c      	mov	r4, r3
 80010a0:	4613      	mov	r3, r2
 80010a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a4:	c407      	stmia	r4!, {r0, r1, r2}
 80010a6:	8023      	strh	r3, [r4, #0]
 80010a8:	3402      	adds	r4, #2
 80010aa:	0c1b      	lsrs	r3, r3, #16
 80010ac:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 1000);
 80010ae:	463b      	mov	r3, r7
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f8dd 	bl	8000270 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4639      	mov	r1, r7
 80010bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c0:	4833      	ldr	r0, [pc, #204]	@ (8001190 <main+0x2f8>)
 80010c2:	f003 f989 	bl	80043d8 <HAL_UART_Transmit>
	  Read_Gyr();
 80010c6:	f000 fa3d 	bl	8001544 <Read_Gyr>
	  sprintf((char*)buf, "X: %.2f, Y: %.2f, Z: %.2f\r\n", GyrX-Cal_GyrX, GyrY-Cal_GyrY, GyrZ-Cal_GyrZ);
 80010ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <main+0x2dc>)
 80010cc:	ed93 7a00 	vldr	s14, [r3]
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <main+0x2d8>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010da:	ee17 0a90 	vmov	r0, s15
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4680      	mov	r8, r0
 80010e4:	4689      	mov	r9, r1
 80010e6:	4b25      	ldr	r3, [pc, #148]	@ (800117c <main+0x2e4>)
 80010e8:	ed93 7a00 	vldr	s14, [r3]
 80010ec:	4b22      	ldr	r3, [pc, #136]	@ (8001178 <main+0x2e0>)
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f6:	ee17 0a90 	vmov	r0, s15
 80010fa:	f7ff fa25 	bl	8000548 <__aeabi_f2d>
 80010fe:	4604      	mov	r4, r0
 8001100:	460d      	mov	r5, r1
 8001102:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <main+0x2ec>)
 8001104:	ed93 7a00 	vldr	s14, [r3]
 8001108:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <main+0x2e8>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001112:	ee17 0a90 	vmov	r0, s15
 8001116:	f7ff fa17 	bl	8000548 <__aeabi_f2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4638      	mov	r0, r7
 8001120:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001124:	e9cd 4500 	strd	r4, r5, [sp]
 8001128:	4642      	mov	r2, r8
 800112a:	464b      	mov	r3, r9
 800112c:	4919      	ldr	r1, [pc, #100]	@ (8001194 <main+0x2fc>)
 800112e:	f004 fbc9 	bl	80058c4 <siprintf>
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 1000);
 8001132:	463b      	mov	r3, r7
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f89b 	bl	8000270 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	4639      	mov	r1, r7
 8001140:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001144:	4812      	ldr	r0, [pc, #72]	@ (8001190 <main+0x2f8>)
 8001146:	f003 f947 	bl	80043d8 <HAL_UART_Transmit>

	  HAL_Delay(500);
 800114a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800114e:	f000 fce5 	bl	8001b1c <HAL_Delay>
	  strcpy((char*)buf, "Reading Acc.\r\n");
 8001152:	bf00      	nop
 8001154:	e749      	b.n	8000fea <main+0x152>
 8001156:	bf00      	nop
 8001158:	200002f0 	.word	0x200002f0
 800115c:	200002d8 	.word	0x200002d8
 8001160:	200002f4 	.word	0x200002f4
 8001164:	200002dc 	.word	0x200002dc
 8001168:	200002f8 	.word	0x200002f8
 800116c:	200002e0 	.word	0x200002e0
 8001170:	200002e4 	.word	0x200002e4
 8001174:	200002cc 	.word	0x200002cc
 8001178:	200002e8 	.word	0x200002e8
 800117c:	200002d0 	.word	0x200002d0
 8001180:	200002ec 	.word	0x200002ec
 8001184:	200002d4 	.word	0x200002d4
 8001188:	44fa0000 	.word	0x44fa0000
 800118c:	08007b38 	.word	0x08007b38
 8001190:	20000244 	.word	0x20000244
 8001194:	08007b48 	.word	0x08007b48
 8001198:	08007b64 	.word	0x08007b64

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b096      	sub	sp, #88	@ 0x58
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2244      	movs	r2, #68	@ 0x44
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 fbed 	bl	800598a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011c2:	f001 fda9 	bl	8002d18 <HAL_PWREx_ControlVoltageScaling>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011cc:	f000 fa14 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d0:	2302      	movs	r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011da:	2310      	movs	r3, #16
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e2:	2302      	movs	r3, #2
 80011e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011ea:	230a      	movs	r3, #10
 80011ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011ee:	2307      	movs	r3, #7
 80011f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fde0 	bl	8002dc4 <HAL_RCC_OscConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800120a:	f000 f9f5 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120e:	230f      	movs	r3, #15
 8001210:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001212:	2303      	movs	r3, #3
 8001214:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001222:	463b      	mov	r3, r7
 8001224:	2104      	movs	r1, #4
 8001226:	4618      	mov	r0, r3
 8001228:	f002 f9a8 	bl	800357c <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001232:	f000 f9e1 	bl	80015f8 <Error_Handler>
  }
}
 8001236:	bf00      	nop
 8001238:	3758      	adds	r7, #88	@ 0x58
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <MX_I2C1_Init+0x74>)
 8001246:	4a1c      	ldr	r2, [pc, #112]	@ (80012b8 <MX_I2C1_Init+0x78>)
 8001248:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <MX_I2C1_Init+0x74>)
 800124c:	4a1b      	ldr	r2, [pc, #108]	@ (80012bc <MX_I2C1_Init+0x7c>)
 800124e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001250:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <MX_I2C1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <MX_I2C1_Init+0x74>)
 8001258:	2201      	movs	r2, #1
 800125a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <MX_I2C1_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <MX_I2C1_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <MX_I2C1_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_I2C1_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800127a:	480e      	ldr	r0, [pc, #56]	@ (80012b4 <MX_I2C1_Init+0x74>)
 800127c:	f000 ff1a 	bl	80020b4 <HAL_I2C_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001286:	f000 f9b7 	bl	80015f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800128a:	2100      	movs	r1, #0
 800128c:	4809      	ldr	r0, [pc, #36]	@ (80012b4 <MX_I2C1_Init+0x74>)
 800128e:	f001 fc9d 	bl	8002bcc <HAL_I2CEx_ConfigAnalogFilter>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001298:	f000 f9ae 	bl	80015f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800129c:	2100      	movs	r1, #0
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <MX_I2C1_Init+0x74>)
 80012a0:	f001 fcdf 	bl	8002c62 <HAL_I2CEx_ConfigDigitalFilter>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012aa:	f000 f9a5 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200001f0 	.word	0x200001f0
 80012b8:	40005400 	.word	0x40005400
 80012bc:	10d19ce4 	.word	0x10d19ce4

080012c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_USART2_UART_Init+0x58>)
 80012c6:	4a15      	ldr	r2, [pc, #84]	@ (800131c <MX_USART2_UART_Init+0x5c>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <MX_USART2_UART_Init+0x58>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_USART2_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <MX_USART2_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_USART2_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_USART2_UART_Init+0x58>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <MX_USART2_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_USART2_UART_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MX_USART2_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_USART2_UART_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_USART2_UART_Init+0x58>)
 8001304:	f003 f81a 	bl	800433c <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800130e:	f000 f973 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000244 	.word	0x20000244
 800131c:	40004400 	.word	0x40004400

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b2b      	ldr	r3, [pc, #172]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a2a      	ldr	r2, [pc, #168]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a24      	ldr	r2, [pc, #144]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a1e      	ldr	r2, [pc, #120]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a18      	ldr	r2, [pc, #96]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <MX_GPIO_Init+0xc4>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2120      	movs	r1, #32
 800139a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139e:	f000 fe71 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <MX_GPIO_Init+0xc8>)
 80013ba:	f000 fcb9 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013be:	2320      	movs	r3, #32
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d8:	f000 fcaa 	bl	8001d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	@ 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000
 80013e8:	48000800 	.word	0x48000800

080013ec <IMU_Init>:

/* USER CODE BEGIN 4 */
void IMU_Init(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t Data = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	71bb      	strb	r3, [r7, #6]

	Data = 0x00;	//POWER CONFIG
 80013f6:	2300      	movs	r3, #0
 80013f8:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, IMU, PWR_REG1, 1, &Data, 1, 1000);
 80013fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	2301      	movs	r3, #1
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	1dbb      	adds	r3, r7, #6
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	226b      	movs	r2, #107	@ 0x6b
 800140c:	21d0      	movs	r1, #208	@ 0xd0
 800140e:	481e      	ldr	r0, [pc, #120]	@ (8001488 <IMU_Init+0x9c>)
 8001410:	f000 feec 	bl	80021ec <HAL_I2C_Mem_Write>
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]

	Data = 0x05;	//LOW PASS FILTER CONFIG
 8001418:	2305      	movs	r3, #5
 800141a:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, IMU, CFG_REG, 1, &Data, 1, 1000);
 800141c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	2301      	movs	r3, #1
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	1dbb      	adds	r3, r7, #6
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2301      	movs	r3, #1
 800142c:	221a      	movs	r2, #26
 800142e:	21d0      	movs	r1, #208	@ 0xd0
 8001430:	4815      	ldr	r0, [pc, #84]	@ (8001488 <IMU_Init+0x9c>)
 8001432:	f000 fedb 	bl	80021ec <HAL_I2C_Mem_Write>
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]

	Data = 0x10;	//ACC CONFIG: 8G
 800143a:	2310      	movs	r3, #16
 800143c:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, IMU, ACC_CFG, 1, &Data, 1, 1000);
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	1dbb      	adds	r3, r7, #6
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	221c      	movs	r2, #28
 8001450:	21d0      	movs	r1, #208	@ 0xd0
 8001452:	480d      	ldr	r0, [pc, #52]	@ (8001488 <IMU_Init+0x9c>)
 8001454:	f000 feca 	bl	80021ec <HAL_I2C_Mem_Write>
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]

	Data = 0x08;	//GYRO CONFIG: 8G
 800145c:	2308      	movs	r3, #8
 800145e:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, IMU, GYR_CFG, 1, &Data, 1, 1000);
 8001460:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	2301      	movs	r3, #1
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	1dbb      	adds	r3, r7, #6
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2301      	movs	r3, #1
 8001470:	221b      	movs	r2, #27
 8001472:	21d0      	movs	r1, #208	@ 0xd0
 8001474:	4804      	ldr	r0, [pc, #16]	@ (8001488 <IMU_Init+0x9c>)
 8001476:	f000 feb9 	bl	80021ec <HAL_I2C_Mem_Write>
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]

}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200001f0 	.word	0x200001f0

0800148c <Read_Accel>:

void Read_Accel(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af04      	add	r7, sp, #16
	uint8_t Acc_Val [6];

	HAL_I2C_Mem_Read(&hi2c1, IMU, ACC_REG, 1, Acc_Val, 6, 1000);
 8001492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	2306      	movs	r3, #6
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	223b      	movs	r2, #59	@ 0x3b
 80014a4:	21d0      	movs	r1, #208	@ 0xd0
 80014a6:	4822      	ldr	r0, [pc, #136]	@ (8001530 <Read_Accel+0xa4>)
 80014a8:	f000 ffb4 	bl	8002414 <HAL_I2C_Mem_Read>

	int16_t AccX_Raw = ((Acc_Val[0]<<8) | Acc_Val[1]);
 80014ac:	793b      	ldrb	r3, [r7, #4]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	797b      	ldrb	r3, [r7, #5]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	81fb      	strh	r3, [r7, #14]
	int16_t AccY_Raw = ((Acc_Val[2]<<8) | Acc_Val[3]);
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	81bb      	strh	r3, [r7, #12]
	int16_t AccZ_Raw = ((Acc_Val[4]<<8) | Acc_Val[5]);
 80014c8:	7a3b      	ldrb	r3, [r7, #8]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	7a7b      	ldrb	r3, [r7, #9]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	817b      	strh	r3, [r7, #10]

	AccX = ((float)AccX_Raw/4096);
 80014d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014da:	ee07 3a90 	vmov	s15, r3
 80014de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e2:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001534 <Read_Accel+0xa8>
 80014e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ea:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <Read_Accel+0xac>)
 80014ec:	edc3 7a00 	vstr	s15, [r3]
	AccY = ((float)AccY_Raw/4096);
 80014f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fc:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001534 <Read_Accel+0xa8>
 8001500:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001504:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <Read_Accel+0xb0>)
 8001506:	edc3 7a00 	vstr	s15, [r3]
	AccZ = -1*((float)AccZ_Raw/4096);
 800150a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001516:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001534 <Read_Accel+0xa8>
 800151a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151e:	eef1 7a67 	vneg.f32	s15, s15
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <Read_Accel+0xb4>)
 8001524:	edc3 7a00 	vstr	s15, [r3]
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200001f0 	.word	0x200001f0
 8001534:	45800000 	.word	0x45800000
 8001538:	200002d8 	.word	0x200002d8
 800153c:	200002dc 	.word	0x200002dc
 8001540:	200002e0 	.word	0x200002e0

08001544 <Read_Gyr>:

void Read_Gyr(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af04      	add	r7, sp, #16
	uint8_t Gyr_Val [6];

	HAL_I2C_Mem_Read(&hi2c1, IMU, GYR_REG, 1, Gyr_Val, 6, 1000);
 800154a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	2306      	movs	r3, #6
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2301      	movs	r3, #1
 800155a:	2243      	movs	r2, #67	@ 0x43
 800155c:	21d0      	movs	r1, #208	@ 0xd0
 800155e:	4821      	ldr	r0, [pc, #132]	@ (80015e4 <Read_Gyr+0xa0>)
 8001560:	f000 ff58 	bl	8002414 <HAL_I2C_Mem_Read>

	int16_t GyrX_Raw = ((Gyr_Val[0]<<8) | Gyr_Val[1]);
 8001564:	793b      	ldrb	r3, [r7, #4]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	797b      	ldrb	r3, [r7, #5]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	81fb      	strh	r3, [r7, #14]
	int16_t GyrY_Raw = ((Gyr_Val[2]<<8) | Gyr_Val[3]);
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	81bb      	strh	r3, [r7, #12]
	int16_t GyrZ_Raw = ((Gyr_Val[4]<<8) | Gyr_Val[5]);
 8001580:	7a3b      	ldrb	r3, [r7, #8]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	7a7b      	ldrb	r3, [r7, #9]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	817b      	strh	r3, [r7, #10]

	GyrX = ((float)GyrX_Raw/65.5);
 800158e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159a:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80015e8 <Read_Gyr+0xa4>
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <Read_Gyr+0xa8>)
 80015a4:	edc3 7a00 	vstr	s15, [r3]
	GyrY = ((float)GyrY_Raw/65.5);
 80015a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b4:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80015e8 <Read_Gyr+0xa4>
 80015b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <Read_Gyr+0xac>)
 80015be:	edc3 7a00 	vstr	s15, [r3]
	GyrZ = ((float)GyrZ_Raw/65.5);
 80015c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ce:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80015e8 <Read_Gyr+0xa4>
 80015d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d6:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <Read_Gyr+0xb0>)
 80015d8:	edc3 7a00 	vstr	s15, [r3]
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200001f0 	.word	0x200001f0
 80015e8:	42830000 	.word	0x42830000
 80015ec:	200002cc 	.word	0x200002cc
 80015f0:	200002d0 	.word	0x200002d0
 80015f4:	200002d4 	.word	0x200002d4

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <Error_Handler+0x8>

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_MspInit+0x44>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160e:	4a0e      	ldr	r2, [pc, #56]	@ (8001648 <HAL_MspInit+0x44>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6613      	str	r3, [r2, #96]	@ 0x60
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <HAL_MspInit+0x44>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_MspInit+0x44>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	4a08      	ldr	r2, [pc, #32]	@ (8001648 <HAL_MspInit+0x44>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162c:	6593      	str	r3, [r2, #88]	@ 0x58
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_MspInit+0x44>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0ac      	sub	sp, #176	@ 0xb0
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2288      	movs	r2, #136	@ 0x88
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f004 f98c 	bl	800598a <memset>
  if(hi2c->Instance==I2C1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a21      	ldr	r2, [pc, #132]	@ (80016fc <HAL_I2C_MspInit+0xb0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d13b      	bne.n	80016f4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800167c:	2340      	movs	r3, #64	@ 0x40
 800167e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001680:	2300      	movs	r3, #0
 8001682:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4618      	mov	r0, r3
 800168a:	f002 f99b 	bl	80039c4 <HAL_RCCEx_PeriphCLKConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001694:	f7ff ffb0 	bl	80015f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <HAL_I2C_MspInit+0xb4>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169c:	4a18      	ldr	r2, [pc, #96]	@ (8001700 <HAL_I2C_MspInit+0xb4>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a4:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <HAL_I2C_MspInit+0xb4>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b8:	2312      	movs	r3, #18
 80016ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ca:	2304      	movs	r3, #4
 80016cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016d4:	4619      	mov	r1, r3
 80016d6:	480b      	ldr	r0, [pc, #44]	@ (8001704 <HAL_I2C_MspInit+0xb8>)
 80016d8:	f000 fb2a 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <HAL_I2C_MspInit+0xb4>)
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <HAL_I2C_MspInit+0xb4>)
 80016e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <HAL_I2C_MspInit+0xb4>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016f4:	bf00      	nop
 80016f6:	37b0      	adds	r7, #176	@ 0xb0
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40005400 	.word	0x40005400
 8001700:	40021000 	.word	0x40021000
 8001704:	48000400 	.word	0x48000400

08001708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0ac      	sub	sp, #176	@ 0xb0
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2288      	movs	r2, #136	@ 0x88
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f004 f92e 	bl	800598a <memset>
  if(huart->Instance==USART2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a21      	ldr	r2, [pc, #132]	@ (80017b8 <HAL_UART_MspInit+0xb0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d13b      	bne.n	80017b0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001738:	2302      	movs	r3, #2
 800173a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800173c:	2300      	movs	r3, #0
 800173e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4618      	mov	r0, r3
 8001746:	f002 f93d 	bl	80039c4 <HAL_RCCEx_PeriphCLKConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001750:	f7ff ff52 	bl	80015f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001754:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <HAL_UART_MspInit+0xb4>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001758:	4a18      	ldr	r2, [pc, #96]	@ (80017bc <HAL_UART_MspInit+0xb4>)
 800175a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800175e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001760:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <HAL_UART_MspInit+0xb4>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <HAL_UART_MspInit+0xb4>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001770:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <HAL_UART_MspInit+0xb4>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001778:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <HAL_UART_MspInit+0xb4>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001784:	230c      	movs	r3, #12
 8001786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800179c:	2307      	movs	r3, #7
 800179e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017a6:	4619      	mov	r1, r3
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ac:	f000 fac0 	bl	8001d30 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80017b0:	bf00      	nop
 80017b2:	37b0      	adds	r7, #176	@ 0xb0
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40004400 	.word	0x40004400
 80017bc:	40021000 	.word	0x40021000

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <NMI_Handler+0x4>

080017c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <MemManage_Handler+0x4>

080017d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001816:	f000 f961 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}

0800181e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  return 1;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_kill>:

int _kill(int pid, int sig)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001838:	f004 f8fa 	bl	8005a30 <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	2216      	movs	r2, #22
 8001840:	601a      	str	r2, [r3, #0]
  return -1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_exit>:

void _exit (int status)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001856:	f04f 31ff 	mov.w	r1, #4294967295
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ffe7 	bl	800182e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <_exit+0x12>

08001864 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e00a      	b.n	800188c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001876:	f3af 8000 	nop.w
 800187a:	4601      	mov	r1, r0
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	60ba      	str	r2, [r7, #8]
 8001882:	b2ca      	uxtb	r2, r1
 8001884:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	dbf0      	blt.n	8001876 <_read+0x12>
  }

  return len;
 8001894:	687b      	ldr	r3, [r7, #4]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	e009      	b.n	80018c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	60ba      	str	r2, [r7, #8]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dbf1      	blt.n	80018b0 <_write+0x12>
  }
  return len;
 80018cc:	687b      	ldr	r3, [r7, #4]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <_close>:

int _close(int file)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_isatty>:

int _isatty(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a14      	ldr	r2, [pc, #80]	@ (800199c <_sbrk+0x5c>)
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <_sbrk+0x60>)
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_sbrk+0x64>)
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <_sbrk+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	429a      	cmp	r2, r3
 800196e:	d207      	bcs.n	8001980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001970:	f004 f85e 	bl	8005a30 <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	220c      	movs	r2, #12
 8001978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e009      	b.n	8001994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001986:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <_sbrk+0x64>)
 8001990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20018000 	.word	0x20018000
 80019a0:	00000400 	.word	0x00000400
 80019a4:	200002fc 	.word	0x200002fc
 80019a8:	20000450 	.word	0x20000450

080019ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <SystemInit+0x20>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b6:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <SystemInit+0x20>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019d4:	f7ff ffea 	bl	80019ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d8:	480c      	ldr	r0, [pc, #48]	@ (8001a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80019da:	490d      	ldr	r1, [pc, #52]	@ (8001a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a14 <LoopForever+0xe>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f0:	4c0a      	ldr	r4, [pc, #40]	@ (8001a1c <LoopForever+0x16>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019fe:	f004 f81d 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a02:	f7ff fa49 	bl	8000e98 <main>

08001a06 <LoopForever>:

LoopForever:
    b LoopForever
 8001a06:	e7fe      	b.n	8001a06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a14:	08007f40 	.word	0x08007f40
  ldr r2, =_sbss
 8001a18:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a1c:	20000450 	.word	0x20000450

08001a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC1_2_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <HAL_Init+0x3c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a0b      	ldr	r2, [pc, #44]	@ (8001a60 <HAL_Init+0x3c>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	f000 f944 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 f80f 	bl	8001a64 <HAL_InitTick>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	71fb      	strb	r3, [r7, #7]
 8001a50:	e001      	b.n	8001a56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a52:	f7ff fdd7 	bl	8001604 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a56:	79fb      	ldrb	r3, [r7, #7]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40022000 	.word	0x40022000

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a70:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <HAL_InitTick+0x6c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d023      	beq.n	8001ac0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <HAL_InitTick+0x70>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <HAL_InitTick+0x6c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f941 	bl	8001d16 <HAL_SYSTICK_Config>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10f      	bne.n	8001aba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d809      	bhi.n	8001ab4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f000 f919 	bl	8001cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aac:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <HAL_InitTick+0x74>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e007      	b.n	8001ac4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	e004      	b.n	8001ac4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	e001      	b.n	8001ac4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008
 8001b00:	20000300 	.word	0x20000300

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000300 	.word	0x20000300

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000008 	.word	0x20000008

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff47 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff5c 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffb0 	bl	8001c84 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3e:	e17f      	b.n	8002040 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8171 	beq.w	800203a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d005      	beq.n	8001d70 <HAL_GPIO_Init+0x40>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d130      	bne.n	8001dd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001da6:	2201      	movs	r2, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	f003 0201 	and.w	r2, r3, #1
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d118      	bne.n	8001e10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001de4:	2201      	movs	r2, #1
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	f003 0201 	and.w	r2, r3, #1
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d017      	beq.n	8001e4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d123      	bne.n	8001ea0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	6939      	ldr	r1, [r7, #16]
 8001e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80ac 	beq.w	800203a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	4b5f      	ldr	r3, [pc, #380]	@ (8002060 <HAL_GPIO_Init+0x330>)
 8001ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8002060 <HAL_GPIO_Init+0x330>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eee:	4b5c      	ldr	r3, [pc, #368]	@ (8002060 <HAL_GPIO_Init+0x330>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001efa:	4a5a      	ldr	r2, [pc, #360]	@ (8002064 <HAL_GPIO_Init+0x334>)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f24:	d025      	beq.n	8001f72 <HAL_GPIO_Init+0x242>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4f      	ldr	r2, [pc, #316]	@ (8002068 <HAL_GPIO_Init+0x338>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01f      	beq.n	8001f6e <HAL_GPIO_Init+0x23e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4e      	ldr	r2, [pc, #312]	@ (800206c <HAL_GPIO_Init+0x33c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d019      	beq.n	8001f6a <HAL_GPIO_Init+0x23a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4d      	ldr	r2, [pc, #308]	@ (8002070 <HAL_GPIO_Init+0x340>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0x236>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4c      	ldr	r2, [pc, #304]	@ (8002074 <HAL_GPIO_Init+0x344>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <HAL_GPIO_Init+0x232>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4b      	ldr	r2, [pc, #300]	@ (8002078 <HAL_GPIO_Init+0x348>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x22e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4a      	ldr	r2, [pc, #296]	@ (800207c <HAL_GPIO_Init+0x34c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_GPIO_Init+0x22a>
 8001f56:	2306      	movs	r3, #6
 8001f58:	e00c      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	e00a      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e008      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e004      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f72:	2300      	movs	r3, #0
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	f002 0203 	and.w	r2, r2, #3
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f84:	4937      	ldr	r1, [pc, #220]	@ (8002064 <HAL_GPIO_Init+0x334>)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f92:	4b3b      	ldr	r3, [pc, #236]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fb6:	4a32      	ldr	r2, [pc, #200]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fbc:	4b30      	ldr	r3, [pc, #192]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fe0:	4a27      	ldr	r2, [pc, #156]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fe6:	4b26      	ldr	r3, [pc, #152]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800200a:	4a1d      	ldr	r2, [pc, #116]	@ (8002080 <HAL_GPIO_Init+0x350>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002034:	4a12      	ldr	r2, [pc, #72]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	f47f ae78 	bne.w	8001d40 <HAL_GPIO_Init+0x10>
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40010000 	.word	0x40010000
 8002068:	48000400 	.word	0x48000400
 800206c:	48000800 	.word	0x48000800
 8002070:	48000c00 	.word	0x48000c00
 8002074:	48001000 	.word	0x48001000
 8002078:	48001400 	.word	0x48001400
 800207c:	48001800 	.word	0x48001800
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e08d      	b.n	80021e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fab6 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2224      	movs	r2, #36	@ 0x24
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002104:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002114:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	e006      	b.n	800213c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800213a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d108      	bne.n	8002156 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	e007      	b.n	8002166 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002178:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002188:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69d9      	ldr	r1, [r3, #28]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1a      	ldr	r2, [r3, #32]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	817b      	strh	r3, [r7, #10]
 80021fe:	460b      	mov	r3, r1
 8002200:	813b      	strh	r3, [r7, #8]
 8002202:	4613      	mov	r3, r2
 8002204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b20      	cmp	r3, #32
 8002210:	f040 80f9 	bne.w	8002406 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_I2C_Mem_Write+0x34>
 800221a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002226:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0ed      	b.n	8002408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_I2C_Mem_Write+0x4e>
 8002236:	2302      	movs	r3, #2
 8002238:	e0e6      	b.n	8002408 <HAL_I2C_Mem_Write+0x21c>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002242:	f7ff fc5f 	bl	8001b04 <HAL_GetTick>
 8002246:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2319      	movs	r3, #25
 800224e:	2201      	movs	r2, #1
 8002250:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fac3 	bl	80027e0 <I2C_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0d1      	b.n	8002408 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2221      	movs	r2, #33	@ 0x21
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2240      	movs	r2, #64	@ 0x40
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a3a      	ldr	r2, [r7, #32]
 800227e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800228c:	88f8      	ldrh	r0, [r7, #6]
 800228e:	893a      	ldrh	r2, [r7, #8]
 8002290:	8979      	ldrh	r1, [r7, #10]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	4603      	mov	r3, r0
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f9d3 	bl	8002648 <I2C_RequestMemoryWrite>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0a9      	b.n	8002408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2bff      	cmp	r3, #255	@ 0xff
 80022bc:	d90e      	bls.n	80022dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	22ff      	movs	r2, #255	@ 0xff
 80022c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	8979      	ldrh	r1, [r7, #10]
 80022cc:	2300      	movs	r3, #0
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fc47 	bl	8002b68 <I2C_TransferConfig>
 80022da:	e00f      	b.n	80022fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	8979      	ldrh	r1, [r7, #10]
 80022ee:	2300      	movs	r3, #0
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fc36 	bl	8002b68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fac6 	bl	8002892 <I2C_WaitOnTXISFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e07b      	b.n	8002408 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d034      	beq.n	80023b4 <HAL_I2C_Mem_Write+0x1c8>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	d130      	bne.n	80023b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002358:	2200      	movs	r2, #0
 800235a:	2180      	movs	r1, #128	@ 0x80
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fa3f 	bl	80027e0 <I2C_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e04d      	b.n	8002408 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	2bff      	cmp	r3, #255	@ 0xff
 8002374:	d90e      	bls.n	8002394 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	22ff      	movs	r2, #255	@ 0xff
 800237a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002380:	b2da      	uxtb	r2, r3
 8002382:	8979      	ldrh	r1, [r7, #10]
 8002384:	2300      	movs	r3, #0
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fbeb 	bl	8002b68 <I2C_TransferConfig>
 8002392:	e00f      	b.n	80023b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	8979      	ldrh	r1, [r7, #10]
 80023a6:	2300      	movs	r3, #0
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fbda 	bl	8002b68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d19e      	bne.n	80022fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 faac 	bl	8002920 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e01a      	b.n	8002408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2220      	movs	r2, #32
 80023d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <HAL_I2C_Mem_Write+0x224>)
 80023e6:	400b      	ands	r3, r1
 80023e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	fe00e800 	.word	0xfe00e800

08002414 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	817b      	strh	r3, [r7, #10]
 8002426:	460b      	mov	r3, r1
 8002428:	813b      	strh	r3, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	f040 80fd 	bne.w	8002636 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_I2C_Mem_Read+0x34>
 8002442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800244e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0f1      	b.n	8002638 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_I2C_Mem_Read+0x4e>
 800245e:	2302      	movs	r3, #2
 8002460:	e0ea      	b.n	8002638 <HAL_I2C_Mem_Read+0x224>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800246a:	f7ff fb4b 	bl	8001b04 <HAL_GetTick>
 800246e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2319      	movs	r3, #25
 8002476:	2201      	movs	r2, #1
 8002478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f9af 	bl	80027e0 <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d5      	b.n	8002638 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2222      	movs	r2, #34	@ 0x22
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2240      	movs	r2, #64	@ 0x40
 8002498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a3a      	ldr	r2, [r7, #32]
 80024a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024b4:	88f8      	ldrh	r0, [r7, #6]
 80024b6:	893a      	ldrh	r2, [r7, #8]
 80024b8:	8979      	ldrh	r1, [r7, #10]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	4603      	mov	r3, r0
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f913 	bl	80026f0 <I2C_RequestMemoryRead>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0ad      	b.n	8002638 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2bff      	cmp	r3, #255	@ 0xff
 80024e4:	d90e      	bls.n	8002504 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	8979      	ldrh	r1, [r7, #10]
 80024f4:	4b52      	ldr	r3, [pc, #328]	@ (8002640 <HAL_I2C_Mem_Read+0x22c>)
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fb33 	bl	8002b68 <I2C_TransferConfig>
 8002502:	e00f      	b.n	8002524 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	b2da      	uxtb	r2, r3
 8002514:	8979      	ldrh	r1, [r7, #10]
 8002516:	4b4a      	ldr	r3, [pc, #296]	@ (8002640 <HAL_I2C_Mem_Read+0x22c>)
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fb22 	bl	8002b68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252a:	2200      	movs	r2, #0
 800252c:	2104      	movs	r1, #4
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f956 	bl	80027e0 <I2C_WaitOnFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e07c      	b.n	8002638 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d034      	beq.n	80025e4 <HAL_I2C_Mem_Read+0x1d0>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257e:	2b00      	cmp	r3, #0
 8002580:	d130      	bne.n	80025e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002588:	2200      	movs	r2, #0
 800258a:	2180      	movs	r1, #128	@ 0x80
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f927 	bl	80027e0 <I2C_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e04d      	b.n	8002638 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2bff      	cmp	r3, #255	@ 0xff
 80025a4:	d90e      	bls.n	80025c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	8979      	ldrh	r1, [r7, #10]
 80025b4:	2300      	movs	r3, #0
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fad3 	bl	8002b68 <I2C_TransferConfig>
 80025c2:	e00f      	b.n	80025e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	8979      	ldrh	r1, [r7, #10]
 80025d6:	2300      	movs	r3, #0
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fac2 	bl	8002b68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d19a      	bne.n	8002524 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f994 	bl	8002920 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e01a      	b.n	8002638 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2220      	movs	r2, #32
 8002608:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <HAL_I2C_Mem_Read+0x230>)
 8002616:	400b      	ands	r3, r1
 8002618:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e000      	b.n	8002638 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002636:	2302      	movs	r3, #2
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	80002400 	.word	0x80002400
 8002644:	fe00e800 	.word	0xfe00e800

08002648 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	817b      	strh	r3, [r7, #10]
 800265a:	460b      	mov	r3, r1
 800265c:	813b      	strh	r3, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	8979      	ldrh	r1, [r7, #10]
 8002668:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <I2C_RequestMemoryWrite+0xa4>)
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fa79 	bl	8002b68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	69b9      	ldr	r1, [r7, #24]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f909 	bl	8002892 <I2C_WaitOnTXISFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e02c      	b.n	80026e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002690:	893b      	ldrh	r3, [r7, #8]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	629a      	str	r2, [r3, #40]	@ 0x28
 800269a:	e015      	b.n	80026c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800269c:	893b      	ldrh	r3, [r7, #8]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	69b9      	ldr	r1, [r7, #24]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f8ef 	bl	8002892 <I2C_WaitOnTXISFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e012      	b.n	80026e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026be:	893b      	ldrh	r3, [r7, #8]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2200      	movs	r2, #0
 80026d0:	2180      	movs	r1, #128	@ 0x80
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f884 	bl	80027e0 <I2C_WaitOnFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	80002000 	.word	0x80002000

080026f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	461a      	mov	r2, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	817b      	strh	r3, [r7, #10]
 8002702:	460b      	mov	r3, r1
 8002704:	813b      	strh	r3, [r7, #8]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	8979      	ldrh	r1, [r7, #10]
 8002710:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <I2C_RequestMemoryRead+0xa4>)
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2300      	movs	r3, #0
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 fa26 	bl	8002b68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f8b6 	bl	8002892 <I2C_WaitOnTXISFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e02c      	b.n	800278a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002736:	893b      	ldrh	r3, [r7, #8]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002740:	e015      	b.n	800276e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002742:	893b      	ldrh	r3, [r7, #8]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	b29b      	uxth	r3, r3
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	69b9      	ldr	r1, [r7, #24]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f89c 	bl	8002892 <I2C_WaitOnTXISFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e012      	b.n	800278a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002764:	893b      	ldrh	r3, [r7, #8]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2200      	movs	r2, #0
 8002776:	2140      	movs	r1, #64	@ 0x40
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f831 	bl	80027e0 <I2C_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	80002000 	.word	0x80002000

08002798 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d103      	bne.n	80027b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d007      	beq.n	80027d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	619a      	str	r2, [r3, #24]
  }
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f0:	e03b      	b.n	800286a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f8d6 	bl	80029a8 <I2C_IsErrorOccurred>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e041      	b.n	800288a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d02d      	beq.n	800286a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7ff f979 	bl	8001b04 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <I2C_WaitOnFlagUntilTimeout+0x44>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d122      	bne.n	800286a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	429a      	cmp	r2, r3
 8002840:	d113      	bne.n	800286a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	f043 0220 	orr.w	r2, r3, #32
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e00f      	b.n	800288a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4013      	ands	r3, r2
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	429a      	cmp	r2, r3
 8002886:	d0b4      	beq.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800289e:	e033      	b.n	8002908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f87f 	bl	80029a8 <I2C_IsErrorOccurred>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e031      	b.n	8002918 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ba:	d025      	beq.n	8002908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028bc:	f7ff f922 	bl	8001b04 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d302      	bcc.n	80028d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11a      	bne.n	8002908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d013      	beq.n	8002908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e4:	f043 0220 	orr.w	r2, r3, #32
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e007      	b.n	8002918 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d1c4      	bne.n	80028a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800292c:	e02f      	b.n	800298e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f838 	bl	80029a8 <I2C_IsErrorOccurred>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e02d      	b.n	800299e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002942:	f7ff f8df 	bl	8001b04 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11a      	bne.n	800298e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b20      	cmp	r3, #32
 8002964:	d013      	beq.n	800298e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e007      	b.n	800299e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b20      	cmp	r3, #32
 800299a:	d1c8      	bne.n	800292e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	@ 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d068      	beq.n	8002aa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2210      	movs	r2, #16
 80029da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029dc:	e049      	b.n	8002a72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d045      	beq.n	8002a72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	f7ff f88d 	bl	8001b04 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <I2C_IsErrorOccurred+0x54>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d13a      	bne.n	8002a72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a1e:	d121      	bne.n	8002a64 <I2C_IsErrorOccurred+0xbc>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a26:	d01d      	beq.n	8002a64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d01a      	beq.n	8002a64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a3e:	f7ff f861 	bl	8001b04 <HAL_GetTick>
 8002a42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a44:	e00e      	b.n	8002a64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a46:	f7ff f85d 	bl	8001b04 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b19      	cmp	r3, #25
 8002a52:	d907      	bls.n	8002a64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f043 0320 	orr.w	r3, r3, #32
 8002a5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002a62:	e006      	b.n	8002a72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d1e9      	bne.n	8002a46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d003      	beq.n	8002a88 <I2C_IsErrorOccurred+0xe0>
 8002a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0aa      	beq.n	80029de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2220      	movs	r2, #32
 8002a96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ac8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00b      	beq.n	8002b14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01c      	beq.n	8002b56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff fe3b 	bl	8002798 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <I2C_IsErrorOccurred+0x1bc>)
 8002b2e:	400b      	ands	r3, r1
 8002b30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002b56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3728      	adds	r7, #40	@ 0x28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	fe00e800 	.word	0xfe00e800

08002b68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	817b      	strh	r3, [r7, #10]
 8002b76:	4613      	mov	r3, r2
 8002b78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b7a:	897b      	ldrh	r3, [r7, #10]
 8002b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b80:	7a7b      	ldrb	r3, [r7, #9]
 8002b82:	041b      	lsls	r3, r3, #16
 8002b84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	0d5b      	lsrs	r3, r3, #21
 8002ba2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ba6:	4b08      	ldr	r3, [pc, #32]	@ (8002bc8 <I2C_TransferConfig+0x60>)
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	43db      	mvns	r3, r3
 8002bac:	ea02 0103 	and.w	r1, r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	03ff63ff 	.word	0x03ff63ff

08002bcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d138      	bne.n	8002c54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e032      	b.n	8002c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	@ 0x24
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d139      	bne.n	8002cec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e033      	b.n	8002cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2224      	movs	r2, #36	@ 0x24
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002cb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40007000 	.word	0x40007000

08002d18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d26:	d130      	bne.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d28:	4b23      	ldr	r3, [pc, #140]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d34:	d038      	beq.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d36:	4b20      	ldr	r3, [pc, #128]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d46:	4b1d      	ldr	r3, [pc, #116]	@ (8002dbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2232      	movs	r2, #50	@ 0x32
 8002d4c:	fb02 f303 	mul.w	r3, r2, r3
 8002d50:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	0c9b      	lsrs	r3, r3, #18
 8002d58:	3301      	adds	r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d5c:	e002      	b.n	8002d64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d64:	4b14      	ldr	r3, [pc, #80]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d70:	d102      	bne.n	8002d78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f2      	bne.n	8002d5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d78:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d84:	d110      	bne.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e00f      	b.n	8002daa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d96:	d007      	beq.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d98:	4b07      	ldr	r3, [pc, #28]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002da0:	4a05      	ldr	r2, [pc, #20]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002da6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	431bde83 	.word	0x431bde83

08002dc4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e3ca      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	4b97      	ldr	r3, [pc, #604]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de0:	4b94      	ldr	r3, [pc, #592]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80e4 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_RCC_OscConfig+0x4a>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	f040 808b 	bne.w	8002f1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	f040 8087 	bne.w	8002f1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e0e:	4b89      	ldr	r3, [pc, #548]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x62>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e3a2      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	4b82      	ldr	r3, [pc, #520]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_RCC_OscConfig+0x7c>
 8002e36:	4b7f      	ldr	r3, [pc, #508]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e3e:	e005      	b.n	8002e4c <HAL_RCC_OscConfig+0x88>
 8002e40:	4b7c      	ldr	r3, [pc, #496]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d223      	bcs.n	8002e98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fd55 	bl	8003904 <RCC_SetFlashLatencyFromMSIRange>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e383      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e64:	4b73      	ldr	r3, [pc, #460]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a72      	ldr	r2, [pc, #456]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b70      	ldr	r3, [pc, #448]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	496d      	ldr	r1, [pc, #436]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e82:	4b6c      	ldr	r3, [pc, #432]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	4968      	ldr	r1, [pc, #416]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
 8002e96:	e025      	b.n	8002ee4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e98:	4b66      	ldr	r3, [pc, #408]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a65      	ldr	r2, [pc, #404]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e9e:	f043 0308 	orr.w	r3, r3, #8
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b63      	ldr	r3, [pc, #396]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4960      	ldr	r1, [pc, #384]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	495b      	ldr	r1, [pc, #364]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fd15 	bl	8003904 <RCC_SetFlashLatencyFromMSIRange>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e343      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee4:	f000 fc4a 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b52      	ldr	r3, [pc, #328]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	4950      	ldr	r1, [pc, #320]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	4a4e      	ldr	r2, [pc, #312]	@ (800303c <HAL_RCC_OscConfig+0x278>)
 8002f02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f04:	4b4e      	ldr	r3, [pc, #312]	@ (8003040 <HAL_RCC_OscConfig+0x27c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fdab 	bl	8001a64 <HAL_InitTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d052      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	e327      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d032      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f24:	4b43      	ldr	r3, [pc, #268]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a42      	ldr	r2, [pc, #264]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f30:	f7fe fde8 	bl	8001b04 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f38:	f7fe fde4 	bl	8001b04 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e310      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f56:	4b37      	ldr	r3, [pc, #220]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a36      	ldr	r2, [pc, #216]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	f043 0308 	orr.w	r3, r3, #8
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b34      	ldr	r3, [pc, #208]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4931      	ldr	r1, [pc, #196]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f74:	4b2f      	ldr	r3, [pc, #188]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	492c      	ldr	r1, [pc, #176]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
 8002f88:	e01a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a29      	ldr	r2, [pc, #164]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f96:	f7fe fdb5 	bl	8001b04 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f9e:	f7fe fdb1 	bl	8001b04 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e2dd      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fb0:	4b20      	ldr	r3, [pc, #128]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x1da>
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d074      	beq.n	80030b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d005      	beq.n	8002fde <HAL_RCC_OscConfig+0x21a>
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fde:	4b15      	ldr	r3, [pc, #84]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d064      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d160      	bne.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e2ba      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x24a>
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0b      	ldr	r2, [pc, #44]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e026      	b.n	800305c <HAL_RCC_OscConfig+0x298>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003016:	d115      	bne.n	8003044 <HAL_RCC_OscConfig+0x280>
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a05      	ldr	r2, [pc, #20]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 800301e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b03      	ldr	r3, [pc, #12]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a02      	ldr	r2, [pc, #8]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	e014      	b.n	800305c <HAL_RCC_OscConfig+0x298>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	08007b74 	.word	0x08007b74
 800303c:	20000000 	.word	0x20000000
 8003040:	20000004 	.word	0x20000004
 8003044:	4ba0      	ldr	r3, [pc, #640]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a9f      	ldr	r2, [pc, #636]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b9d      	ldr	r3, [pc, #628]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a9c      	ldr	r2, [pc, #624]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800305a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fd4e 	bl	8001b04 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe fd4a 	bl	8001b04 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	@ 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e276      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800307e:	4b92      	ldr	r3, [pc, #584]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x2a8>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe fd3a 	bl	8001b04 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003094:	f7fe fd36 	bl	8001b04 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	@ 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e262      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030a6:	4b88      	ldr	r3, [pc, #544]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x2d0>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d060      	beq.n	8003184 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_OscConfig+0x310>
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d119      	bne.n	8003102 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d116      	bne.n	8003102 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d4:	4b7c      	ldr	r3, [pc, #496]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_OscConfig+0x328>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e23f      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4b76      	ldr	r3, [pc, #472]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	4973      	ldr	r1, [pc, #460]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003100:	e040      	b.n	8003184 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d023      	beq.n	8003152 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310a:	4b6f      	ldr	r3, [pc, #444]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6e      	ldr	r2, [pc, #440]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fe fcf5 	bl	8001b04 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311e:	f7fe fcf1 	bl	8001b04 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e21d      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003130:	4b65      	ldr	r3, [pc, #404]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313c:	4b62      	ldr	r3, [pc, #392]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	061b      	lsls	r3, r3, #24
 800314a:	495f      	ldr	r1, [pc, #380]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
 8003150:	e018      	b.n	8003184 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003152:	4b5d      	ldr	r3, [pc, #372]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a5c      	ldr	r2, [pc, #368]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800315c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe fcd1 	bl	8001b04 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f7fe fccd 	bl	8001b04 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1f9      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003178:	4b53      	ldr	r3, [pc, #332]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f0      	bne.n	8003166 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d03c      	beq.n	800320a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003198:	4b4b      	ldr	r3, [pc, #300]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800319a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800319e:	4a4a      	ldr	r2, [pc, #296]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe fcac 	bl	8001b04 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b0:	f7fe fca8 	bl	8001b04 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e1d4      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80031c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ef      	beq.n	80031b0 <HAL_RCC_OscConfig+0x3ec>
 80031d0:	e01b      	b.n	800320a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d2:	4b3d      	ldr	r3, [pc, #244]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80031d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d8:	4a3b      	ldr	r2, [pc, #236]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fe fc8f 	bl	8001b04 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ea:	f7fe fc8b 	bl	8001b04 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e1b7      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031fc:	4b32      	ldr	r3, [pc, #200]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80031fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1ef      	bne.n	80031ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80a6 	beq.w	8003364 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800321c:	4b2a      	ldr	r3, [pc, #168]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10d      	bne.n	8003244 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	4b27      	ldr	r3, [pc, #156]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322c:	4a26      	ldr	r2, [pc, #152]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800322e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003232:	6593      	str	r3, [r2, #88]	@ 0x58
 8003234:	4b24      	ldr	r3, [pc, #144]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003240:	2301      	movs	r3, #1
 8003242:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003244:	4b21      	ldr	r3, [pc, #132]	@ (80032cc <HAL_RCC_OscConfig+0x508>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d118      	bne.n	8003282 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003250:	4b1e      	ldr	r3, [pc, #120]	@ (80032cc <HAL_RCC_OscConfig+0x508>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1d      	ldr	r2, [pc, #116]	@ (80032cc <HAL_RCC_OscConfig+0x508>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325c:	f7fe fc52 	bl	8001b04 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003264:	f7fe fc4e 	bl	8001b04 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e17a      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003276:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <HAL_RCC_OscConfig+0x508>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d108      	bne.n	800329c <HAL_RCC_OscConfig+0x4d8>
 800328a:	4b0f      	ldr	r3, [pc, #60]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003290:	4a0d      	ldr	r2, [pc, #52]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800329a:	e029      	b.n	80032f0 <HAL_RCC_OscConfig+0x52c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d115      	bne.n	80032d0 <HAL_RCC_OscConfig+0x50c>
 80032a4:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032aa:	4a07      	ldr	r2, [pc, #28]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032b4:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ba:	4a03      	ldr	r2, [pc, #12]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032c4:	e014      	b.n	80032f0 <HAL_RCC_OscConfig+0x52c>
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40007000 	.word	0x40007000
 80032d0:	4b9c      	ldr	r3, [pc, #624]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	4a9b      	ldr	r2, [pc, #620]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032e0:	4b98      	ldr	r3, [pc, #608]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e6:	4a97      	ldr	r2, [pc, #604]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80032e8:	f023 0304 	bic.w	r3, r3, #4
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d016      	beq.n	8003326 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fe fc04 	bl	8001b04 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fe fc00 	bl	8001b04 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e12a      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003316:	4b8b      	ldr	r3, [pc, #556]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ed      	beq.n	8003300 <HAL_RCC_OscConfig+0x53c>
 8003324:	e015      	b.n	8003352 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003326:	f7fe fbed 	bl	8001b04 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800332c:	e00a      	b.n	8003344 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332e:	f7fe fbe9 	bl	8001b04 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800333c:	4293      	cmp	r3, r2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e113      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003344:	4b7f      	ldr	r3, [pc, #508]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1ed      	bne.n	800332e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003352:	7ffb      	ldrb	r3, [r7, #31]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d105      	bne.n	8003364 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003358:	4b7a      	ldr	r3, [pc, #488]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335c:	4a79      	ldr	r2, [pc, #484]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800335e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003362:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80fe 	beq.w	800356a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	2b02      	cmp	r3, #2
 8003374:	f040 80d0 	bne.w	8003518 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003378:	4b72      	ldr	r3, [pc, #456]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	429a      	cmp	r2, r3
 800338a:	d130      	bne.n	80033ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	3b01      	subs	r3, #1
 8003398:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d127      	bne.n	80033ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d11f      	bne.n	80033ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033b8:	2a07      	cmp	r2, #7
 80033ba:	bf14      	ite	ne
 80033bc:	2201      	movne	r2, #1
 80033be:	2200      	moveq	r2, #0
 80033c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d113      	bne.n	80033ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	3b01      	subs	r3, #1
 80033d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	3b01      	subs	r3, #1
 80033e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d06e      	beq.n	80034cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d069      	beq.n	80034c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033f4:	4b53      	ldr	r3, [pc, #332]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003400:	4b50      	ldr	r3, [pc, #320]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0ad      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003410:	4b4c      	ldr	r3, [pc, #304]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a4b      	ldr	r2, [pc, #300]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800341a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800341c:	f7fe fb72 	bl	8001b04 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003424:	f7fe fb6e 	bl	8001b04 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e09a      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003436:	4b43      	ldr	r3, [pc, #268]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003442:	4b40      	ldr	r3, [pc, #256]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	4b40      	ldr	r3, [pc, #256]	@ (8003548 <HAL_RCC_OscConfig+0x784>)
 8003448:	4013      	ands	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003452:	3a01      	subs	r2, #1
 8003454:	0112      	lsls	r2, r2, #4
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800345c:	0212      	lsls	r2, r2, #8
 800345e:	4311      	orrs	r1, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003464:	0852      	lsrs	r2, r2, #1
 8003466:	3a01      	subs	r2, #1
 8003468:	0552      	lsls	r2, r2, #21
 800346a:	4311      	orrs	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003470:	0852      	lsrs	r2, r2, #1
 8003472:	3a01      	subs	r2, #1
 8003474:	0652      	lsls	r2, r2, #25
 8003476:	4311      	orrs	r1, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800347c:	0912      	lsrs	r2, r2, #4
 800347e:	0452      	lsls	r2, r2, #17
 8003480:	430a      	orrs	r2, r1
 8003482:	4930      	ldr	r1, [pc, #192]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003484:	4313      	orrs	r3, r2
 8003486:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003488:	4b2e      	ldr	r3, [pc, #184]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2d      	ldr	r2, [pc, #180]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800348e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003492:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003494:	4b2b      	ldr	r3, [pc, #172]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a2a      	ldr	r2, [pc, #168]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800349a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800349e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034a0:	f7fe fb30 	bl	8001b04 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fe fb2c 	bl	8001b04 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e058      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ba:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034c6:	e050      	b.n	800356a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e04f      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d148      	bne.n	800356a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e4:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a16      	ldr	r2, [pc, #88]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034f0:	f7fe fb08 	bl	8001b04 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe fb04 	bl	8001b04 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e030      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x734>
 8003516:	e028      	b.n	800356a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d023      	beq.n	8003566 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351e:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a08      	ldr	r2, [pc, #32]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003524:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fe faeb 	bl	8001b04 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003530:	e00c      	b.n	800354c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003532:	f7fe fae7 	bl	8001b04 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d905      	bls.n	800354c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e013      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
 8003544:	40021000 	.word	0x40021000
 8003548:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354c:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <HAL_RCC_OscConfig+0x7b0>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ec      	bne.n	8003532 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003558:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_RCC_OscConfig+0x7b0>)
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	4905      	ldr	r1, [pc, #20]	@ (8003574 <HAL_RCC_OscConfig+0x7b0>)
 800355e:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <HAL_RCC_OscConfig+0x7b4>)
 8003560:	4013      	ands	r3, r2
 8003562:	60cb      	str	r3, [r1, #12]
 8003564:	e001      	b.n	800356a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	feeefffc 	.word	0xfeeefffc

0800357c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0e7      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b75      	ldr	r3, [pc, #468]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d910      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b72      	ldr	r3, [pc, #456]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 0207 	bic.w	r2, r3, #7
 80035a6:	4970      	ldr	r1, [pc, #448]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0cf      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d010      	beq.n	80035ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	4b66      	ldr	r3, [pc, #408]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d8:	429a      	cmp	r2, r3
 80035da:	d908      	bls.n	80035ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035dc:	4b63      	ldr	r3, [pc, #396]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4960      	ldr	r1, [pc, #384]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d04c      	beq.n	8003694 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003602:	4b5a      	ldr	r3, [pc, #360]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d121      	bne.n	8003652 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0a6      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800361a:	4b54      	ldr	r3, [pc, #336]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d115      	bne.n	8003652 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e09a      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003632:	4b4e      	ldr	r3, [pc, #312]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e08e      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003642:	4b4a      	ldr	r3, [pc, #296]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e086      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003652:	4b46      	ldr	r3, [pc, #280]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f023 0203 	bic.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4943      	ldr	r1, [pc, #268]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003664:	f7fe fa4e 	bl	8001b04 <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	e00a      	b.n	8003682 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366c:	f7fe fa4a 	bl	8001b04 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e06e      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	4b3a      	ldr	r3, [pc, #232]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 020c 	and.w	r2, r3, #12
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	429a      	cmp	r2, r3
 8003692:	d1eb      	bne.n	800366c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	4b31      	ldr	r3, [pc, #196]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d208      	bcs.n	80036c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b2e      	ldr	r3, [pc, #184]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	492b      	ldr	r1, [pc, #172]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c2:	4b29      	ldr	r3, [pc, #164]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d210      	bcs.n	80036f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d0:	4b25      	ldr	r3, [pc, #148]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 0207 	bic.w	r2, r3, #7
 80036d8:	4923      	ldr	r1, [pc, #140]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e0:	4b21      	ldr	r3, [pc, #132]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e036      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fe:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4918      	ldr	r1, [pc, #96]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d009      	beq.n	8003730 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371c:	4b13      	ldr	r3, [pc, #76]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4910      	ldr	r1, [pc, #64]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 800372c:	4313      	orrs	r3, r2
 800372e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003730:	f000 f824 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	490b      	ldr	r1, [pc, #44]	@ (8003770 <HAL_RCC_ClockConfig+0x1f4>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
 800374c:	4a09      	ldr	r2, [pc, #36]	@ (8003774 <HAL_RCC_ClockConfig+0x1f8>)
 800374e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003750:	4b09      	ldr	r3, [pc, #36]	@ (8003778 <HAL_RCC_ClockConfig+0x1fc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe f985 	bl	8001a64 <HAL_InitTick>
 800375a:	4603      	mov	r3, r0
 800375c:	72fb      	strb	r3, [r7, #11]

  return status;
 800375e:	7afb      	ldrb	r3, [r7, #11]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40022000 	.word	0x40022000
 800376c:	40021000 	.word	0x40021000
 8003770:	08007b74 	.word	0x08007b74
 8003774:	20000000 	.word	0x20000000
 8003778:	20000004 	.word	0x20000004

0800377c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	@ 0x24
 8003780:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	2300      	movs	r3, #0
 8003788:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378a:	4b3e      	ldr	r3, [pc, #248]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003794:	4b3b      	ldr	r3, [pc, #236]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x34>
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d121      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d11e      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037b0:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037bc:	4b31      	ldr	r3, [pc, #196]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 80037be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e005      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10d      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d102      	bne.n	80037fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037f4:	4b25      	ldr	r3, [pc, #148]	@ (800388c <HAL_RCC_GetSysClockFreq+0x110>)
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e004      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003800:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x114>)
 8003802:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d134      	bne.n	8003874 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800380a:	4b1e      	ldr	r3, [pc, #120]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d003      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0xa6>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d003      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0xac>
 8003820:	e005      	b.n	800382e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003822:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <HAL_RCC_GetSysClockFreq+0x110>)
 8003824:	617b      	str	r3, [r7, #20]
      break;
 8003826:	e005      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003828:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x114>)
 800382a:	617b      	str	r3, [r7, #20]
      break;
 800382c:	e002      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	617b      	str	r3, [r7, #20]
      break;
 8003832:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003834:	4b13      	ldr	r3, [pc, #76]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	3301      	adds	r3, #1
 8003840:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003842:	4b10      	ldr	r3, [pc, #64]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	fb03 f202 	mul.w	r2, r3, r2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800385a:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	0e5b      	lsrs	r3, r3, #25
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	3301      	adds	r3, #1
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003874:	69bb      	ldr	r3, [r7, #24]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3724      	adds	r7, #36	@ 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	08007b8c 	.word	0x08007b8c
 800388c:	00f42400 	.word	0x00f42400
 8003890:	007a1200 	.word	0x007a1200

08003894 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b03      	ldr	r3, [pc, #12]	@ (80038a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000000 	.word	0x20000000

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038b0:	f7ff fff0 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4904      	ldr	r1, [pc, #16]	@ (80038d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	08007b84 	.word	0x08007b84

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038dc:	f7ff ffda 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0adb      	lsrs	r3, r3, #11
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4904      	ldr	r1, [pc, #16]	@ (8003900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	08007b84 	.word	0x08007b84

08003904 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003910:	4b2a      	ldr	r3, [pc, #168]	@ (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800391c:	f7ff f9ee 	bl	8002cfc <HAL_PWREx_GetVoltageRange>
 8003920:	6178      	str	r0, [r7, #20]
 8003922:	e014      	b.n	800394e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003924:	4b25      	ldr	r3, [pc, #148]	@ (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003928:	4a24      	ldr	r2, [pc, #144]	@ (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800392e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003930:	4b22      	ldr	r3, [pc, #136]	@ (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800393c:	f7ff f9de 	bl	8002cfc <HAL_PWREx_GetVoltageRange>
 8003940:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003942:	4b1e      	ldr	r3, [pc, #120]	@ (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003946:	4a1d      	ldr	r2, [pc, #116]	@ (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003948:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800394c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003954:	d10b      	bne.n	800396e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b80      	cmp	r3, #128	@ 0x80
 800395a:	d919      	bls.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003960:	d902      	bls.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003962:	2302      	movs	r3, #2
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	e013      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003968:	2301      	movs	r3, #1
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	e010      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b80      	cmp	r3, #128	@ 0x80
 8003972:	d902      	bls.n	800397a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003974:	2303      	movs	r3, #3
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	e00a      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b80      	cmp	r3, #128	@ 0x80
 800397e:	d102      	bne.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003980:	2302      	movs	r3, #2
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	e004      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b70      	cmp	r3, #112	@ 0x70
 800398a:	d101      	bne.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800398c:	2301      	movs	r3, #1
 800398e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003990:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 0207 	bic.w	r2, r3, #7
 8003998:	4909      	ldr	r1, [pc, #36]	@ (80039c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039a0:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d001      	beq.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40022000 	.word	0x40022000

080039c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039cc:	2300      	movs	r3, #0
 80039ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039d0:	2300      	movs	r3, #0
 80039d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d041      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039e8:	d02a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039ee:	d824      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039f4:	d008      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039fa:	d81e      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a04:	d010      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a06:	e018      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a08:	4b86      	ldr	r3, [pc, #536]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a85      	ldr	r2, [pc, #532]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a12:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a14:	e015      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fabb 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a26:	e00c      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3320      	adds	r3, #32
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fba6 	bl	8004180 <RCCEx_PLLSAI2_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a38:	e003      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a3e:	e000      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10b      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a48:	4b76      	ldr	r3, [pc, #472]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a56:	4973      	ldr	r1, [pc, #460]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a5e:	e001      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d041      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a78:	d02a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a7e:	d824      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a84:	d008      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a8a:	d81e      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a94:	d010      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a96:	e018      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a98:	4b62      	ldr	r3, [pc, #392]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a61      	ldr	r2, [pc, #388]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aa4:	e015      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fa73 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ab6:	e00c      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3320      	adds	r3, #32
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fb5e 	bl	8004180 <RCCEx_PLLSAI2_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ac8:	e003      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	74fb      	strb	r3, [r7, #19]
      break;
 8003ace:	e000      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad2:	7cfb      	ldrb	r3, [r7, #19]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ad8:	4b52      	ldr	r3, [pc, #328]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ade:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ae6:	494f      	ldr	r1, [pc, #316]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003aee:	e001      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a0 	beq.w	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b02:	2300      	movs	r3, #0
 8003b04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b06:	4b47      	ldr	r3, [pc, #284]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b16:	2300      	movs	r3, #0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1c:	4b41      	ldr	r3, [pc, #260]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b20:	4a40      	ldr	r2, [pc, #256]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b28:	4b3e      	ldr	r3, [pc, #248]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b34:	2301      	movs	r3, #1
 8003b36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b38:	4b3b      	ldr	r3, [pc, #236]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b44:	f7fd ffde 	bl	8001b04 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b4a:	e009      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4c:	f7fd ffda 	bl	8001b04 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d902      	bls.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b5e:	e005      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b60:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ef      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d15c      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b72:	4b2c      	ldr	r3, [pc, #176]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01f      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d019      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b90:	4b24      	ldr	r3, [pc, #144]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b9c:	4b21      	ldr	r3, [pc, #132]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba2:	4a20      	ldr	r2, [pc, #128]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bac:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bbc:	4a19      	ldr	r2, [pc, #100]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d016      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fd ff99 	bl	8001b04 <HAL_GetTick>
 8003bd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd4:	e00b      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fd ff95 	bl	8001b04 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d902      	bls.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	74fb      	strb	r3, [r7, #19]
            break;
 8003bec:	e006      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bee:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ec      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c02:	4b08      	ldr	r3, [pc, #32]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c12:	4904      	ldr	r1, [pc, #16]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c1a:	e009      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	74bb      	strb	r3, [r7, #18]
 8003c20:	e006      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c30:	7c7b      	ldrb	r3, [r7, #17]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d105      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c36:	4b9e      	ldr	r3, [pc, #632]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3a:	4a9d      	ldr	r2, [pc, #628]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c4e:	4b98      	ldr	r3, [pc, #608]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c54:	f023 0203 	bic.w	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5c:	4994      	ldr	r1, [pc, #592]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c70:	4b8f      	ldr	r3, [pc, #572]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	f023 020c 	bic.w	r2, r3, #12
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7e:	498c      	ldr	r1, [pc, #560]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c92:	4b87      	ldr	r3, [pc, #540]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	4983      	ldr	r1, [pc, #524]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cb4:	4b7e      	ldr	r3, [pc, #504]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	497b      	ldr	r1, [pc, #492]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cd6:	4b76      	ldr	r3, [pc, #472]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce4:	4972      	ldr	r1, [pc, #456]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf8:	4b6d      	ldr	r3, [pc, #436]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d06:	496a      	ldr	r1, [pc, #424]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d1a:	4b65      	ldr	r3, [pc, #404]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d28:	4961      	ldr	r1, [pc, #388]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4a:	4959      	ldr	r1, [pc, #356]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d5e:	4b54      	ldr	r3, [pc, #336]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6c:	4950      	ldr	r1, [pc, #320]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d80:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d86:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8e:	4948      	ldr	r1, [pc, #288]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003da2:	4b43      	ldr	r3, [pc, #268]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	493f      	ldr	r1, [pc, #252]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d028      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dd2:	4937      	ldr	r1, [pc, #220]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de2:	d106      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de4:	4b32      	ldr	r3, [pc, #200]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4a31      	ldr	r2, [pc, #196]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dee:	60d3      	str	r3, [r2, #12]
 8003df0:	e011      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003df6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dfa:	d10c      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	2101      	movs	r1, #1
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 f8c8 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d028      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e22:	4b23      	ldr	r3, [pc, #140]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e30:	491f      	ldr	r1, [pc, #124]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e40:	d106      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e42:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e4c:	60d3      	str	r3, [r2, #12]
 8003e4e:	e011      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 f899 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e6a:	7cfb      	ldrb	r3, [r7, #19]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d02b      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e80:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8e:	4908      	ldr	r1, [pc, #32]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e9e:	d109      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea0:	4b03      	ldr	r3, [pc, #12]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4a02      	ldr	r2, [pc, #8]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eaa:	60d3      	str	r3, [r2, #12]
 8003eac:	e014      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f867 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02f      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef2:	4928      	ldr	r1, [pc, #160]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f02:	d10d      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f844 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d014      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f1a:	7cfb      	ldrb	r3, [r7, #19]
 8003f1c:	74bb      	strb	r3, [r7, #18]
 8003f1e:	e011      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3320      	adds	r3, #32
 8003f2e:	2102      	movs	r1, #2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 f925 	bl	8004180 <RCCEx_PLLSAI2_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f3a:	7cfb      	ldrb	r3, [r7, #19]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f50:	4b10      	ldr	r3, [pc, #64]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f56:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f5e:	490d      	ldr	r1, [pc, #52]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f72:	4b08      	ldr	r3, [pc, #32]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f82:	4904      	ldr	r1, [pc, #16]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40021000 	.word	0x40021000

08003f98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fa6:	4b75      	ldr	r3, [pc, #468]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d018      	beq.n	8003fe4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fb2:	4b72      	ldr	r3, [pc, #456]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0203 	and.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d10d      	bne.n	8003fde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
       ||
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fca:	4b6c      	ldr	r3, [pc, #432]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
       ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d047      	beq.n	800406e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
 8003fe2:	e044      	b.n	800406e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d018      	beq.n	800401e <RCCEx_PLLSAI1_Config+0x86>
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d825      	bhi.n	800403c <RCCEx_PLLSAI1_Config+0xa4>
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d002      	beq.n	8003ffa <RCCEx_PLLSAI1_Config+0x62>
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d009      	beq.n	800400c <RCCEx_PLLSAI1_Config+0x74>
 8003ff8:	e020      	b.n	800403c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ffa:	4b60      	ldr	r3, [pc, #384]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d11d      	bne.n	8004042 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800400a:	e01a      	b.n	8004042 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800400c:	4b5b      	ldr	r3, [pc, #364]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004014:	2b00      	cmp	r3, #0
 8004016:	d116      	bne.n	8004046 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800401c:	e013      	b.n	8004046 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800401e:	4b57      	ldr	r3, [pc, #348]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800402a:	4b54      	ldr	r3, [pc, #336]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800403a:	e006      	b.n	800404a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
      break;
 8004040:	e004      	b.n	800404c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004042:	bf00      	nop
 8004044:	e002      	b.n	800404c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004046:	bf00      	nop
 8004048:	e000      	b.n	800404c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800404a:	bf00      	nop
    }

    if(status == HAL_OK)
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10d      	bne.n	800406e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004052:	4b4a      	ldr	r3, [pc, #296]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	3b01      	subs	r3, #1
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	430b      	orrs	r3, r1
 8004068:	4944      	ldr	r1, [pc, #272]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d17d      	bne.n	8004170 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004074:	4b41      	ldr	r3, [pc, #260]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a40      	ldr	r2, [pc, #256]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800407a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800407e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004080:	f7fd fd40 	bl	8001b04 <HAL_GetTick>
 8004084:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004086:	e009      	b.n	800409c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004088:	f7fd fd3c 	bl	8001b04 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d902      	bls.n	800409c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	73fb      	strb	r3, [r7, #15]
        break;
 800409a:	e005      	b.n	80040a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800409c:	4b37      	ldr	r3, [pc, #220]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ef      	bne.n	8004088 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d160      	bne.n	8004170 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d111      	bne.n	80040d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040b4:	4b31      	ldr	r3, [pc, #196]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80040bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6892      	ldr	r2, [r2, #8]
 80040c4:	0211      	lsls	r1, r2, #8
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68d2      	ldr	r2, [r2, #12]
 80040ca:	0912      	lsrs	r2, r2, #4
 80040cc:	0452      	lsls	r2, r2, #17
 80040ce:	430a      	orrs	r2, r1
 80040d0:	492a      	ldr	r1, [pc, #168]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	610b      	str	r3, [r1, #16]
 80040d6:	e027      	b.n	8004128 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d112      	bne.n	8004104 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040de:	4b27      	ldr	r3, [pc, #156]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80040e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6892      	ldr	r2, [r2, #8]
 80040ee:	0211      	lsls	r1, r2, #8
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6912      	ldr	r2, [r2, #16]
 80040f4:	0852      	lsrs	r2, r2, #1
 80040f6:	3a01      	subs	r2, #1
 80040f8:	0552      	lsls	r2, r2, #21
 80040fa:	430a      	orrs	r2, r1
 80040fc:	491f      	ldr	r1, [pc, #124]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	610b      	str	r3, [r1, #16]
 8004102:	e011      	b.n	8004128 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004104:	4b1d      	ldr	r3, [pc, #116]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800410c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6892      	ldr	r2, [r2, #8]
 8004114:	0211      	lsls	r1, r2, #8
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6952      	ldr	r2, [r2, #20]
 800411a:	0852      	lsrs	r2, r2, #1
 800411c:	3a01      	subs	r2, #1
 800411e:	0652      	lsls	r2, r2, #25
 8004120:	430a      	orrs	r2, r1
 8004122:	4916      	ldr	r1, [pc, #88]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004128:	4b14      	ldr	r3, [pc, #80]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a13      	ldr	r2, [pc, #76]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800412e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004132:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fd fce6 	bl	8001b04 <HAL_GetTick>
 8004138:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800413a:	e009      	b.n	8004150 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800413c:	f7fd fce2 	bl	8001b04 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d902      	bls.n	8004150 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	73fb      	strb	r3, [r7, #15]
          break;
 800414e:	e005      	b.n	800415c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004150:	4b0a      	ldr	r3, [pc, #40]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ef      	beq.n	800413c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004162:	4b06      	ldr	r3, [pc, #24]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	4904      	ldr	r1, [pc, #16]	@ (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800416c:	4313      	orrs	r3, r2
 800416e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004170:	7bfb      	ldrb	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000

08004180 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800418e:	4b6a      	ldr	r3, [pc, #424]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d018      	beq.n	80041cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800419a:	4b67      	ldr	r3, [pc, #412]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0203 	and.w	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d10d      	bne.n	80041c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
       ||
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041b2:	4b61      	ldr	r3, [pc, #388]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
       ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d047      	beq.n	8004256 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
 80041ca:	e044      	b.n	8004256 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d018      	beq.n	8004206 <RCCEx_PLLSAI2_Config+0x86>
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d825      	bhi.n	8004224 <RCCEx_PLLSAI2_Config+0xa4>
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d002      	beq.n	80041e2 <RCCEx_PLLSAI2_Config+0x62>
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d009      	beq.n	80041f4 <RCCEx_PLLSAI2_Config+0x74>
 80041e0:	e020      	b.n	8004224 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041e2:	4b55      	ldr	r3, [pc, #340]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d11d      	bne.n	800422a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f2:	e01a      	b.n	800422a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041f4:	4b50      	ldr	r3, [pc, #320]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d116      	bne.n	800422e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004204:	e013      	b.n	800422e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004206:	4b4c      	ldr	r3, [pc, #304]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004212:	4b49      	ldr	r3, [pc, #292]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004222:	e006      	b.n	8004232 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	e004      	b.n	8004234 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004232:	bf00      	nop
    }

    if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10d      	bne.n	8004256 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800423a:	4b3f      	ldr	r3, [pc, #252]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6819      	ldr	r1, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	3b01      	subs	r3, #1
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	430b      	orrs	r3, r1
 8004250:	4939      	ldr	r1, [pc, #228]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004252:	4313      	orrs	r3, r2
 8004254:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d167      	bne.n	800432c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800425c:	4b36      	ldr	r3, [pc, #216]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a35      	ldr	r2, [pc, #212]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004268:	f7fd fc4c 	bl	8001b04 <HAL_GetTick>
 800426c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800426e:	e009      	b.n	8004284 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004270:	f7fd fc48 	bl	8001b04 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d902      	bls.n	8004284 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	73fb      	strb	r3, [r7, #15]
        break;
 8004282:	e005      	b.n	8004290 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004284:	4b2c      	ldr	r3, [pc, #176]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ef      	bne.n	8004270 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d14a      	bne.n	800432c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d111      	bne.n	80042c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800429c:	4b26      	ldr	r3, [pc, #152]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80042a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6892      	ldr	r2, [r2, #8]
 80042ac:	0211      	lsls	r1, r2, #8
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	0912      	lsrs	r2, r2, #4
 80042b4:	0452      	lsls	r2, r2, #17
 80042b6:	430a      	orrs	r2, r1
 80042b8:	491f      	ldr	r1, [pc, #124]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	614b      	str	r3, [r1, #20]
 80042be:	e011      	b.n	80042e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6892      	ldr	r2, [r2, #8]
 80042d0:	0211      	lsls	r1, r2, #8
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6912      	ldr	r2, [r2, #16]
 80042d6:	0852      	lsrs	r2, r2, #1
 80042d8:	3a01      	subs	r2, #1
 80042da:	0652      	lsls	r2, r2, #25
 80042dc:	430a      	orrs	r2, r1
 80042de:	4916      	ldr	r1, [pc, #88]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042e4:	4b14      	ldr	r3, [pc, #80]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a13      	ldr	r2, [pc, #76]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fd fc08 	bl	8001b04 <HAL_GetTick>
 80042f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042f6:	e009      	b.n	800430c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042f8:	f7fd fc04 	bl	8001b04 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d902      	bls.n	800430c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	73fb      	strb	r3, [r7, #15]
          break;
 800430a:	e005      	b.n	8004318 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800430c:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0ef      	beq.n	80042f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800431e:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	4904      	ldr	r1, [pc, #16]	@ (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004328:	4313      	orrs	r3, r2
 800432a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000

0800433c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e040      	b.n	80043d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fd f9d2 	bl	8001708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2224      	movs	r2, #36	@ 0x24
 8004368:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fb6a 	bl	8004a5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f8af 	bl	80044ec <UART_SetConfig>
 800438e:	4603      	mov	r3, r0
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e01b      	b.n	80043d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fbe9 	bl	8004ba0 <UART_CheckIdleState>
 80043ce:	4603      	mov	r3, r0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	@ 0x28
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d177      	bne.n	80044e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_UART_Transmit+0x24>
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e070      	b.n	80044e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2221      	movs	r2, #33	@ 0x21
 800440c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800440e:	f7fd fb79 	bl	8001b04 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442c:	d108      	bne.n	8004440 <HAL_UART_Transmit+0x68>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	e003      	b.n	8004448 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004448:	e02f      	b.n	80044aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2200      	movs	r2, #0
 8004452:	2180      	movs	r1, #128	@ 0x80
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fc4b 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e03b      	b.n	80044e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	881a      	ldrh	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800447c:	b292      	uxth	r2, r2
 800447e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	3302      	adds	r3, #2
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e007      	b.n	8004498 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3301      	adds	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1c9      	bne.n	800444a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	2140      	movs	r1, #64	@ 0x40
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fc15 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e005      	b.n	80044e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f0:	b08a      	sub	sp, #40	@ 0x28
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	431a      	orrs	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4313      	orrs	r3, r2
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4ba4      	ldr	r3, [pc, #656]	@ (80047ac <UART_SetConfig+0x2c0>)
 800451c:	4013      	ands	r3, r2
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004524:	430b      	orrs	r3, r1
 8004526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a99      	ldr	r2, [pc, #612]	@ (80047b0 <UART_SetConfig+0x2c4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004554:	4313      	orrs	r3, r2
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004568:	430a      	orrs	r2, r1
 800456a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a90      	ldr	r2, [pc, #576]	@ (80047b4 <UART_SetConfig+0x2c8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d126      	bne.n	80045c4 <UART_SetConfig+0xd8>
 8004576:	4b90      	ldr	r3, [pc, #576]	@ (80047b8 <UART_SetConfig+0x2cc>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b03      	cmp	r3, #3
 8004582:	d81b      	bhi.n	80045bc <UART_SetConfig+0xd0>
 8004584:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <UART_SetConfig+0xa0>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	0800459d 	.word	0x0800459d
 8004590:	080045ad 	.word	0x080045ad
 8004594:	080045a5 	.word	0x080045a5
 8004598:	080045b5 	.word	0x080045b5
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a2:	e116      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80045a4:	2302      	movs	r3, #2
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045aa:	e112      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80045ac:	2304      	movs	r3, #4
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b2:	e10e      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80045b4:	2308      	movs	r3, #8
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ba:	e10a      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80045bc:	2310      	movs	r3, #16
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c2:	e106      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a7c      	ldr	r2, [pc, #496]	@ (80047bc <UART_SetConfig+0x2d0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d138      	bne.n	8004640 <UART_SetConfig+0x154>
 80045ce:	4b7a      	ldr	r3, [pc, #488]	@ (80047b8 <UART_SetConfig+0x2cc>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	2b0c      	cmp	r3, #12
 80045da:	d82d      	bhi.n	8004638 <UART_SetConfig+0x14c>
 80045dc:	a201      	add	r2, pc, #4	@ (adr r2, 80045e4 <UART_SetConfig+0xf8>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	08004619 	.word	0x08004619
 80045e8:	08004639 	.word	0x08004639
 80045ec:	08004639 	.word	0x08004639
 80045f0:	08004639 	.word	0x08004639
 80045f4:	08004629 	.word	0x08004629
 80045f8:	08004639 	.word	0x08004639
 80045fc:	08004639 	.word	0x08004639
 8004600:	08004639 	.word	0x08004639
 8004604:	08004621 	.word	0x08004621
 8004608:	08004639 	.word	0x08004639
 800460c:	08004639 	.word	0x08004639
 8004610:	08004639 	.word	0x08004639
 8004614:	08004631 	.word	0x08004631
 8004618:	2300      	movs	r3, #0
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461e:	e0d8      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004620:	2302      	movs	r3, #2
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004626:	e0d4      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004628:	2304      	movs	r3, #4
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462e:	e0d0      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004630:	2308      	movs	r3, #8
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004636:	e0cc      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004638:	2310      	movs	r3, #16
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463e:	e0c8      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a5e      	ldr	r2, [pc, #376]	@ (80047c0 <UART_SetConfig+0x2d4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d125      	bne.n	8004696 <UART_SetConfig+0x1aa>
 800464a:	4b5b      	ldr	r3, [pc, #364]	@ (80047b8 <UART_SetConfig+0x2cc>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004650:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004654:	2b30      	cmp	r3, #48	@ 0x30
 8004656:	d016      	beq.n	8004686 <UART_SetConfig+0x19a>
 8004658:	2b30      	cmp	r3, #48	@ 0x30
 800465a:	d818      	bhi.n	800468e <UART_SetConfig+0x1a2>
 800465c:	2b20      	cmp	r3, #32
 800465e:	d00a      	beq.n	8004676 <UART_SetConfig+0x18a>
 8004660:	2b20      	cmp	r3, #32
 8004662:	d814      	bhi.n	800468e <UART_SetConfig+0x1a2>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <UART_SetConfig+0x182>
 8004668:	2b10      	cmp	r3, #16
 800466a:	d008      	beq.n	800467e <UART_SetConfig+0x192>
 800466c:	e00f      	b.n	800468e <UART_SetConfig+0x1a2>
 800466e:	2300      	movs	r3, #0
 8004670:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004674:	e0ad      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004676:	2302      	movs	r3, #2
 8004678:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467c:	e0a9      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800467e:	2304      	movs	r3, #4
 8004680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004684:	e0a5      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004686:	2308      	movs	r3, #8
 8004688:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468c:	e0a1      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800468e:	2310      	movs	r3, #16
 8004690:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004694:	e09d      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a4a      	ldr	r2, [pc, #296]	@ (80047c4 <UART_SetConfig+0x2d8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d125      	bne.n	80046ec <UART_SetConfig+0x200>
 80046a0:	4b45      	ldr	r3, [pc, #276]	@ (80047b8 <UART_SetConfig+0x2cc>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80046ac:	d016      	beq.n	80046dc <UART_SetConfig+0x1f0>
 80046ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80046b0:	d818      	bhi.n	80046e4 <UART_SetConfig+0x1f8>
 80046b2:	2b80      	cmp	r3, #128	@ 0x80
 80046b4:	d00a      	beq.n	80046cc <UART_SetConfig+0x1e0>
 80046b6:	2b80      	cmp	r3, #128	@ 0x80
 80046b8:	d814      	bhi.n	80046e4 <UART_SetConfig+0x1f8>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <UART_SetConfig+0x1d8>
 80046be:	2b40      	cmp	r3, #64	@ 0x40
 80046c0:	d008      	beq.n	80046d4 <UART_SetConfig+0x1e8>
 80046c2:	e00f      	b.n	80046e4 <UART_SetConfig+0x1f8>
 80046c4:	2300      	movs	r3, #0
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e082      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80046cc:	2302      	movs	r3, #2
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e07e      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80046d4:	2304      	movs	r3, #4
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046da:	e07a      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80046dc:	2308      	movs	r3, #8
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e2:	e076      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80046e4:	2310      	movs	r3, #16
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ea:	e072      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a35      	ldr	r2, [pc, #212]	@ (80047c8 <UART_SetConfig+0x2dc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d12a      	bne.n	800474c <UART_SetConfig+0x260>
 80046f6:	4b30      	ldr	r3, [pc, #192]	@ (80047b8 <UART_SetConfig+0x2cc>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004704:	d01a      	beq.n	800473c <UART_SetConfig+0x250>
 8004706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800470a:	d81b      	bhi.n	8004744 <UART_SetConfig+0x258>
 800470c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004710:	d00c      	beq.n	800472c <UART_SetConfig+0x240>
 8004712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004716:	d815      	bhi.n	8004744 <UART_SetConfig+0x258>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <UART_SetConfig+0x238>
 800471c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004720:	d008      	beq.n	8004734 <UART_SetConfig+0x248>
 8004722:	e00f      	b.n	8004744 <UART_SetConfig+0x258>
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472a:	e052      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800472c:	2302      	movs	r3, #2
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004732:	e04e      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004734:	2304      	movs	r3, #4
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473a:	e04a      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800473c:	2308      	movs	r3, #8
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004742:	e046      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004744:	2310      	movs	r3, #16
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474a:	e042      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a17      	ldr	r2, [pc, #92]	@ (80047b0 <UART_SetConfig+0x2c4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d13a      	bne.n	80047cc <UART_SetConfig+0x2e0>
 8004756:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <UART_SetConfig+0x2cc>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004760:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004764:	d01a      	beq.n	800479c <UART_SetConfig+0x2b0>
 8004766:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800476a:	d81b      	bhi.n	80047a4 <UART_SetConfig+0x2b8>
 800476c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004770:	d00c      	beq.n	800478c <UART_SetConfig+0x2a0>
 8004772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004776:	d815      	bhi.n	80047a4 <UART_SetConfig+0x2b8>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <UART_SetConfig+0x298>
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004780:	d008      	beq.n	8004794 <UART_SetConfig+0x2a8>
 8004782:	e00f      	b.n	80047a4 <UART_SetConfig+0x2b8>
 8004784:	2300      	movs	r3, #0
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478a:	e022      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800478c:	2302      	movs	r3, #2
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004792:	e01e      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004794:	2304      	movs	r3, #4
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479a:	e01a      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800479c:	2308      	movs	r3, #8
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a2:	e016      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80047a4:	2310      	movs	r3, #16
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047aa:	e012      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80047ac:	efff69f3 	.word	0xefff69f3
 80047b0:	40008000 	.word	0x40008000
 80047b4:	40013800 	.word	0x40013800
 80047b8:	40021000 	.word	0x40021000
 80047bc:	40004400 	.word	0x40004400
 80047c0:	40004800 	.word	0x40004800
 80047c4:	40004c00 	.word	0x40004c00
 80047c8:	40005000 	.word	0x40005000
 80047cc:	2310      	movs	r3, #16
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a9f      	ldr	r2, [pc, #636]	@ (8004a54 <UART_SetConfig+0x568>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d17a      	bne.n	80048d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d824      	bhi.n	800482e <UART_SetConfig+0x342>
 80047e4:	a201      	add	r2, pc, #4	@ (adr r2, 80047ec <UART_SetConfig+0x300>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004811 	.word	0x08004811
 80047f0:	0800482f 	.word	0x0800482f
 80047f4:	08004819 	.word	0x08004819
 80047f8:	0800482f 	.word	0x0800482f
 80047fc:	0800481f 	.word	0x0800481f
 8004800:	0800482f 	.word	0x0800482f
 8004804:	0800482f 	.word	0x0800482f
 8004808:	0800482f 	.word	0x0800482f
 800480c:	08004827 	.word	0x08004827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004810:	f7ff f84c 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8004814:	61f8      	str	r0, [r7, #28]
        break;
 8004816:	e010      	b.n	800483a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004818:	4b8f      	ldr	r3, [pc, #572]	@ (8004a58 <UART_SetConfig+0x56c>)
 800481a:	61fb      	str	r3, [r7, #28]
        break;
 800481c:	e00d      	b.n	800483a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481e:	f7fe ffad 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8004822:	61f8      	str	r0, [r7, #28]
        break;
 8004824:	e009      	b.n	800483a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800482a:	61fb      	str	r3, [r7, #28]
        break;
 800482c:	e005      	b.n	800483a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004838:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80fb 	beq.w	8004a38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	429a      	cmp	r2, r3
 8004850:	d305      	bcc.n	800485e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	429a      	cmp	r2, r3
 800485c:	d903      	bls.n	8004866 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004864:	e0e8      	b.n	8004a38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	2200      	movs	r2, #0
 800486a:	461c      	mov	r4, r3
 800486c:	4615      	mov	r5, r2
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	022b      	lsls	r3, r5, #8
 8004878:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800487c:	0222      	lsls	r2, r4, #8
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	6849      	ldr	r1, [r1, #4]
 8004882:	0849      	lsrs	r1, r1, #1
 8004884:	2000      	movs	r0, #0
 8004886:	4688      	mov	r8, r1
 8004888:	4681      	mov	r9, r0
 800488a:	eb12 0a08 	adds.w	sl, r2, r8
 800488e:	eb43 0b09 	adc.w	fp, r3, r9
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a0:	4650      	mov	r0, sl
 80048a2:	4659      	mov	r1, fp
 80048a4:	f7fc f980 	bl	8000ba8 <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4613      	mov	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048b6:	d308      	bcc.n	80048ca <UART_SetConfig+0x3de>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048be:	d204      	bcs.n	80048ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	e0b6      	b.n	8004a38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048d0:	e0b2      	b.n	8004a38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048da:	d15e      	bne.n	800499a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d828      	bhi.n	8004936 <UART_SetConfig+0x44a>
 80048e4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <UART_SetConfig+0x400>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004927 	.word	0x08004927
 8004900:	08004937 	.word	0x08004937
 8004904:	08004937 	.word	0x08004937
 8004908:	08004937 	.word	0x08004937
 800490c:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7fe ffcc 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8004914:	61f8      	str	r0, [r7, #28]
        break;
 8004916:	e014      	b.n	8004942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe ffde 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 800491c:	61f8      	str	r0, [r7, #28]
        break;
 800491e:	e010      	b.n	8004942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b4d      	ldr	r3, [pc, #308]	@ (8004a58 <UART_SetConfig+0x56c>)
 8004922:	61fb      	str	r3, [r7, #28]
        break;
 8004924:	e00d      	b.n	8004942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe ff29 	bl	800377c <HAL_RCC_GetSysClockFreq>
 800492a:	61f8      	str	r0, [r7, #28]
        break;
 800492c:	e009      	b.n	8004942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004932:	61fb      	str	r3, [r7, #28]
        break;
 8004934:	e005      	b.n	8004942 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d077      	beq.n	8004a38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	005a      	lsls	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	441a      	add	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b0f      	cmp	r3, #15
 8004962:	d916      	bls.n	8004992 <UART_SetConfig+0x4a6>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800496a:	d212      	bcs.n	8004992 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f023 030f 	bic.w	r3, r3, #15
 8004974:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	b29b      	uxth	r3, r3
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	b29a      	uxth	r2, r3
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	4313      	orrs	r3, r2
 8004986:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	8afa      	ldrh	r2, [r7, #22]
 800498e:	60da      	str	r2, [r3, #12]
 8004990:	e052      	b.n	8004a38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004998:	e04e      	b.n	8004a38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800499a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d827      	bhi.n	80049f2 <UART_SetConfig+0x506>
 80049a2:	a201      	add	r2, pc, #4	@ (adr r2, 80049a8 <UART_SetConfig+0x4bc>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049d5 	.word	0x080049d5
 80049b0:	080049dd 	.word	0x080049dd
 80049b4:	080049f3 	.word	0x080049f3
 80049b8:	080049e3 	.word	0x080049e3
 80049bc:	080049f3 	.word	0x080049f3
 80049c0:	080049f3 	.word	0x080049f3
 80049c4:	080049f3 	.word	0x080049f3
 80049c8:	080049eb 	.word	0x080049eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049cc:	f7fe ff6e 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80049d0:	61f8      	str	r0, [r7, #28]
        break;
 80049d2:	e014      	b.n	80049fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d4:	f7fe ff80 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 80049d8:	61f8      	str	r0, [r7, #28]
        break;
 80049da:	e010      	b.n	80049fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004a58 <UART_SetConfig+0x56c>)
 80049de:	61fb      	str	r3, [r7, #28]
        break;
 80049e0:	e00d      	b.n	80049fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e2:	f7fe fecb 	bl	800377c <HAL_RCC_GetSysClockFreq>
 80049e6:	61f8      	str	r0, [r7, #28]
        break;
 80049e8:	e009      	b.n	80049fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ee:	61fb      	str	r3, [r7, #28]
        break;
 80049f0:	e005      	b.n	80049fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049fc:	bf00      	nop
    }

    if (pclk != 0U)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d019      	beq.n	8004a38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	085a      	lsrs	r2, r3, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	441a      	add	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b0f      	cmp	r3, #15
 8004a1c:	d909      	bls.n	8004a32 <UART_SetConfig+0x546>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a24:	d205      	bcs.n	8004a32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60da      	str	r2, [r3, #12]
 8004a30:	e002      	b.n	8004a38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3728      	adds	r7, #40	@ 0x28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a52:	bf00      	nop
 8004a54:	40008000 	.word	0x40008000
 8004a58:	00f42400 	.word	0x00f42400

08004a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01a      	beq.n	8004b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b5a:	d10a      	bne.n	8004b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b098      	sub	sp, #96	@ 0x60
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bb0:	f7fc ffa8 	bl	8001b04 <HAL_GetTick>
 8004bb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d12e      	bne.n	8004c22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f88c 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d021      	beq.n	8004c22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bfe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e6      	bne.n	8004bde <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e062      	b.n	8004ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d149      	bne.n	8004cc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f856 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03c      	beq.n	8004cc4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	623b      	str	r3, [r7, #32]
   return(result);
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e6      	bne.n	8004c4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3308      	adds	r3, #8
 8004c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c9c:	61fa      	str	r2, [r7, #28]
 8004c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	69b9      	ldr	r1, [r7, #24]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e011      	b.n	8004ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3758      	adds	r7, #88	@ 0x58
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d00:	e04f      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d04b      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0a:	f7fc fefb 	bl	8001b04 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d302      	bcc.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e04e      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d037      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b80      	cmp	r3, #128	@ 0x80
 8004d36:	d034      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b40      	cmp	r3, #64	@ 0x40
 8004d3c:	d031      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d110      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2208      	movs	r2, #8
 8004d52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f838 	bl	8004dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e029      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d7c:	d111      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f81e 	bl	8004dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e00f      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d0a0      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b095      	sub	sp, #84	@ 0x54
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004df0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004df2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004df6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e6      	bne.n	8004dd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3308      	adds	r3, #8
 8004e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d118      	bne.n	8004e72 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f023 0310 	bic.w	r3, r3, #16
 8004e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6979      	ldr	r1, [r7, #20]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e6      	bne.n	8004e40 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e86:	bf00      	nop
 8004e88:	3754      	adds	r7, #84	@ 0x54
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <__cvt>:
 8004e92:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e96:	ec57 6b10 	vmov	r6, r7, d0
 8004e9a:	2f00      	cmp	r7, #0
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	bfbb      	ittet	lt
 8004ea4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ea8:	461f      	movlt	r7, r3
 8004eaa:	2300      	movge	r3, #0
 8004eac:	232d      	movlt	r3, #45	@ 0x2d
 8004eae:	700b      	strb	r3, [r1, #0]
 8004eb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004eb2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004eb6:	4691      	mov	r9, r2
 8004eb8:	f023 0820 	bic.w	r8, r3, #32
 8004ebc:	bfbc      	itt	lt
 8004ebe:	4632      	movlt	r2, r6
 8004ec0:	4616      	movlt	r6, r2
 8004ec2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ec6:	d005      	beq.n	8004ed4 <__cvt+0x42>
 8004ec8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ecc:	d100      	bne.n	8004ed0 <__cvt+0x3e>
 8004ece:	3401      	adds	r4, #1
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	e000      	b.n	8004ed6 <__cvt+0x44>
 8004ed4:	2103      	movs	r1, #3
 8004ed6:	ab03      	add	r3, sp, #12
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	ab02      	add	r3, sp, #8
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	ec47 6b10 	vmov	d0, r6, r7
 8004ee2:	4653      	mov	r3, sl
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	f000 fe5b 	bl	8005ba0 <_dtoa_r>
 8004eea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004eee:	4605      	mov	r5, r0
 8004ef0:	d119      	bne.n	8004f26 <__cvt+0x94>
 8004ef2:	f019 0f01 	tst.w	r9, #1
 8004ef6:	d00e      	beq.n	8004f16 <__cvt+0x84>
 8004ef8:	eb00 0904 	add.w	r9, r0, r4
 8004efc:	2200      	movs	r2, #0
 8004efe:	2300      	movs	r3, #0
 8004f00:	4630      	mov	r0, r6
 8004f02:	4639      	mov	r1, r7
 8004f04:	f7fb fde0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f08:	b108      	cbz	r0, 8004f0e <__cvt+0x7c>
 8004f0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f0e:	2230      	movs	r2, #48	@ 0x30
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	454b      	cmp	r3, r9
 8004f14:	d31e      	bcc.n	8004f54 <__cvt+0xc2>
 8004f16:	9b03      	ldr	r3, [sp, #12]
 8004f18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f1a:	1b5b      	subs	r3, r3, r5
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	b004      	add	sp, #16
 8004f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f26:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f2a:	eb00 0904 	add.w	r9, r0, r4
 8004f2e:	d1e5      	bne.n	8004efc <__cvt+0x6a>
 8004f30:	7803      	ldrb	r3, [r0, #0]
 8004f32:	2b30      	cmp	r3, #48	@ 0x30
 8004f34:	d10a      	bne.n	8004f4c <__cvt+0xba>
 8004f36:	2200      	movs	r2, #0
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	4639      	mov	r1, r7
 8004f3e:	f7fb fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f42:	b918      	cbnz	r0, 8004f4c <__cvt+0xba>
 8004f44:	f1c4 0401 	rsb	r4, r4, #1
 8004f48:	f8ca 4000 	str.w	r4, [sl]
 8004f4c:	f8da 3000 	ldr.w	r3, [sl]
 8004f50:	4499      	add	r9, r3
 8004f52:	e7d3      	b.n	8004efc <__cvt+0x6a>
 8004f54:	1c59      	adds	r1, r3, #1
 8004f56:	9103      	str	r1, [sp, #12]
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	e7d9      	b.n	8004f10 <__cvt+0x7e>

08004f5c <__exponent>:
 8004f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f5e:	2900      	cmp	r1, #0
 8004f60:	bfba      	itte	lt
 8004f62:	4249      	neglt	r1, r1
 8004f64:	232d      	movlt	r3, #45	@ 0x2d
 8004f66:	232b      	movge	r3, #43	@ 0x2b
 8004f68:	2909      	cmp	r1, #9
 8004f6a:	7002      	strb	r2, [r0, #0]
 8004f6c:	7043      	strb	r3, [r0, #1]
 8004f6e:	dd29      	ble.n	8004fc4 <__exponent+0x68>
 8004f70:	f10d 0307 	add.w	r3, sp, #7
 8004f74:	461d      	mov	r5, r3
 8004f76:	270a      	movs	r7, #10
 8004f78:	461a      	mov	r2, r3
 8004f7a:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f7e:	fb07 1416 	mls	r4, r7, r6, r1
 8004f82:	3430      	adds	r4, #48	@ 0x30
 8004f84:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f88:	460c      	mov	r4, r1
 8004f8a:	2c63      	cmp	r4, #99	@ 0x63
 8004f8c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f90:	4631      	mov	r1, r6
 8004f92:	dcf1      	bgt.n	8004f78 <__exponent+0x1c>
 8004f94:	3130      	adds	r1, #48	@ 0x30
 8004f96:	1e94      	subs	r4, r2, #2
 8004f98:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f9c:	1c41      	adds	r1, r0, #1
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	42ab      	cmp	r3, r5
 8004fa2:	d30a      	bcc.n	8004fba <__exponent+0x5e>
 8004fa4:	f10d 0309 	add.w	r3, sp, #9
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	42ac      	cmp	r4, r5
 8004fac:	bf88      	it	hi
 8004fae:	2300      	movhi	r3, #0
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	4403      	add	r3, r0
 8004fb4:	1a18      	subs	r0, r3, r0
 8004fb6:	b003      	add	sp, #12
 8004fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fba:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004fbe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004fc2:	e7ed      	b.n	8004fa0 <__exponent+0x44>
 8004fc4:	2330      	movs	r3, #48	@ 0x30
 8004fc6:	3130      	adds	r1, #48	@ 0x30
 8004fc8:	7083      	strb	r3, [r0, #2]
 8004fca:	70c1      	strb	r1, [r0, #3]
 8004fcc:	1d03      	adds	r3, r0, #4
 8004fce:	e7f1      	b.n	8004fb4 <__exponent+0x58>

08004fd0 <_printf_float>:
 8004fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd4:	b08d      	sub	sp, #52	@ 0x34
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004fdc:	4616      	mov	r6, r2
 8004fde:	461f      	mov	r7, r3
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	f000 fcdb 	bl	800599c <_localeconv_r>
 8004fe6:	6803      	ldr	r3, [r0, #0]
 8004fe8:	9304      	str	r3, [sp, #16]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fb f940 	bl	8000270 <strlen>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff8:	9005      	str	r0, [sp, #20]
 8004ffa:	3307      	adds	r3, #7
 8004ffc:	f023 0307 	bic.w	r3, r3, #7
 8005000:	f103 0208 	add.w	r2, r3, #8
 8005004:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005008:	f8d4 b000 	ldr.w	fp, [r4]
 800500c:	f8c8 2000 	str.w	r2, [r8]
 8005010:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005014:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005018:	9307      	str	r3, [sp, #28]
 800501a:	f8cd 8018 	str.w	r8, [sp, #24]
 800501e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005026:	4b9c      	ldr	r3, [pc, #624]	@ (8005298 <_printf_float+0x2c8>)
 8005028:	f04f 32ff 	mov.w	r2, #4294967295
 800502c:	f7fb fd7e 	bl	8000b2c <__aeabi_dcmpun>
 8005030:	bb70      	cbnz	r0, 8005090 <_printf_float+0xc0>
 8005032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005036:	4b98      	ldr	r3, [pc, #608]	@ (8005298 <_printf_float+0x2c8>)
 8005038:	f04f 32ff 	mov.w	r2, #4294967295
 800503c:	f7fb fd58 	bl	8000af0 <__aeabi_dcmple>
 8005040:	bb30      	cbnz	r0, 8005090 <_printf_float+0xc0>
 8005042:	2200      	movs	r2, #0
 8005044:	2300      	movs	r3, #0
 8005046:	4640      	mov	r0, r8
 8005048:	4649      	mov	r1, r9
 800504a:	f7fb fd47 	bl	8000adc <__aeabi_dcmplt>
 800504e:	b110      	cbz	r0, 8005056 <_printf_float+0x86>
 8005050:	232d      	movs	r3, #45	@ 0x2d
 8005052:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005056:	4a91      	ldr	r2, [pc, #580]	@ (800529c <_printf_float+0x2cc>)
 8005058:	4b91      	ldr	r3, [pc, #580]	@ (80052a0 <_printf_float+0x2d0>)
 800505a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800505e:	bf94      	ite	ls
 8005060:	4690      	movls	r8, r2
 8005062:	4698      	movhi	r8, r3
 8005064:	2303      	movs	r3, #3
 8005066:	6123      	str	r3, [r4, #16]
 8005068:	f02b 0304 	bic.w	r3, fp, #4
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	f04f 0900 	mov.w	r9, #0
 8005072:	9700      	str	r7, [sp, #0]
 8005074:	4633      	mov	r3, r6
 8005076:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005078:	4621      	mov	r1, r4
 800507a:	4628      	mov	r0, r5
 800507c:	f000 f9d2 	bl	8005424 <_printf_common>
 8005080:	3001      	adds	r0, #1
 8005082:	f040 808d 	bne.w	80051a0 <_printf_float+0x1d0>
 8005086:	f04f 30ff 	mov.w	r0, #4294967295
 800508a:	b00d      	add	sp, #52	@ 0x34
 800508c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	4640      	mov	r0, r8
 8005096:	4649      	mov	r1, r9
 8005098:	f7fb fd48 	bl	8000b2c <__aeabi_dcmpun>
 800509c:	b140      	cbz	r0, 80050b0 <_printf_float+0xe0>
 800509e:	464b      	mov	r3, r9
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bfbc      	itt	lt
 80050a4:	232d      	movlt	r3, #45	@ 0x2d
 80050a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80050aa:	4a7e      	ldr	r2, [pc, #504]	@ (80052a4 <_printf_float+0x2d4>)
 80050ac:	4b7e      	ldr	r3, [pc, #504]	@ (80052a8 <_printf_float+0x2d8>)
 80050ae:	e7d4      	b.n	800505a <_printf_float+0x8a>
 80050b0:	6863      	ldr	r3, [r4, #4]
 80050b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80050b6:	9206      	str	r2, [sp, #24]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	d13b      	bne.n	8005134 <_printf_float+0x164>
 80050bc:	2306      	movs	r3, #6
 80050be:	6063      	str	r3, [r4, #4]
 80050c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80050c4:	2300      	movs	r3, #0
 80050c6:	6022      	str	r2, [r4, #0]
 80050c8:	9303      	str	r3, [sp, #12]
 80050ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80050cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80050d0:	ab09      	add	r3, sp, #36	@ 0x24
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	6861      	ldr	r1, [r4, #4]
 80050d6:	ec49 8b10 	vmov	d0, r8, r9
 80050da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80050de:	4628      	mov	r0, r5
 80050e0:	f7ff fed7 	bl	8004e92 <__cvt>
 80050e4:	9b06      	ldr	r3, [sp, #24]
 80050e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050e8:	2b47      	cmp	r3, #71	@ 0x47
 80050ea:	4680      	mov	r8, r0
 80050ec:	d129      	bne.n	8005142 <_printf_float+0x172>
 80050ee:	1cc8      	adds	r0, r1, #3
 80050f0:	db02      	blt.n	80050f8 <_printf_float+0x128>
 80050f2:	6863      	ldr	r3, [r4, #4]
 80050f4:	4299      	cmp	r1, r3
 80050f6:	dd41      	ble.n	800517c <_printf_float+0x1ac>
 80050f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80050fc:	fa5f fa8a 	uxtb.w	sl, sl
 8005100:	3901      	subs	r1, #1
 8005102:	4652      	mov	r2, sl
 8005104:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005108:	9109      	str	r1, [sp, #36]	@ 0x24
 800510a:	f7ff ff27 	bl	8004f5c <__exponent>
 800510e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005110:	1813      	adds	r3, r2, r0
 8005112:	2a01      	cmp	r2, #1
 8005114:	4681      	mov	r9, r0
 8005116:	6123      	str	r3, [r4, #16]
 8005118:	dc02      	bgt.n	8005120 <_printf_float+0x150>
 800511a:	6822      	ldr	r2, [r4, #0]
 800511c:	07d2      	lsls	r2, r2, #31
 800511e:	d501      	bpl.n	8005124 <_printf_float+0x154>
 8005120:	3301      	adds	r3, #1
 8005122:	6123      	str	r3, [r4, #16]
 8005124:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0a2      	beq.n	8005072 <_printf_float+0xa2>
 800512c:	232d      	movs	r3, #45	@ 0x2d
 800512e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005132:	e79e      	b.n	8005072 <_printf_float+0xa2>
 8005134:	9a06      	ldr	r2, [sp, #24]
 8005136:	2a47      	cmp	r2, #71	@ 0x47
 8005138:	d1c2      	bne.n	80050c0 <_printf_float+0xf0>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1c0      	bne.n	80050c0 <_printf_float+0xf0>
 800513e:	2301      	movs	r3, #1
 8005140:	e7bd      	b.n	80050be <_printf_float+0xee>
 8005142:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005146:	d9db      	bls.n	8005100 <_printf_float+0x130>
 8005148:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800514c:	d118      	bne.n	8005180 <_printf_float+0x1b0>
 800514e:	2900      	cmp	r1, #0
 8005150:	6863      	ldr	r3, [r4, #4]
 8005152:	dd0b      	ble.n	800516c <_printf_float+0x19c>
 8005154:	6121      	str	r1, [r4, #16]
 8005156:	b913      	cbnz	r3, 800515e <_printf_float+0x18e>
 8005158:	6822      	ldr	r2, [r4, #0]
 800515a:	07d0      	lsls	r0, r2, #31
 800515c:	d502      	bpl.n	8005164 <_printf_float+0x194>
 800515e:	3301      	adds	r3, #1
 8005160:	440b      	add	r3, r1
 8005162:	6123      	str	r3, [r4, #16]
 8005164:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005166:	f04f 0900 	mov.w	r9, #0
 800516a:	e7db      	b.n	8005124 <_printf_float+0x154>
 800516c:	b913      	cbnz	r3, 8005174 <_printf_float+0x1a4>
 800516e:	6822      	ldr	r2, [r4, #0]
 8005170:	07d2      	lsls	r2, r2, #31
 8005172:	d501      	bpl.n	8005178 <_printf_float+0x1a8>
 8005174:	3302      	adds	r3, #2
 8005176:	e7f4      	b.n	8005162 <_printf_float+0x192>
 8005178:	2301      	movs	r3, #1
 800517a:	e7f2      	b.n	8005162 <_printf_float+0x192>
 800517c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005182:	4299      	cmp	r1, r3
 8005184:	db05      	blt.n	8005192 <_printf_float+0x1c2>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	6121      	str	r1, [r4, #16]
 800518a:	07d8      	lsls	r0, r3, #31
 800518c:	d5ea      	bpl.n	8005164 <_printf_float+0x194>
 800518e:	1c4b      	adds	r3, r1, #1
 8005190:	e7e7      	b.n	8005162 <_printf_float+0x192>
 8005192:	2900      	cmp	r1, #0
 8005194:	bfd4      	ite	le
 8005196:	f1c1 0202 	rsble	r2, r1, #2
 800519a:	2201      	movgt	r2, #1
 800519c:	4413      	add	r3, r2
 800519e:	e7e0      	b.n	8005162 <_printf_float+0x192>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	055a      	lsls	r2, r3, #21
 80051a4:	d407      	bmi.n	80051b6 <_printf_float+0x1e6>
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	4642      	mov	r2, r8
 80051aa:	4631      	mov	r1, r6
 80051ac:	4628      	mov	r0, r5
 80051ae:	47b8      	blx	r7
 80051b0:	3001      	adds	r0, #1
 80051b2:	d12b      	bne.n	800520c <_printf_float+0x23c>
 80051b4:	e767      	b.n	8005086 <_printf_float+0xb6>
 80051b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051ba:	f240 80dd 	bls.w	8005378 <_printf_float+0x3a8>
 80051be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051c2:	2200      	movs	r2, #0
 80051c4:	2300      	movs	r3, #0
 80051c6:	f7fb fc7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d033      	beq.n	8005236 <_printf_float+0x266>
 80051ce:	4a37      	ldr	r2, [pc, #220]	@ (80052ac <_printf_float+0x2dc>)
 80051d0:	2301      	movs	r3, #1
 80051d2:	4631      	mov	r1, r6
 80051d4:	4628      	mov	r0, r5
 80051d6:	47b8      	blx	r7
 80051d8:	3001      	adds	r0, #1
 80051da:	f43f af54 	beq.w	8005086 <_printf_float+0xb6>
 80051de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80051e2:	4543      	cmp	r3, r8
 80051e4:	db02      	blt.n	80051ec <_printf_float+0x21c>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	07d8      	lsls	r0, r3, #31
 80051ea:	d50f      	bpl.n	800520c <_printf_float+0x23c>
 80051ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	47b8      	blx	r7
 80051f6:	3001      	adds	r0, #1
 80051f8:	f43f af45 	beq.w	8005086 <_printf_float+0xb6>
 80051fc:	f04f 0900 	mov.w	r9, #0
 8005200:	f108 38ff 	add.w	r8, r8, #4294967295
 8005204:	f104 0a1a 	add.w	sl, r4, #26
 8005208:	45c8      	cmp	r8, r9
 800520a:	dc09      	bgt.n	8005220 <_printf_float+0x250>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	079b      	lsls	r3, r3, #30
 8005210:	f100 8103 	bmi.w	800541a <_printf_float+0x44a>
 8005214:	68e0      	ldr	r0, [r4, #12]
 8005216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005218:	4298      	cmp	r0, r3
 800521a:	bfb8      	it	lt
 800521c:	4618      	movlt	r0, r3
 800521e:	e734      	b.n	800508a <_printf_float+0xba>
 8005220:	2301      	movs	r3, #1
 8005222:	4652      	mov	r2, sl
 8005224:	4631      	mov	r1, r6
 8005226:	4628      	mov	r0, r5
 8005228:	47b8      	blx	r7
 800522a:	3001      	adds	r0, #1
 800522c:	f43f af2b 	beq.w	8005086 <_printf_float+0xb6>
 8005230:	f109 0901 	add.w	r9, r9, #1
 8005234:	e7e8      	b.n	8005208 <_printf_float+0x238>
 8005236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	dc39      	bgt.n	80052b0 <_printf_float+0x2e0>
 800523c:	4a1b      	ldr	r2, [pc, #108]	@ (80052ac <_printf_float+0x2dc>)
 800523e:	2301      	movs	r3, #1
 8005240:	4631      	mov	r1, r6
 8005242:	4628      	mov	r0, r5
 8005244:	47b8      	blx	r7
 8005246:	3001      	adds	r0, #1
 8005248:	f43f af1d 	beq.w	8005086 <_printf_float+0xb6>
 800524c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005250:	ea59 0303 	orrs.w	r3, r9, r3
 8005254:	d102      	bne.n	800525c <_printf_float+0x28c>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	07d9      	lsls	r1, r3, #31
 800525a:	d5d7      	bpl.n	800520c <_printf_float+0x23c>
 800525c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005260:	4631      	mov	r1, r6
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	f43f af0d 	beq.w	8005086 <_printf_float+0xb6>
 800526c:	f04f 0a00 	mov.w	sl, #0
 8005270:	f104 0b1a 	add.w	fp, r4, #26
 8005274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005276:	425b      	negs	r3, r3
 8005278:	4553      	cmp	r3, sl
 800527a:	dc01      	bgt.n	8005280 <_printf_float+0x2b0>
 800527c:	464b      	mov	r3, r9
 800527e:	e793      	b.n	80051a8 <_printf_float+0x1d8>
 8005280:	2301      	movs	r3, #1
 8005282:	465a      	mov	r2, fp
 8005284:	4631      	mov	r1, r6
 8005286:	4628      	mov	r0, r5
 8005288:	47b8      	blx	r7
 800528a:	3001      	adds	r0, #1
 800528c:	f43f aefb 	beq.w	8005086 <_printf_float+0xb6>
 8005290:	f10a 0a01 	add.w	sl, sl, #1
 8005294:	e7ee      	b.n	8005274 <_printf_float+0x2a4>
 8005296:	bf00      	nop
 8005298:	7fefffff 	.word	0x7fefffff
 800529c:	08007bbc 	.word	0x08007bbc
 80052a0:	08007bc0 	.word	0x08007bc0
 80052a4:	08007bc4 	.word	0x08007bc4
 80052a8:	08007bc8 	.word	0x08007bc8
 80052ac:	08007bcc 	.word	0x08007bcc
 80052b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80052b6:	4553      	cmp	r3, sl
 80052b8:	bfa8      	it	ge
 80052ba:	4653      	movge	r3, sl
 80052bc:	2b00      	cmp	r3, #0
 80052be:	4699      	mov	r9, r3
 80052c0:	dc36      	bgt.n	8005330 <_printf_float+0x360>
 80052c2:	f04f 0b00 	mov.w	fp, #0
 80052c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052ca:	f104 021a 	add.w	r2, r4, #26
 80052ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052d0:	9306      	str	r3, [sp, #24]
 80052d2:	eba3 0309 	sub.w	r3, r3, r9
 80052d6:	455b      	cmp	r3, fp
 80052d8:	dc31      	bgt.n	800533e <_printf_float+0x36e>
 80052da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052dc:	459a      	cmp	sl, r3
 80052de:	dc3a      	bgt.n	8005356 <_printf_float+0x386>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	07da      	lsls	r2, r3, #31
 80052e4:	d437      	bmi.n	8005356 <_printf_float+0x386>
 80052e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e8:	ebaa 0903 	sub.w	r9, sl, r3
 80052ec:	9b06      	ldr	r3, [sp, #24]
 80052ee:	ebaa 0303 	sub.w	r3, sl, r3
 80052f2:	4599      	cmp	r9, r3
 80052f4:	bfa8      	it	ge
 80052f6:	4699      	movge	r9, r3
 80052f8:	f1b9 0f00 	cmp.w	r9, #0
 80052fc:	dc33      	bgt.n	8005366 <_printf_float+0x396>
 80052fe:	f04f 0800 	mov.w	r8, #0
 8005302:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005306:	f104 0b1a 	add.w	fp, r4, #26
 800530a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800530c:	ebaa 0303 	sub.w	r3, sl, r3
 8005310:	eba3 0309 	sub.w	r3, r3, r9
 8005314:	4543      	cmp	r3, r8
 8005316:	f77f af79 	ble.w	800520c <_printf_float+0x23c>
 800531a:	2301      	movs	r3, #1
 800531c:	465a      	mov	r2, fp
 800531e:	4631      	mov	r1, r6
 8005320:	4628      	mov	r0, r5
 8005322:	47b8      	blx	r7
 8005324:	3001      	adds	r0, #1
 8005326:	f43f aeae 	beq.w	8005086 <_printf_float+0xb6>
 800532a:	f108 0801 	add.w	r8, r8, #1
 800532e:	e7ec      	b.n	800530a <_printf_float+0x33a>
 8005330:	4642      	mov	r2, r8
 8005332:	4631      	mov	r1, r6
 8005334:	4628      	mov	r0, r5
 8005336:	47b8      	blx	r7
 8005338:	3001      	adds	r0, #1
 800533a:	d1c2      	bne.n	80052c2 <_printf_float+0x2f2>
 800533c:	e6a3      	b.n	8005086 <_printf_float+0xb6>
 800533e:	2301      	movs	r3, #1
 8005340:	4631      	mov	r1, r6
 8005342:	4628      	mov	r0, r5
 8005344:	9206      	str	r2, [sp, #24]
 8005346:	47b8      	blx	r7
 8005348:	3001      	adds	r0, #1
 800534a:	f43f ae9c 	beq.w	8005086 <_printf_float+0xb6>
 800534e:	9a06      	ldr	r2, [sp, #24]
 8005350:	f10b 0b01 	add.w	fp, fp, #1
 8005354:	e7bb      	b.n	80052ce <_printf_float+0x2fe>
 8005356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800535a:	4631      	mov	r1, r6
 800535c:	4628      	mov	r0, r5
 800535e:	47b8      	blx	r7
 8005360:	3001      	adds	r0, #1
 8005362:	d1c0      	bne.n	80052e6 <_printf_float+0x316>
 8005364:	e68f      	b.n	8005086 <_printf_float+0xb6>
 8005366:	9a06      	ldr	r2, [sp, #24]
 8005368:	464b      	mov	r3, r9
 800536a:	4442      	add	r2, r8
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	d1c3      	bne.n	80052fe <_printf_float+0x32e>
 8005376:	e686      	b.n	8005086 <_printf_float+0xb6>
 8005378:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800537c:	f1ba 0f01 	cmp.w	sl, #1
 8005380:	dc01      	bgt.n	8005386 <_printf_float+0x3b6>
 8005382:	07db      	lsls	r3, r3, #31
 8005384:	d536      	bpl.n	80053f4 <_printf_float+0x424>
 8005386:	2301      	movs	r3, #1
 8005388:	4642      	mov	r2, r8
 800538a:	4631      	mov	r1, r6
 800538c:	4628      	mov	r0, r5
 800538e:	47b8      	blx	r7
 8005390:	3001      	adds	r0, #1
 8005392:	f43f ae78 	beq.w	8005086 <_printf_float+0xb6>
 8005396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800539a:	4631      	mov	r1, r6
 800539c:	4628      	mov	r0, r5
 800539e:	47b8      	blx	r7
 80053a0:	3001      	adds	r0, #1
 80053a2:	f43f ae70 	beq.w	8005086 <_printf_float+0xb6>
 80053a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053aa:	2200      	movs	r2, #0
 80053ac:	2300      	movs	r3, #0
 80053ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053b2:	f7fb fb89 	bl	8000ac8 <__aeabi_dcmpeq>
 80053b6:	b9c0      	cbnz	r0, 80053ea <_printf_float+0x41a>
 80053b8:	4653      	mov	r3, sl
 80053ba:	f108 0201 	add.w	r2, r8, #1
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	d10c      	bne.n	80053e2 <_printf_float+0x412>
 80053c8:	e65d      	b.n	8005086 <_printf_float+0xb6>
 80053ca:	2301      	movs	r3, #1
 80053cc:	465a      	mov	r2, fp
 80053ce:	4631      	mov	r1, r6
 80053d0:	4628      	mov	r0, r5
 80053d2:	47b8      	blx	r7
 80053d4:	3001      	adds	r0, #1
 80053d6:	f43f ae56 	beq.w	8005086 <_printf_float+0xb6>
 80053da:	f108 0801 	add.w	r8, r8, #1
 80053de:	45d0      	cmp	r8, sl
 80053e0:	dbf3      	blt.n	80053ca <_printf_float+0x3fa>
 80053e2:	464b      	mov	r3, r9
 80053e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80053e8:	e6df      	b.n	80051aa <_printf_float+0x1da>
 80053ea:	f04f 0800 	mov.w	r8, #0
 80053ee:	f104 0b1a 	add.w	fp, r4, #26
 80053f2:	e7f4      	b.n	80053de <_printf_float+0x40e>
 80053f4:	2301      	movs	r3, #1
 80053f6:	4642      	mov	r2, r8
 80053f8:	e7e1      	b.n	80053be <_printf_float+0x3ee>
 80053fa:	2301      	movs	r3, #1
 80053fc:	464a      	mov	r2, r9
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	47b8      	blx	r7
 8005404:	3001      	adds	r0, #1
 8005406:	f43f ae3e 	beq.w	8005086 <_printf_float+0xb6>
 800540a:	f108 0801 	add.w	r8, r8, #1
 800540e:	68e3      	ldr	r3, [r4, #12]
 8005410:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005412:	1a5b      	subs	r3, r3, r1
 8005414:	4543      	cmp	r3, r8
 8005416:	dcf0      	bgt.n	80053fa <_printf_float+0x42a>
 8005418:	e6fc      	b.n	8005214 <_printf_float+0x244>
 800541a:	f04f 0800 	mov.w	r8, #0
 800541e:	f104 0919 	add.w	r9, r4, #25
 8005422:	e7f4      	b.n	800540e <_printf_float+0x43e>

08005424 <_printf_common>:
 8005424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	4616      	mov	r6, r2
 800542a:	4698      	mov	r8, r3
 800542c:	688a      	ldr	r2, [r1, #8]
 800542e:	690b      	ldr	r3, [r1, #16]
 8005430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005434:	4293      	cmp	r3, r2
 8005436:	bfb8      	it	lt
 8005438:	4613      	movlt	r3, r2
 800543a:	6033      	str	r3, [r6, #0]
 800543c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005440:	4607      	mov	r7, r0
 8005442:	460c      	mov	r4, r1
 8005444:	b10a      	cbz	r2, 800544a <_printf_common+0x26>
 8005446:	3301      	adds	r3, #1
 8005448:	6033      	str	r3, [r6, #0]
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	0699      	lsls	r1, r3, #26
 800544e:	bf42      	ittt	mi
 8005450:	6833      	ldrmi	r3, [r6, #0]
 8005452:	3302      	addmi	r3, #2
 8005454:	6033      	strmi	r3, [r6, #0]
 8005456:	6825      	ldr	r5, [r4, #0]
 8005458:	f015 0506 	ands.w	r5, r5, #6
 800545c:	d106      	bne.n	800546c <_printf_common+0x48>
 800545e:	f104 0a19 	add.w	sl, r4, #25
 8005462:	68e3      	ldr	r3, [r4, #12]
 8005464:	6832      	ldr	r2, [r6, #0]
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	42ab      	cmp	r3, r5
 800546a:	dc26      	bgt.n	80054ba <_printf_common+0x96>
 800546c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005470:	6822      	ldr	r2, [r4, #0]
 8005472:	3b00      	subs	r3, #0
 8005474:	bf18      	it	ne
 8005476:	2301      	movne	r3, #1
 8005478:	0692      	lsls	r2, r2, #26
 800547a:	d42b      	bmi.n	80054d4 <_printf_common+0xb0>
 800547c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005480:	4641      	mov	r1, r8
 8005482:	4638      	mov	r0, r7
 8005484:	47c8      	blx	r9
 8005486:	3001      	adds	r0, #1
 8005488:	d01e      	beq.n	80054c8 <_printf_common+0xa4>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	6922      	ldr	r2, [r4, #16]
 800548e:	f003 0306 	and.w	r3, r3, #6
 8005492:	2b04      	cmp	r3, #4
 8005494:	bf02      	ittt	eq
 8005496:	68e5      	ldreq	r5, [r4, #12]
 8005498:	6833      	ldreq	r3, [r6, #0]
 800549a:	1aed      	subeq	r5, r5, r3
 800549c:	68a3      	ldr	r3, [r4, #8]
 800549e:	bf0c      	ite	eq
 80054a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054a4:	2500      	movne	r5, #0
 80054a6:	4293      	cmp	r3, r2
 80054a8:	bfc4      	itt	gt
 80054aa:	1a9b      	subgt	r3, r3, r2
 80054ac:	18ed      	addgt	r5, r5, r3
 80054ae:	2600      	movs	r6, #0
 80054b0:	341a      	adds	r4, #26
 80054b2:	42b5      	cmp	r5, r6
 80054b4:	d11a      	bne.n	80054ec <_printf_common+0xc8>
 80054b6:	2000      	movs	r0, #0
 80054b8:	e008      	b.n	80054cc <_printf_common+0xa8>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4652      	mov	r2, sl
 80054be:	4641      	mov	r1, r8
 80054c0:	4638      	mov	r0, r7
 80054c2:	47c8      	blx	r9
 80054c4:	3001      	adds	r0, #1
 80054c6:	d103      	bne.n	80054d0 <_printf_common+0xac>
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295
 80054cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d0:	3501      	adds	r5, #1
 80054d2:	e7c6      	b.n	8005462 <_printf_common+0x3e>
 80054d4:	18e1      	adds	r1, r4, r3
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	2030      	movs	r0, #48	@ 0x30
 80054da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054de:	4422      	add	r2, r4
 80054e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054e8:	3302      	adds	r3, #2
 80054ea:	e7c7      	b.n	800547c <_printf_common+0x58>
 80054ec:	2301      	movs	r3, #1
 80054ee:	4622      	mov	r2, r4
 80054f0:	4641      	mov	r1, r8
 80054f2:	4638      	mov	r0, r7
 80054f4:	47c8      	blx	r9
 80054f6:	3001      	adds	r0, #1
 80054f8:	d0e6      	beq.n	80054c8 <_printf_common+0xa4>
 80054fa:	3601      	adds	r6, #1
 80054fc:	e7d9      	b.n	80054b2 <_printf_common+0x8e>
	...

08005500 <_printf_i>:
 8005500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005504:	7e0f      	ldrb	r7, [r1, #24]
 8005506:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005508:	2f78      	cmp	r7, #120	@ 0x78
 800550a:	4691      	mov	r9, r2
 800550c:	4680      	mov	r8, r0
 800550e:	460c      	mov	r4, r1
 8005510:	469a      	mov	sl, r3
 8005512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005516:	d807      	bhi.n	8005528 <_printf_i+0x28>
 8005518:	2f62      	cmp	r7, #98	@ 0x62
 800551a:	d80a      	bhi.n	8005532 <_printf_i+0x32>
 800551c:	2f00      	cmp	r7, #0
 800551e:	f000 80d2 	beq.w	80056c6 <_printf_i+0x1c6>
 8005522:	2f58      	cmp	r7, #88	@ 0x58
 8005524:	f000 80b9 	beq.w	800569a <_printf_i+0x19a>
 8005528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800552c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005530:	e03a      	b.n	80055a8 <_printf_i+0xa8>
 8005532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005536:	2b15      	cmp	r3, #21
 8005538:	d8f6      	bhi.n	8005528 <_printf_i+0x28>
 800553a:	a101      	add	r1, pc, #4	@ (adr r1, 8005540 <_printf_i+0x40>)
 800553c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005540:	08005599 	.word	0x08005599
 8005544:	080055ad 	.word	0x080055ad
 8005548:	08005529 	.word	0x08005529
 800554c:	08005529 	.word	0x08005529
 8005550:	08005529 	.word	0x08005529
 8005554:	08005529 	.word	0x08005529
 8005558:	080055ad 	.word	0x080055ad
 800555c:	08005529 	.word	0x08005529
 8005560:	08005529 	.word	0x08005529
 8005564:	08005529 	.word	0x08005529
 8005568:	08005529 	.word	0x08005529
 800556c:	080056ad 	.word	0x080056ad
 8005570:	080055d7 	.word	0x080055d7
 8005574:	08005667 	.word	0x08005667
 8005578:	08005529 	.word	0x08005529
 800557c:	08005529 	.word	0x08005529
 8005580:	080056cf 	.word	0x080056cf
 8005584:	08005529 	.word	0x08005529
 8005588:	080055d7 	.word	0x080055d7
 800558c:	08005529 	.word	0x08005529
 8005590:	08005529 	.word	0x08005529
 8005594:	0800566f 	.word	0x0800566f
 8005598:	6833      	ldr	r3, [r6, #0]
 800559a:	1d1a      	adds	r2, r3, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6032      	str	r2, [r6, #0]
 80055a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055a8:	2301      	movs	r3, #1
 80055aa:	e09d      	b.n	80056e8 <_printf_i+0x1e8>
 80055ac:	6833      	ldr	r3, [r6, #0]
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	1d19      	adds	r1, r3, #4
 80055b2:	6031      	str	r1, [r6, #0]
 80055b4:	0606      	lsls	r6, r0, #24
 80055b6:	d501      	bpl.n	80055bc <_printf_i+0xbc>
 80055b8:	681d      	ldr	r5, [r3, #0]
 80055ba:	e003      	b.n	80055c4 <_printf_i+0xc4>
 80055bc:	0645      	lsls	r5, r0, #25
 80055be:	d5fb      	bpl.n	80055b8 <_printf_i+0xb8>
 80055c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055c4:	2d00      	cmp	r5, #0
 80055c6:	da03      	bge.n	80055d0 <_printf_i+0xd0>
 80055c8:	232d      	movs	r3, #45	@ 0x2d
 80055ca:	426d      	negs	r5, r5
 80055cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d0:	4859      	ldr	r0, [pc, #356]	@ (8005738 <_printf_i+0x238>)
 80055d2:	230a      	movs	r3, #10
 80055d4:	e011      	b.n	80055fa <_printf_i+0xfa>
 80055d6:	6821      	ldr	r1, [r4, #0]
 80055d8:	6833      	ldr	r3, [r6, #0]
 80055da:	0608      	lsls	r0, r1, #24
 80055dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80055e0:	d402      	bmi.n	80055e8 <_printf_i+0xe8>
 80055e2:	0649      	lsls	r1, r1, #25
 80055e4:	bf48      	it	mi
 80055e6:	b2ad      	uxthmi	r5, r5
 80055e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80055ea:	4853      	ldr	r0, [pc, #332]	@ (8005738 <_printf_i+0x238>)
 80055ec:	6033      	str	r3, [r6, #0]
 80055ee:	bf14      	ite	ne
 80055f0:	230a      	movne	r3, #10
 80055f2:	2308      	moveq	r3, #8
 80055f4:	2100      	movs	r1, #0
 80055f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055fa:	6866      	ldr	r6, [r4, #4]
 80055fc:	60a6      	str	r6, [r4, #8]
 80055fe:	2e00      	cmp	r6, #0
 8005600:	bfa2      	ittt	ge
 8005602:	6821      	ldrge	r1, [r4, #0]
 8005604:	f021 0104 	bicge.w	r1, r1, #4
 8005608:	6021      	strge	r1, [r4, #0]
 800560a:	b90d      	cbnz	r5, 8005610 <_printf_i+0x110>
 800560c:	2e00      	cmp	r6, #0
 800560e:	d04b      	beq.n	80056a8 <_printf_i+0x1a8>
 8005610:	4616      	mov	r6, r2
 8005612:	fbb5 f1f3 	udiv	r1, r5, r3
 8005616:	fb03 5711 	mls	r7, r3, r1, r5
 800561a:	5dc7      	ldrb	r7, [r0, r7]
 800561c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005620:	462f      	mov	r7, r5
 8005622:	42bb      	cmp	r3, r7
 8005624:	460d      	mov	r5, r1
 8005626:	d9f4      	bls.n	8005612 <_printf_i+0x112>
 8005628:	2b08      	cmp	r3, #8
 800562a:	d10b      	bne.n	8005644 <_printf_i+0x144>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	07df      	lsls	r7, r3, #31
 8005630:	d508      	bpl.n	8005644 <_printf_i+0x144>
 8005632:	6923      	ldr	r3, [r4, #16]
 8005634:	6861      	ldr	r1, [r4, #4]
 8005636:	4299      	cmp	r1, r3
 8005638:	bfde      	ittt	le
 800563a:	2330      	movle	r3, #48	@ 0x30
 800563c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005640:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005644:	1b92      	subs	r2, r2, r6
 8005646:	6122      	str	r2, [r4, #16]
 8005648:	f8cd a000 	str.w	sl, [sp]
 800564c:	464b      	mov	r3, r9
 800564e:	aa03      	add	r2, sp, #12
 8005650:	4621      	mov	r1, r4
 8005652:	4640      	mov	r0, r8
 8005654:	f7ff fee6 	bl	8005424 <_printf_common>
 8005658:	3001      	adds	r0, #1
 800565a:	d14a      	bne.n	80056f2 <_printf_i+0x1f2>
 800565c:	f04f 30ff 	mov.w	r0, #4294967295
 8005660:	b004      	add	sp, #16
 8005662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	f043 0320 	orr.w	r3, r3, #32
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	4833      	ldr	r0, [pc, #204]	@ (800573c <_printf_i+0x23c>)
 8005670:	2778      	movs	r7, #120	@ 0x78
 8005672:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	6831      	ldr	r1, [r6, #0]
 800567a:	061f      	lsls	r7, r3, #24
 800567c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005680:	d402      	bmi.n	8005688 <_printf_i+0x188>
 8005682:	065f      	lsls	r7, r3, #25
 8005684:	bf48      	it	mi
 8005686:	b2ad      	uxthmi	r5, r5
 8005688:	6031      	str	r1, [r6, #0]
 800568a:	07d9      	lsls	r1, r3, #31
 800568c:	bf44      	itt	mi
 800568e:	f043 0320 	orrmi.w	r3, r3, #32
 8005692:	6023      	strmi	r3, [r4, #0]
 8005694:	b11d      	cbz	r5, 800569e <_printf_i+0x19e>
 8005696:	2310      	movs	r3, #16
 8005698:	e7ac      	b.n	80055f4 <_printf_i+0xf4>
 800569a:	4827      	ldr	r0, [pc, #156]	@ (8005738 <_printf_i+0x238>)
 800569c:	e7e9      	b.n	8005672 <_printf_i+0x172>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	f023 0320 	bic.w	r3, r3, #32
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	e7f6      	b.n	8005696 <_printf_i+0x196>
 80056a8:	4616      	mov	r6, r2
 80056aa:	e7bd      	b.n	8005628 <_printf_i+0x128>
 80056ac:	6833      	ldr	r3, [r6, #0]
 80056ae:	6825      	ldr	r5, [r4, #0]
 80056b0:	6961      	ldr	r1, [r4, #20]
 80056b2:	1d18      	adds	r0, r3, #4
 80056b4:	6030      	str	r0, [r6, #0]
 80056b6:	062e      	lsls	r6, r5, #24
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	d501      	bpl.n	80056c0 <_printf_i+0x1c0>
 80056bc:	6019      	str	r1, [r3, #0]
 80056be:	e002      	b.n	80056c6 <_printf_i+0x1c6>
 80056c0:	0668      	lsls	r0, r5, #25
 80056c2:	d5fb      	bpl.n	80056bc <_printf_i+0x1bc>
 80056c4:	8019      	strh	r1, [r3, #0]
 80056c6:	2300      	movs	r3, #0
 80056c8:	6123      	str	r3, [r4, #16]
 80056ca:	4616      	mov	r6, r2
 80056cc:	e7bc      	b.n	8005648 <_printf_i+0x148>
 80056ce:	6833      	ldr	r3, [r6, #0]
 80056d0:	1d1a      	adds	r2, r3, #4
 80056d2:	6032      	str	r2, [r6, #0]
 80056d4:	681e      	ldr	r6, [r3, #0]
 80056d6:	6862      	ldr	r2, [r4, #4]
 80056d8:	2100      	movs	r1, #0
 80056da:	4630      	mov	r0, r6
 80056dc:	f7fa fd78 	bl	80001d0 <memchr>
 80056e0:	b108      	cbz	r0, 80056e6 <_printf_i+0x1e6>
 80056e2:	1b80      	subs	r0, r0, r6
 80056e4:	6060      	str	r0, [r4, #4]
 80056e6:	6863      	ldr	r3, [r4, #4]
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	2300      	movs	r3, #0
 80056ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056f0:	e7aa      	b.n	8005648 <_printf_i+0x148>
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	4632      	mov	r2, r6
 80056f6:	4649      	mov	r1, r9
 80056f8:	4640      	mov	r0, r8
 80056fa:	47d0      	blx	sl
 80056fc:	3001      	adds	r0, #1
 80056fe:	d0ad      	beq.n	800565c <_printf_i+0x15c>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	079b      	lsls	r3, r3, #30
 8005704:	d413      	bmi.n	800572e <_printf_i+0x22e>
 8005706:	68e0      	ldr	r0, [r4, #12]
 8005708:	9b03      	ldr	r3, [sp, #12]
 800570a:	4298      	cmp	r0, r3
 800570c:	bfb8      	it	lt
 800570e:	4618      	movlt	r0, r3
 8005710:	e7a6      	b.n	8005660 <_printf_i+0x160>
 8005712:	2301      	movs	r3, #1
 8005714:	4632      	mov	r2, r6
 8005716:	4649      	mov	r1, r9
 8005718:	4640      	mov	r0, r8
 800571a:	47d0      	blx	sl
 800571c:	3001      	adds	r0, #1
 800571e:	d09d      	beq.n	800565c <_printf_i+0x15c>
 8005720:	3501      	adds	r5, #1
 8005722:	68e3      	ldr	r3, [r4, #12]
 8005724:	9903      	ldr	r1, [sp, #12]
 8005726:	1a5b      	subs	r3, r3, r1
 8005728:	42ab      	cmp	r3, r5
 800572a:	dcf2      	bgt.n	8005712 <_printf_i+0x212>
 800572c:	e7eb      	b.n	8005706 <_printf_i+0x206>
 800572e:	2500      	movs	r5, #0
 8005730:	f104 0619 	add.w	r6, r4, #25
 8005734:	e7f5      	b.n	8005722 <_printf_i+0x222>
 8005736:	bf00      	nop
 8005738:	08007bce 	.word	0x08007bce
 800573c:	08007bdf 	.word	0x08007bdf

08005740 <std>:
 8005740:	2300      	movs	r3, #0
 8005742:	b510      	push	{r4, lr}
 8005744:	4604      	mov	r4, r0
 8005746:	e9c0 3300 	strd	r3, r3, [r0]
 800574a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800574e:	6083      	str	r3, [r0, #8]
 8005750:	8181      	strh	r1, [r0, #12]
 8005752:	6643      	str	r3, [r0, #100]	@ 0x64
 8005754:	81c2      	strh	r2, [r0, #14]
 8005756:	6183      	str	r3, [r0, #24]
 8005758:	4619      	mov	r1, r3
 800575a:	2208      	movs	r2, #8
 800575c:	305c      	adds	r0, #92	@ 0x5c
 800575e:	f000 f914 	bl	800598a <memset>
 8005762:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <std+0x58>)
 8005764:	6263      	str	r3, [r4, #36]	@ 0x24
 8005766:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <std+0x5c>)
 8005768:	62a3      	str	r3, [r4, #40]	@ 0x28
 800576a:	4b0d      	ldr	r3, [pc, #52]	@ (80057a0 <std+0x60>)
 800576c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800576e:	4b0d      	ldr	r3, [pc, #52]	@ (80057a4 <std+0x64>)
 8005770:	6323      	str	r3, [r4, #48]	@ 0x30
 8005772:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <std+0x68>)
 8005774:	6224      	str	r4, [r4, #32]
 8005776:	429c      	cmp	r4, r3
 8005778:	d006      	beq.n	8005788 <std+0x48>
 800577a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800577e:	4294      	cmp	r4, r2
 8005780:	d002      	beq.n	8005788 <std+0x48>
 8005782:	33d0      	adds	r3, #208	@ 0xd0
 8005784:	429c      	cmp	r4, r3
 8005786:	d105      	bne.n	8005794 <std+0x54>
 8005788:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800578c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005790:	f000 b978 	b.w	8005a84 <__retarget_lock_init_recursive>
 8005794:	bd10      	pop	{r4, pc}
 8005796:	bf00      	nop
 8005798:	08005905 	.word	0x08005905
 800579c:	08005927 	.word	0x08005927
 80057a0:	0800595f 	.word	0x0800595f
 80057a4:	08005983 	.word	0x08005983
 80057a8:	20000304 	.word	0x20000304

080057ac <stdio_exit_handler>:
 80057ac:	4a02      	ldr	r2, [pc, #8]	@ (80057b8 <stdio_exit_handler+0xc>)
 80057ae:	4903      	ldr	r1, [pc, #12]	@ (80057bc <stdio_exit_handler+0x10>)
 80057b0:	4803      	ldr	r0, [pc, #12]	@ (80057c0 <stdio_exit_handler+0x14>)
 80057b2:	f000 b869 	b.w	8005888 <_fwalk_sglue>
 80057b6:	bf00      	nop
 80057b8:	2000000c 	.word	0x2000000c
 80057bc:	080073e5 	.word	0x080073e5
 80057c0:	2000001c 	.word	0x2000001c

080057c4 <cleanup_stdio>:
 80057c4:	6841      	ldr	r1, [r0, #4]
 80057c6:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <cleanup_stdio+0x34>)
 80057c8:	4299      	cmp	r1, r3
 80057ca:	b510      	push	{r4, lr}
 80057cc:	4604      	mov	r4, r0
 80057ce:	d001      	beq.n	80057d4 <cleanup_stdio+0x10>
 80057d0:	f001 fe08 	bl	80073e4 <_fflush_r>
 80057d4:	68a1      	ldr	r1, [r4, #8]
 80057d6:	4b09      	ldr	r3, [pc, #36]	@ (80057fc <cleanup_stdio+0x38>)
 80057d8:	4299      	cmp	r1, r3
 80057da:	d002      	beq.n	80057e2 <cleanup_stdio+0x1e>
 80057dc:	4620      	mov	r0, r4
 80057de:	f001 fe01 	bl	80073e4 <_fflush_r>
 80057e2:	68e1      	ldr	r1, [r4, #12]
 80057e4:	4b06      	ldr	r3, [pc, #24]	@ (8005800 <cleanup_stdio+0x3c>)
 80057e6:	4299      	cmp	r1, r3
 80057e8:	d004      	beq.n	80057f4 <cleanup_stdio+0x30>
 80057ea:	4620      	mov	r0, r4
 80057ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f0:	f001 bdf8 	b.w	80073e4 <_fflush_r>
 80057f4:	bd10      	pop	{r4, pc}
 80057f6:	bf00      	nop
 80057f8:	20000304 	.word	0x20000304
 80057fc:	2000036c 	.word	0x2000036c
 8005800:	200003d4 	.word	0x200003d4

08005804 <global_stdio_init.part.0>:
 8005804:	b510      	push	{r4, lr}
 8005806:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <global_stdio_init.part.0+0x30>)
 8005808:	4c0b      	ldr	r4, [pc, #44]	@ (8005838 <global_stdio_init.part.0+0x34>)
 800580a:	4a0c      	ldr	r2, [pc, #48]	@ (800583c <global_stdio_init.part.0+0x38>)
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	4620      	mov	r0, r4
 8005810:	2200      	movs	r2, #0
 8005812:	2104      	movs	r1, #4
 8005814:	f7ff ff94 	bl	8005740 <std>
 8005818:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800581c:	2201      	movs	r2, #1
 800581e:	2109      	movs	r1, #9
 8005820:	f7ff ff8e 	bl	8005740 <std>
 8005824:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005828:	2202      	movs	r2, #2
 800582a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800582e:	2112      	movs	r1, #18
 8005830:	f7ff bf86 	b.w	8005740 <std>
 8005834:	2000043c 	.word	0x2000043c
 8005838:	20000304 	.word	0x20000304
 800583c:	080057ad 	.word	0x080057ad

08005840 <__sfp_lock_acquire>:
 8005840:	4801      	ldr	r0, [pc, #4]	@ (8005848 <__sfp_lock_acquire+0x8>)
 8005842:	f000 b920 	b.w	8005a86 <__retarget_lock_acquire_recursive>
 8005846:	bf00      	nop
 8005848:	20000445 	.word	0x20000445

0800584c <__sfp_lock_release>:
 800584c:	4801      	ldr	r0, [pc, #4]	@ (8005854 <__sfp_lock_release+0x8>)
 800584e:	f000 b91b 	b.w	8005a88 <__retarget_lock_release_recursive>
 8005852:	bf00      	nop
 8005854:	20000445 	.word	0x20000445

08005858 <__sinit>:
 8005858:	b510      	push	{r4, lr}
 800585a:	4604      	mov	r4, r0
 800585c:	f7ff fff0 	bl	8005840 <__sfp_lock_acquire>
 8005860:	6a23      	ldr	r3, [r4, #32]
 8005862:	b11b      	cbz	r3, 800586c <__sinit+0x14>
 8005864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005868:	f7ff bff0 	b.w	800584c <__sfp_lock_release>
 800586c:	4b04      	ldr	r3, [pc, #16]	@ (8005880 <__sinit+0x28>)
 800586e:	6223      	str	r3, [r4, #32]
 8005870:	4b04      	ldr	r3, [pc, #16]	@ (8005884 <__sinit+0x2c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f5      	bne.n	8005864 <__sinit+0xc>
 8005878:	f7ff ffc4 	bl	8005804 <global_stdio_init.part.0>
 800587c:	e7f2      	b.n	8005864 <__sinit+0xc>
 800587e:	bf00      	nop
 8005880:	080057c5 	.word	0x080057c5
 8005884:	2000043c 	.word	0x2000043c

08005888 <_fwalk_sglue>:
 8005888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800588c:	4607      	mov	r7, r0
 800588e:	4688      	mov	r8, r1
 8005890:	4614      	mov	r4, r2
 8005892:	2600      	movs	r6, #0
 8005894:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005898:	f1b9 0901 	subs.w	r9, r9, #1
 800589c:	d505      	bpl.n	80058aa <_fwalk_sglue+0x22>
 800589e:	6824      	ldr	r4, [r4, #0]
 80058a0:	2c00      	cmp	r4, #0
 80058a2:	d1f7      	bne.n	8005894 <_fwalk_sglue+0xc>
 80058a4:	4630      	mov	r0, r6
 80058a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058aa:	89ab      	ldrh	r3, [r5, #12]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d907      	bls.n	80058c0 <_fwalk_sglue+0x38>
 80058b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058b4:	3301      	adds	r3, #1
 80058b6:	d003      	beq.n	80058c0 <_fwalk_sglue+0x38>
 80058b8:	4629      	mov	r1, r5
 80058ba:	4638      	mov	r0, r7
 80058bc:	47c0      	blx	r8
 80058be:	4306      	orrs	r6, r0
 80058c0:	3568      	adds	r5, #104	@ 0x68
 80058c2:	e7e9      	b.n	8005898 <_fwalk_sglue+0x10>

080058c4 <siprintf>:
 80058c4:	b40e      	push	{r1, r2, r3}
 80058c6:	b500      	push	{lr}
 80058c8:	b09c      	sub	sp, #112	@ 0x70
 80058ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80058cc:	9002      	str	r0, [sp, #8]
 80058ce:	9006      	str	r0, [sp, #24]
 80058d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80058d4:	4809      	ldr	r0, [pc, #36]	@ (80058fc <siprintf+0x38>)
 80058d6:	9107      	str	r1, [sp, #28]
 80058d8:	9104      	str	r1, [sp, #16]
 80058da:	4909      	ldr	r1, [pc, #36]	@ (8005900 <siprintf+0x3c>)
 80058dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e0:	9105      	str	r1, [sp, #20]
 80058e2:	6800      	ldr	r0, [r0, #0]
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	a902      	add	r1, sp, #8
 80058e8:	f001 fbfc 	bl	80070e4 <_svfiprintf_r>
 80058ec:	9b02      	ldr	r3, [sp, #8]
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	b01c      	add	sp, #112	@ 0x70
 80058f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058f8:	b003      	add	sp, #12
 80058fa:	4770      	bx	lr
 80058fc:	20000018 	.word	0x20000018
 8005900:	ffff0208 	.word	0xffff0208

08005904 <__sread>:
 8005904:	b510      	push	{r4, lr}
 8005906:	460c      	mov	r4, r1
 8005908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590c:	f000 f86c 	bl	80059e8 <_read_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	bfab      	itete	ge
 8005914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005916:	89a3      	ldrhlt	r3, [r4, #12]
 8005918:	181b      	addge	r3, r3, r0
 800591a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800591e:	bfac      	ite	ge
 8005920:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005922:	81a3      	strhlt	r3, [r4, #12]
 8005924:	bd10      	pop	{r4, pc}

08005926 <__swrite>:
 8005926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	461f      	mov	r7, r3
 800592c:	898b      	ldrh	r3, [r1, #12]
 800592e:	05db      	lsls	r3, r3, #23
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	4616      	mov	r6, r2
 8005936:	d505      	bpl.n	8005944 <__swrite+0x1e>
 8005938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593c:	2302      	movs	r3, #2
 800593e:	2200      	movs	r2, #0
 8005940:	f000 f840 	bl	80059c4 <_lseek_r>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800594a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	4632      	mov	r2, r6
 8005952:	463b      	mov	r3, r7
 8005954:	4628      	mov	r0, r5
 8005956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595a:	f000 b857 	b.w	8005a0c <_write_r>

0800595e <__sseek>:
 800595e:	b510      	push	{r4, lr}
 8005960:	460c      	mov	r4, r1
 8005962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005966:	f000 f82d 	bl	80059c4 <_lseek_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	bf15      	itete	ne
 8005970:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800597a:	81a3      	strheq	r3, [r4, #12]
 800597c:	bf18      	it	ne
 800597e:	81a3      	strhne	r3, [r4, #12]
 8005980:	bd10      	pop	{r4, pc}

08005982 <__sclose>:
 8005982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005986:	f000 b80d 	b.w	80059a4 <_close_r>

0800598a <memset>:
 800598a:	4402      	add	r2, r0
 800598c:	4603      	mov	r3, r0
 800598e:	4293      	cmp	r3, r2
 8005990:	d100      	bne.n	8005994 <memset+0xa>
 8005992:	4770      	bx	lr
 8005994:	f803 1b01 	strb.w	r1, [r3], #1
 8005998:	e7f9      	b.n	800598e <memset+0x4>
	...

0800599c <_localeconv_r>:
 800599c:	4800      	ldr	r0, [pc, #0]	@ (80059a0 <_localeconv_r+0x4>)
 800599e:	4770      	bx	lr
 80059a0:	20000158 	.word	0x20000158

080059a4 <_close_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d06      	ldr	r5, [pc, #24]	@ (80059c0 <_close_r+0x1c>)
 80059a8:	2300      	movs	r3, #0
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fb ff91 	bl	80018d6 <_close>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_close_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_close_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	20000440 	.word	0x20000440

080059c4 <_lseek_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d07      	ldr	r5, [pc, #28]	@ (80059e4 <_lseek_r+0x20>)
 80059c8:	4604      	mov	r4, r0
 80059ca:	4608      	mov	r0, r1
 80059cc:	4611      	mov	r1, r2
 80059ce:	2200      	movs	r2, #0
 80059d0:	602a      	str	r2, [r5, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	f7fb ffa6 	bl	8001924 <_lseek>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d102      	bne.n	80059e2 <_lseek_r+0x1e>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	b103      	cbz	r3, 80059e2 <_lseek_r+0x1e>
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	20000440 	.word	0x20000440

080059e8 <_read_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4d07      	ldr	r5, [pc, #28]	@ (8005a08 <_read_r+0x20>)
 80059ec:	4604      	mov	r4, r0
 80059ee:	4608      	mov	r0, r1
 80059f0:	4611      	mov	r1, r2
 80059f2:	2200      	movs	r2, #0
 80059f4:	602a      	str	r2, [r5, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f7fb ff34 	bl	8001864 <_read>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_read_r+0x1e>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_read_r+0x1e>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	20000440 	.word	0x20000440

08005a0c <_write_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d07      	ldr	r5, [pc, #28]	@ (8005a2c <_write_r+0x20>)
 8005a10:	4604      	mov	r4, r0
 8005a12:	4608      	mov	r0, r1
 8005a14:	4611      	mov	r1, r2
 8005a16:	2200      	movs	r2, #0
 8005a18:	602a      	str	r2, [r5, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f7fb ff3f 	bl	800189e <_write>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_write_r+0x1e>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_write_r+0x1e>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000440 	.word	0x20000440

08005a30 <__errno>:
 8005a30:	4b01      	ldr	r3, [pc, #4]	@ (8005a38 <__errno+0x8>)
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20000018 	.word	0x20000018

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a74 <__libc_init_array+0x38>)
 8005a40:	4c0d      	ldr	r4, [pc, #52]	@ (8005a78 <__libc_init_array+0x3c>)
 8005a42:	1b64      	subs	r4, r4, r5
 8005a44:	10a4      	asrs	r4, r4, #2
 8005a46:	2600      	movs	r6, #0
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a7c <__libc_init_array+0x40>)
 8005a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a80 <__libc_init_array+0x44>)
 8005a50:	f002 f866 	bl	8007b20 <_init>
 8005a54:	1b64      	subs	r4, r4, r5
 8005a56:	10a4      	asrs	r4, r4, #2
 8005a58:	2600      	movs	r6, #0
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	08007f38 	.word	0x08007f38
 8005a78:	08007f38 	.word	0x08007f38
 8005a7c:	08007f38 	.word	0x08007f38
 8005a80:	08007f3c 	.word	0x08007f3c

08005a84 <__retarget_lock_init_recursive>:
 8005a84:	4770      	bx	lr

08005a86 <__retarget_lock_acquire_recursive>:
 8005a86:	4770      	bx	lr

08005a88 <__retarget_lock_release_recursive>:
 8005a88:	4770      	bx	lr

08005a8a <quorem>:
 8005a8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8e:	6903      	ldr	r3, [r0, #16]
 8005a90:	690c      	ldr	r4, [r1, #16]
 8005a92:	42a3      	cmp	r3, r4
 8005a94:	4607      	mov	r7, r0
 8005a96:	db7e      	blt.n	8005b96 <quorem+0x10c>
 8005a98:	3c01      	subs	r4, #1
 8005a9a:	f101 0814 	add.w	r8, r1, #20
 8005a9e:	00a3      	lsls	r3, r4, #2
 8005aa0:	f100 0514 	add.w	r5, r0, #20
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005abc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ac0:	d32e      	bcc.n	8005b20 <quorem+0x96>
 8005ac2:	f04f 0a00 	mov.w	sl, #0
 8005ac6:	46c4      	mov	ip, r8
 8005ac8:	46ae      	mov	lr, r5
 8005aca:	46d3      	mov	fp, sl
 8005acc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ad0:	b298      	uxth	r0, r3
 8005ad2:	fb06 a000 	mla	r0, r6, r0, sl
 8005ad6:	0c02      	lsrs	r2, r0, #16
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	fb06 2303 	mla	r3, r6, r3, r2
 8005ade:	f8de 2000 	ldr.w	r2, [lr]
 8005ae2:	b280      	uxth	r0, r0
 8005ae4:	b292      	uxth	r2, r2
 8005ae6:	1a12      	subs	r2, r2, r0
 8005ae8:	445a      	add	r2, fp
 8005aea:	f8de 0000 	ldr.w	r0, [lr]
 8005aee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005af8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005afc:	b292      	uxth	r2, r2
 8005afe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b02:	45e1      	cmp	r9, ip
 8005b04:	f84e 2b04 	str.w	r2, [lr], #4
 8005b08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b0c:	d2de      	bcs.n	8005acc <quorem+0x42>
 8005b0e:	9b00      	ldr	r3, [sp, #0]
 8005b10:	58eb      	ldr	r3, [r5, r3]
 8005b12:	b92b      	cbnz	r3, 8005b20 <quorem+0x96>
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	3b04      	subs	r3, #4
 8005b18:	429d      	cmp	r5, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	d32f      	bcc.n	8005b7e <quorem+0xf4>
 8005b1e:	613c      	str	r4, [r7, #16]
 8005b20:	4638      	mov	r0, r7
 8005b22:	f001 f97b 	bl	8006e1c <__mcmp>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	db25      	blt.n	8005b76 <quorem+0xec>
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b32:	f8d1 c000 	ldr.w	ip, [r1]
 8005b36:	fa1f fe82 	uxth.w	lr, r2
 8005b3a:	fa1f f38c 	uxth.w	r3, ip
 8005b3e:	eba3 030e 	sub.w	r3, r3, lr
 8005b42:	4403      	add	r3, r0
 8005b44:	0c12      	lsrs	r2, r2, #16
 8005b46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005b4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b54:	45c1      	cmp	r9, r8
 8005b56:	f841 3b04 	str.w	r3, [r1], #4
 8005b5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b5e:	d2e6      	bcs.n	8005b2e <quorem+0xa4>
 8005b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b68:	b922      	cbnz	r2, 8005b74 <quorem+0xea>
 8005b6a:	3b04      	subs	r3, #4
 8005b6c:	429d      	cmp	r5, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	d30b      	bcc.n	8005b8a <quorem+0x100>
 8005b72:	613c      	str	r4, [r7, #16]
 8005b74:	3601      	adds	r6, #1
 8005b76:	4630      	mov	r0, r6
 8005b78:	b003      	add	sp, #12
 8005b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7e:	6812      	ldr	r2, [r2, #0]
 8005b80:	3b04      	subs	r3, #4
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	d1cb      	bne.n	8005b1e <quorem+0x94>
 8005b86:	3c01      	subs	r4, #1
 8005b88:	e7c6      	b.n	8005b18 <quorem+0x8e>
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	3b04      	subs	r3, #4
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	d1ef      	bne.n	8005b72 <quorem+0xe8>
 8005b92:	3c01      	subs	r4, #1
 8005b94:	e7ea      	b.n	8005b6c <quorem+0xe2>
 8005b96:	2000      	movs	r0, #0
 8005b98:	e7ee      	b.n	8005b78 <quorem+0xee>
 8005b9a:	0000      	movs	r0, r0
 8005b9c:	0000      	movs	r0, r0
	...

08005ba0 <_dtoa_r>:
 8005ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba4:	69c7      	ldr	r7, [r0, #28]
 8005ba6:	b099      	sub	sp, #100	@ 0x64
 8005ba8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005bac:	ec55 4b10 	vmov	r4, r5, d0
 8005bb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005bb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005bb4:	4683      	mov	fp, r0
 8005bb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005bb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005bba:	b97f      	cbnz	r7, 8005bdc <_dtoa_r+0x3c>
 8005bbc:	2010      	movs	r0, #16
 8005bbe:	f000 fdfd 	bl	80067bc <malloc>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005bc8:	b920      	cbnz	r0, 8005bd4 <_dtoa_r+0x34>
 8005bca:	4ba7      	ldr	r3, [pc, #668]	@ (8005e68 <_dtoa_r+0x2c8>)
 8005bcc:	21ef      	movs	r1, #239	@ 0xef
 8005bce:	48a7      	ldr	r0, [pc, #668]	@ (8005e6c <_dtoa_r+0x2cc>)
 8005bd0:	f001 fc68 	bl	80074a4 <__assert_func>
 8005bd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005bd8:	6007      	str	r7, [r0, #0]
 8005bda:	60c7      	str	r7, [r0, #12]
 8005bdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005be0:	6819      	ldr	r1, [r3, #0]
 8005be2:	b159      	cbz	r1, 8005bfc <_dtoa_r+0x5c>
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	604a      	str	r2, [r1, #4]
 8005be8:	2301      	movs	r3, #1
 8005bea:	4093      	lsls	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
 8005bee:	4658      	mov	r0, fp
 8005bf0:	f000 feda 	bl	80069a8 <_Bfree>
 8005bf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	1e2b      	subs	r3, r5, #0
 8005bfe:	bfb9      	ittee	lt
 8005c00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c04:	9303      	strlt	r3, [sp, #12]
 8005c06:	2300      	movge	r3, #0
 8005c08:	6033      	strge	r3, [r6, #0]
 8005c0a:	9f03      	ldr	r7, [sp, #12]
 8005c0c:	4b98      	ldr	r3, [pc, #608]	@ (8005e70 <_dtoa_r+0x2d0>)
 8005c0e:	bfbc      	itt	lt
 8005c10:	2201      	movlt	r2, #1
 8005c12:	6032      	strlt	r2, [r6, #0]
 8005c14:	43bb      	bics	r3, r7
 8005c16:	d112      	bne.n	8005c3e <_dtoa_r+0x9e>
 8005c18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c24:	4323      	orrs	r3, r4
 8005c26:	f000 854d 	beq.w	80066c4 <_dtoa_r+0xb24>
 8005c2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005e84 <_dtoa_r+0x2e4>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 854f 	beq.w	80066d4 <_dtoa_r+0xb34>
 8005c36:	f10a 0303 	add.w	r3, sl, #3
 8005c3a:	f000 bd49 	b.w	80066d0 <_dtoa_r+0xb30>
 8005c3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c42:	2200      	movs	r2, #0
 8005c44:	ec51 0b17 	vmov	r0, r1, d7
 8005c48:	2300      	movs	r3, #0
 8005c4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005c4e:	f7fa ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c52:	4680      	mov	r8, r0
 8005c54:	b158      	cbz	r0, 8005c6e <_dtoa_r+0xce>
 8005c56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c58:	2301      	movs	r3, #1
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c5e:	b113      	cbz	r3, 8005c66 <_dtoa_r+0xc6>
 8005c60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005c62:	4b84      	ldr	r3, [pc, #528]	@ (8005e74 <_dtoa_r+0x2d4>)
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005e88 <_dtoa_r+0x2e8>
 8005c6a:	f000 bd33 	b.w	80066d4 <_dtoa_r+0xb34>
 8005c6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005c72:	aa16      	add	r2, sp, #88	@ 0x58
 8005c74:	a917      	add	r1, sp, #92	@ 0x5c
 8005c76:	4658      	mov	r0, fp
 8005c78:	f001 f980 	bl	8006f7c <__d2b>
 8005c7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005c80:	4681      	mov	r9, r0
 8005c82:	2e00      	cmp	r6, #0
 8005c84:	d077      	beq.n	8005d76 <_dtoa_r+0x1d6>
 8005c86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005c98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005c9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	4b74      	ldr	r3, [pc, #464]	@ (8005e78 <_dtoa_r+0x2d8>)
 8005ca6:	f7fa faef 	bl	8000288 <__aeabi_dsub>
 8005caa:	a369      	add	r3, pc, #420	@ (adr r3, 8005e50 <_dtoa_r+0x2b0>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f7fa fca2 	bl	80005f8 <__aeabi_dmul>
 8005cb4:	a368      	add	r3, pc, #416	@ (adr r3, 8005e58 <_dtoa_r+0x2b8>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa fae7 	bl	800028c <__adddf3>
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	460d      	mov	r5, r1
 8005cc4:	f7fa fc2e 	bl	8000524 <__aeabi_i2d>
 8005cc8:	a365      	add	r3, pc, #404	@ (adr r3, 8005e60 <_dtoa_r+0x2c0>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fc93 	bl	80005f8 <__aeabi_dmul>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f7fa fad7 	bl	800028c <__adddf3>
 8005cde:	4604      	mov	r4, r0
 8005ce0:	460d      	mov	r5, r1
 8005ce2:	f7fa ff39 	bl	8000b58 <__aeabi_d2iz>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4607      	mov	r7, r0
 8005cea:	2300      	movs	r3, #0
 8005cec:	4620      	mov	r0, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f7fa fef4 	bl	8000adc <__aeabi_dcmplt>
 8005cf4:	b140      	cbz	r0, 8005d08 <_dtoa_r+0x168>
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	f7fa fc14 	bl	8000524 <__aeabi_i2d>
 8005cfc:	4622      	mov	r2, r4
 8005cfe:	462b      	mov	r3, r5
 8005d00:	f7fa fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d04:	b900      	cbnz	r0, 8005d08 <_dtoa_r+0x168>
 8005d06:	3f01      	subs	r7, #1
 8005d08:	2f16      	cmp	r7, #22
 8005d0a:	d851      	bhi.n	8005db0 <_dtoa_r+0x210>
 8005d0c:	4b5b      	ldr	r3, [pc, #364]	@ (8005e7c <_dtoa_r+0x2dc>)
 8005d0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d1a:	f7fa fedf 	bl	8000adc <__aeabi_dcmplt>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d048      	beq.n	8005db4 <_dtoa_r+0x214>
 8005d22:	3f01      	subs	r7, #1
 8005d24:	2300      	movs	r3, #0
 8005d26:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005d2a:	1b9b      	subs	r3, r3, r6
 8005d2c:	1e5a      	subs	r2, r3, #1
 8005d2e:	bf44      	itt	mi
 8005d30:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d34:	2300      	movmi	r3, #0
 8005d36:	9208      	str	r2, [sp, #32]
 8005d38:	bf54      	ite	pl
 8005d3a:	f04f 0800 	movpl.w	r8, #0
 8005d3e:	9308      	strmi	r3, [sp, #32]
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	db39      	blt.n	8005db8 <_dtoa_r+0x218>
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005d48:	443b      	add	r3, r7
 8005d4a:	9308      	str	r3, [sp, #32]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d864      	bhi.n	8005e20 <_dtoa_r+0x280>
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	bfc4      	itt	gt
 8005d5a:	3b04      	subgt	r3, #4
 8005d5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d60:	f1a3 0302 	sub.w	r3, r3, #2
 8005d64:	bfcc      	ite	gt
 8005d66:	2400      	movgt	r4, #0
 8005d68:	2401      	movle	r4, #1
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d863      	bhi.n	8005e36 <_dtoa_r+0x296>
 8005d6e:	e8df f003 	tbb	[pc, r3]
 8005d72:	372a      	.short	0x372a
 8005d74:	5535      	.short	0x5535
 8005d76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005d7a:	441e      	add	r6, r3
 8005d7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	bfc1      	itttt	gt
 8005d84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005d88:	409f      	lslgt	r7, r3
 8005d8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005d8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d92:	bfd6      	itet	le
 8005d94:	f1c3 0320 	rsble	r3, r3, #32
 8005d98:	ea47 0003 	orrgt.w	r0, r7, r3
 8005d9c:	fa04 f003 	lslle.w	r0, r4, r3
 8005da0:	f7fa fbb0 	bl	8000504 <__aeabi_ui2d>
 8005da4:	2201      	movs	r2, #1
 8005da6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005daa:	3e01      	subs	r6, #1
 8005dac:	9214      	str	r2, [sp, #80]	@ 0x50
 8005dae:	e777      	b.n	8005ca0 <_dtoa_r+0x100>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e7b8      	b.n	8005d26 <_dtoa_r+0x186>
 8005db4:	9012      	str	r0, [sp, #72]	@ 0x48
 8005db6:	e7b7      	b.n	8005d28 <_dtoa_r+0x188>
 8005db8:	427b      	negs	r3, r7
 8005dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	eba8 0807 	sub.w	r8, r8, r7
 8005dc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005dc4:	e7c4      	b.n	8005d50 <_dtoa_r+0x1b0>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	dc35      	bgt.n	8005e3c <_dtoa_r+0x29c>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	9307      	str	r3, [sp, #28]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005dda:	e00b      	b.n	8005df4 <_dtoa_r+0x254>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e7f3      	b.n	8005dc8 <_dtoa_r+0x228>
 8005de0:	2300      	movs	r3, #0
 8005de2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	9307      	str	r3, [sp, #28]
 8005df0:	bfb8      	it	lt
 8005df2:	2301      	movlt	r3, #1
 8005df4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005df8:	2100      	movs	r1, #0
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	f102 0514 	add.w	r5, r2, #20
 8005e00:	429d      	cmp	r5, r3
 8005e02:	d91f      	bls.n	8005e44 <_dtoa_r+0x2a4>
 8005e04:	6041      	str	r1, [r0, #4]
 8005e06:	4658      	mov	r0, fp
 8005e08:	f000 fd8e 	bl	8006928 <_Balloc>
 8005e0c:	4682      	mov	sl, r0
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d13c      	bne.n	8005e8c <_dtoa_r+0x2ec>
 8005e12:	4b1b      	ldr	r3, [pc, #108]	@ (8005e80 <_dtoa_r+0x2e0>)
 8005e14:	4602      	mov	r2, r0
 8005e16:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e1a:	e6d8      	b.n	8005bce <_dtoa_r+0x2e>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e7e0      	b.n	8005de2 <_dtoa_r+0x242>
 8005e20:	2401      	movs	r4, #1
 8005e22:	2300      	movs	r3, #0
 8005e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e28:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	9307      	str	r3, [sp, #28]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2312      	movs	r3, #18
 8005e34:	e7d0      	b.n	8005dd8 <_dtoa_r+0x238>
 8005e36:	2301      	movs	r3, #1
 8005e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e3a:	e7f5      	b.n	8005e28 <_dtoa_r+0x288>
 8005e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	9307      	str	r3, [sp, #28]
 8005e42:	e7d7      	b.n	8005df4 <_dtoa_r+0x254>
 8005e44:	3101      	adds	r1, #1
 8005e46:	0052      	lsls	r2, r2, #1
 8005e48:	e7d8      	b.n	8005dfc <_dtoa_r+0x25c>
 8005e4a:	bf00      	nop
 8005e4c:	f3af 8000 	nop.w
 8005e50:	636f4361 	.word	0x636f4361
 8005e54:	3fd287a7 	.word	0x3fd287a7
 8005e58:	8b60c8b3 	.word	0x8b60c8b3
 8005e5c:	3fc68a28 	.word	0x3fc68a28
 8005e60:	509f79fb 	.word	0x509f79fb
 8005e64:	3fd34413 	.word	0x3fd34413
 8005e68:	08007bfd 	.word	0x08007bfd
 8005e6c:	08007c14 	.word	0x08007c14
 8005e70:	7ff00000 	.word	0x7ff00000
 8005e74:	08007bcd 	.word	0x08007bcd
 8005e78:	3ff80000 	.word	0x3ff80000
 8005e7c:	08007d10 	.word	0x08007d10
 8005e80:	08007c6c 	.word	0x08007c6c
 8005e84:	08007bf9 	.word	0x08007bf9
 8005e88:	08007bcc 	.word	0x08007bcc
 8005e8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e90:	6018      	str	r0, [r3, #0]
 8005e92:	9b07      	ldr	r3, [sp, #28]
 8005e94:	2b0e      	cmp	r3, #14
 8005e96:	f200 80a4 	bhi.w	8005fe2 <_dtoa_r+0x442>
 8005e9a:	2c00      	cmp	r4, #0
 8005e9c:	f000 80a1 	beq.w	8005fe2 <_dtoa_r+0x442>
 8005ea0:	2f00      	cmp	r7, #0
 8005ea2:	dd33      	ble.n	8005f0c <_dtoa_r+0x36c>
 8005ea4:	4bad      	ldr	r3, [pc, #692]	@ (800615c <_dtoa_r+0x5bc>)
 8005ea6:	f007 020f 	and.w	r2, r7, #15
 8005eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eae:	ed93 7b00 	vldr	d7, [r3]
 8005eb2:	05f8      	lsls	r0, r7, #23
 8005eb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005eb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005ebc:	d516      	bpl.n	8005eec <_dtoa_r+0x34c>
 8005ebe:	4ba8      	ldr	r3, [pc, #672]	@ (8006160 <_dtoa_r+0x5c0>)
 8005ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ec8:	f7fa fcc0 	bl	800084c <__aeabi_ddiv>
 8005ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ed0:	f004 040f 	and.w	r4, r4, #15
 8005ed4:	2603      	movs	r6, #3
 8005ed6:	4da2      	ldr	r5, [pc, #648]	@ (8006160 <_dtoa_r+0x5c0>)
 8005ed8:	b954      	cbnz	r4, 8005ef0 <_dtoa_r+0x350>
 8005eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee2:	f7fa fcb3 	bl	800084c <__aeabi_ddiv>
 8005ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eea:	e028      	b.n	8005f3e <_dtoa_r+0x39e>
 8005eec:	2602      	movs	r6, #2
 8005eee:	e7f2      	b.n	8005ed6 <_dtoa_r+0x336>
 8005ef0:	07e1      	lsls	r1, r4, #31
 8005ef2:	d508      	bpl.n	8005f06 <_dtoa_r+0x366>
 8005ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005efc:	f7fa fb7c 	bl	80005f8 <__aeabi_dmul>
 8005f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f04:	3601      	adds	r6, #1
 8005f06:	1064      	asrs	r4, r4, #1
 8005f08:	3508      	adds	r5, #8
 8005f0a:	e7e5      	b.n	8005ed8 <_dtoa_r+0x338>
 8005f0c:	f000 80d2 	beq.w	80060b4 <_dtoa_r+0x514>
 8005f10:	427c      	negs	r4, r7
 8005f12:	4b92      	ldr	r3, [pc, #584]	@ (800615c <_dtoa_r+0x5bc>)
 8005f14:	4d92      	ldr	r5, [pc, #584]	@ (8006160 <_dtoa_r+0x5c0>)
 8005f16:	f004 020f 	and.w	r2, r4, #15
 8005f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f26:	f7fa fb67 	bl	80005f8 <__aeabi_dmul>
 8005f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f2e:	1124      	asrs	r4, r4, #4
 8005f30:	2300      	movs	r3, #0
 8005f32:	2602      	movs	r6, #2
 8005f34:	2c00      	cmp	r4, #0
 8005f36:	f040 80b2 	bne.w	800609e <_dtoa_r+0x4fe>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1d3      	bne.n	8005ee6 <_dtoa_r+0x346>
 8005f3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80b7 	beq.w	80060b8 <_dtoa_r+0x518>
 8005f4a:	4b86      	ldr	r3, [pc, #536]	@ (8006164 <_dtoa_r+0x5c4>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4620      	mov	r0, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	f7fa fdc3 	bl	8000adc <__aeabi_dcmplt>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f000 80ae 	beq.w	80060b8 <_dtoa_r+0x518>
 8005f5c:	9b07      	ldr	r3, [sp, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80aa 	beq.w	80060b8 <_dtoa_r+0x518>
 8005f64:	9b00      	ldr	r3, [sp, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	dd37      	ble.n	8005fda <_dtoa_r+0x43a>
 8005f6a:	1e7b      	subs	r3, r7, #1
 8005f6c:	9304      	str	r3, [sp, #16]
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4b7d      	ldr	r3, [pc, #500]	@ (8006168 <_dtoa_r+0x5c8>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	4629      	mov	r1, r5
 8005f76:	f7fa fb3f 	bl	80005f8 <__aeabi_dmul>
 8005f7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f7e:	9c00      	ldr	r4, [sp, #0]
 8005f80:	3601      	adds	r6, #1
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7fa face 	bl	8000524 <__aeabi_i2d>
 8005f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f8c:	f7fa fb34 	bl	80005f8 <__aeabi_dmul>
 8005f90:	4b76      	ldr	r3, [pc, #472]	@ (800616c <_dtoa_r+0x5cc>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	f7fa f97a 	bl	800028c <__adddf3>
 8005f98:	4605      	mov	r5, r0
 8005f9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005f9e:	2c00      	cmp	r4, #0
 8005fa0:	f040 808d 	bne.w	80060be <_dtoa_r+0x51e>
 8005fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fa8:	4b71      	ldr	r3, [pc, #452]	@ (8006170 <_dtoa_r+0x5d0>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	f7fa f96c 	bl	8000288 <__aeabi_dsub>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fb8:	462a      	mov	r2, r5
 8005fba:	4633      	mov	r3, r6
 8005fbc:	f7fa fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	f040 828b 	bne.w	80064dc <_dtoa_r+0x93c>
 8005fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fca:	462a      	mov	r2, r5
 8005fcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005fd0:	f7fa fd84 	bl	8000adc <__aeabi_dcmplt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	f040 8128 	bne.w	800622a <_dtoa_r+0x68a>
 8005fda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005fde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005fe2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f2c0 815a 	blt.w	800629e <_dtoa_r+0x6fe>
 8005fea:	2f0e      	cmp	r7, #14
 8005fec:	f300 8157 	bgt.w	800629e <_dtoa_r+0x6fe>
 8005ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800615c <_dtoa_r+0x5bc>)
 8005ff2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ff6:	ed93 7b00 	vldr	d7, [r3]
 8005ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	ed8d 7b00 	vstr	d7, [sp]
 8006002:	da03      	bge.n	800600c <_dtoa_r+0x46c>
 8006004:	9b07      	ldr	r3, [sp, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f340 8101 	ble.w	800620e <_dtoa_r+0x66e>
 800600c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006010:	4656      	mov	r6, sl
 8006012:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa fc17 	bl	800084c <__aeabi_ddiv>
 800601e:	f7fa fd9b 	bl	8000b58 <__aeabi_d2iz>
 8006022:	4680      	mov	r8, r0
 8006024:	f7fa fa7e 	bl	8000524 <__aeabi_i2d>
 8006028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800602c:	f7fa fae4 	bl	80005f8 <__aeabi_dmul>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4620      	mov	r0, r4
 8006036:	4629      	mov	r1, r5
 8006038:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800603c:	f7fa f924 	bl	8000288 <__aeabi_dsub>
 8006040:	f806 4b01 	strb.w	r4, [r6], #1
 8006044:	9d07      	ldr	r5, [sp, #28]
 8006046:	eba6 040a 	sub.w	r4, r6, sl
 800604a:	42a5      	cmp	r5, r4
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	f040 8117 	bne.w	8006282 <_dtoa_r+0x6e2>
 8006054:	f7fa f91a 	bl	800028c <__adddf3>
 8006058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800605c:	4604      	mov	r4, r0
 800605e:	460d      	mov	r5, r1
 8006060:	f7fa fd5a 	bl	8000b18 <__aeabi_dcmpgt>
 8006064:	2800      	cmp	r0, #0
 8006066:	f040 80f9 	bne.w	800625c <_dtoa_r+0x6bc>
 800606a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800606e:	4620      	mov	r0, r4
 8006070:	4629      	mov	r1, r5
 8006072:	f7fa fd29 	bl	8000ac8 <__aeabi_dcmpeq>
 8006076:	b118      	cbz	r0, 8006080 <_dtoa_r+0x4e0>
 8006078:	f018 0f01 	tst.w	r8, #1
 800607c:	f040 80ee 	bne.w	800625c <_dtoa_r+0x6bc>
 8006080:	4649      	mov	r1, r9
 8006082:	4658      	mov	r0, fp
 8006084:	f000 fc90 	bl	80069a8 <_Bfree>
 8006088:	2300      	movs	r3, #0
 800608a:	7033      	strb	r3, [r6, #0]
 800608c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800608e:	3701      	adds	r7, #1
 8006090:	601f      	str	r7, [r3, #0]
 8006092:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 831d 	beq.w	80066d4 <_dtoa_r+0xb34>
 800609a:	601e      	str	r6, [r3, #0]
 800609c:	e31a      	b.n	80066d4 <_dtoa_r+0xb34>
 800609e:	07e2      	lsls	r2, r4, #31
 80060a0:	d505      	bpl.n	80060ae <_dtoa_r+0x50e>
 80060a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060a6:	f7fa faa7 	bl	80005f8 <__aeabi_dmul>
 80060aa:	3601      	adds	r6, #1
 80060ac:	2301      	movs	r3, #1
 80060ae:	1064      	asrs	r4, r4, #1
 80060b0:	3508      	adds	r5, #8
 80060b2:	e73f      	b.n	8005f34 <_dtoa_r+0x394>
 80060b4:	2602      	movs	r6, #2
 80060b6:	e742      	b.n	8005f3e <_dtoa_r+0x39e>
 80060b8:	9c07      	ldr	r4, [sp, #28]
 80060ba:	9704      	str	r7, [sp, #16]
 80060bc:	e761      	b.n	8005f82 <_dtoa_r+0x3e2>
 80060be:	4b27      	ldr	r3, [pc, #156]	@ (800615c <_dtoa_r+0x5bc>)
 80060c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060ca:	4454      	add	r4, sl
 80060cc:	2900      	cmp	r1, #0
 80060ce:	d053      	beq.n	8006178 <_dtoa_r+0x5d8>
 80060d0:	4928      	ldr	r1, [pc, #160]	@ (8006174 <_dtoa_r+0x5d4>)
 80060d2:	2000      	movs	r0, #0
 80060d4:	f7fa fbba 	bl	800084c <__aeabi_ddiv>
 80060d8:	4633      	mov	r3, r6
 80060da:	462a      	mov	r2, r5
 80060dc:	f7fa f8d4 	bl	8000288 <__aeabi_dsub>
 80060e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060e4:	4656      	mov	r6, sl
 80060e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ea:	f7fa fd35 	bl	8000b58 <__aeabi_d2iz>
 80060ee:	4605      	mov	r5, r0
 80060f0:	f7fa fa18 	bl	8000524 <__aeabi_i2d>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060fc:	f7fa f8c4 	bl	8000288 <__aeabi_dsub>
 8006100:	3530      	adds	r5, #48	@ 0x30
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800610a:	f806 5b01 	strb.w	r5, [r6], #1
 800610e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006112:	f7fa fce3 	bl	8000adc <__aeabi_dcmplt>
 8006116:	2800      	cmp	r0, #0
 8006118:	d171      	bne.n	80061fe <_dtoa_r+0x65e>
 800611a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800611e:	4911      	ldr	r1, [pc, #68]	@ (8006164 <_dtoa_r+0x5c4>)
 8006120:	2000      	movs	r0, #0
 8006122:	f7fa f8b1 	bl	8000288 <__aeabi_dsub>
 8006126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800612a:	f7fa fcd7 	bl	8000adc <__aeabi_dcmplt>
 800612e:	2800      	cmp	r0, #0
 8006130:	f040 8095 	bne.w	800625e <_dtoa_r+0x6be>
 8006134:	42a6      	cmp	r6, r4
 8006136:	f43f af50 	beq.w	8005fda <_dtoa_r+0x43a>
 800613a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800613e:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <_dtoa_r+0x5c8>)
 8006140:	2200      	movs	r2, #0
 8006142:	f7fa fa59 	bl	80005f8 <__aeabi_dmul>
 8006146:	4b08      	ldr	r3, [pc, #32]	@ (8006168 <_dtoa_r+0x5c8>)
 8006148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800614c:	2200      	movs	r2, #0
 800614e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006152:	f7fa fa51 	bl	80005f8 <__aeabi_dmul>
 8006156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800615a:	e7c4      	b.n	80060e6 <_dtoa_r+0x546>
 800615c:	08007d10 	.word	0x08007d10
 8006160:	08007ce8 	.word	0x08007ce8
 8006164:	3ff00000 	.word	0x3ff00000
 8006168:	40240000 	.word	0x40240000
 800616c:	401c0000 	.word	0x401c0000
 8006170:	40140000 	.word	0x40140000
 8006174:	3fe00000 	.word	0x3fe00000
 8006178:	4631      	mov	r1, r6
 800617a:	4628      	mov	r0, r5
 800617c:	f7fa fa3c 	bl	80005f8 <__aeabi_dmul>
 8006180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006184:	9415      	str	r4, [sp, #84]	@ 0x54
 8006186:	4656      	mov	r6, sl
 8006188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618c:	f7fa fce4 	bl	8000b58 <__aeabi_d2iz>
 8006190:	4605      	mov	r5, r0
 8006192:	f7fa f9c7 	bl	8000524 <__aeabi_i2d>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800619e:	f7fa f873 	bl	8000288 <__aeabi_dsub>
 80061a2:	3530      	adds	r5, #48	@ 0x30
 80061a4:	f806 5b01 	strb.w	r5, [r6], #1
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	42a6      	cmp	r6, r4
 80061ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	d124      	bne.n	8006202 <_dtoa_r+0x662>
 80061b8:	4bac      	ldr	r3, [pc, #688]	@ (800646c <_dtoa_r+0x8cc>)
 80061ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061be:	f7fa f865 	bl	800028c <__adddf3>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ca:	f7fa fca5 	bl	8000b18 <__aeabi_dcmpgt>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d145      	bne.n	800625e <_dtoa_r+0x6be>
 80061d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061d6:	49a5      	ldr	r1, [pc, #660]	@ (800646c <_dtoa_r+0x8cc>)
 80061d8:	2000      	movs	r0, #0
 80061da:	f7fa f855 	bl	8000288 <__aeabi_dsub>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e6:	f7fa fc79 	bl	8000adc <__aeabi_dcmplt>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	f43f aef5 	beq.w	8005fda <_dtoa_r+0x43a>
 80061f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80061f2:	1e73      	subs	r3, r6, #1
 80061f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80061f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80061fa:	2b30      	cmp	r3, #48	@ 0x30
 80061fc:	d0f8      	beq.n	80061f0 <_dtoa_r+0x650>
 80061fe:	9f04      	ldr	r7, [sp, #16]
 8006200:	e73e      	b.n	8006080 <_dtoa_r+0x4e0>
 8006202:	4b9b      	ldr	r3, [pc, #620]	@ (8006470 <_dtoa_r+0x8d0>)
 8006204:	f7fa f9f8 	bl	80005f8 <__aeabi_dmul>
 8006208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800620c:	e7bc      	b.n	8006188 <_dtoa_r+0x5e8>
 800620e:	d10c      	bne.n	800622a <_dtoa_r+0x68a>
 8006210:	4b98      	ldr	r3, [pc, #608]	@ (8006474 <_dtoa_r+0x8d4>)
 8006212:	2200      	movs	r2, #0
 8006214:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006218:	f7fa f9ee 	bl	80005f8 <__aeabi_dmul>
 800621c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006220:	f7fa fc70 	bl	8000b04 <__aeabi_dcmpge>
 8006224:	2800      	cmp	r0, #0
 8006226:	f000 8157 	beq.w	80064d8 <_dtoa_r+0x938>
 800622a:	2400      	movs	r4, #0
 800622c:	4625      	mov	r5, r4
 800622e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006230:	43db      	mvns	r3, r3
 8006232:	9304      	str	r3, [sp, #16]
 8006234:	4656      	mov	r6, sl
 8006236:	2700      	movs	r7, #0
 8006238:	4621      	mov	r1, r4
 800623a:	4658      	mov	r0, fp
 800623c:	f000 fbb4 	bl	80069a8 <_Bfree>
 8006240:	2d00      	cmp	r5, #0
 8006242:	d0dc      	beq.n	80061fe <_dtoa_r+0x65e>
 8006244:	b12f      	cbz	r7, 8006252 <_dtoa_r+0x6b2>
 8006246:	42af      	cmp	r7, r5
 8006248:	d003      	beq.n	8006252 <_dtoa_r+0x6b2>
 800624a:	4639      	mov	r1, r7
 800624c:	4658      	mov	r0, fp
 800624e:	f000 fbab 	bl	80069a8 <_Bfree>
 8006252:	4629      	mov	r1, r5
 8006254:	4658      	mov	r0, fp
 8006256:	f000 fba7 	bl	80069a8 <_Bfree>
 800625a:	e7d0      	b.n	80061fe <_dtoa_r+0x65e>
 800625c:	9704      	str	r7, [sp, #16]
 800625e:	4633      	mov	r3, r6
 8006260:	461e      	mov	r6, r3
 8006262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006266:	2a39      	cmp	r2, #57	@ 0x39
 8006268:	d107      	bne.n	800627a <_dtoa_r+0x6da>
 800626a:	459a      	cmp	sl, r3
 800626c:	d1f8      	bne.n	8006260 <_dtoa_r+0x6c0>
 800626e:	9a04      	ldr	r2, [sp, #16]
 8006270:	3201      	adds	r2, #1
 8006272:	9204      	str	r2, [sp, #16]
 8006274:	2230      	movs	r2, #48	@ 0x30
 8006276:	f88a 2000 	strb.w	r2, [sl]
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	3201      	adds	r2, #1
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	e7bd      	b.n	80061fe <_dtoa_r+0x65e>
 8006282:	4b7b      	ldr	r3, [pc, #492]	@ (8006470 <_dtoa_r+0x8d0>)
 8006284:	2200      	movs	r2, #0
 8006286:	f7fa f9b7 	bl	80005f8 <__aeabi_dmul>
 800628a:	2200      	movs	r2, #0
 800628c:	2300      	movs	r3, #0
 800628e:	4604      	mov	r4, r0
 8006290:	460d      	mov	r5, r1
 8006292:	f7fa fc19 	bl	8000ac8 <__aeabi_dcmpeq>
 8006296:	2800      	cmp	r0, #0
 8006298:	f43f aebb 	beq.w	8006012 <_dtoa_r+0x472>
 800629c:	e6f0      	b.n	8006080 <_dtoa_r+0x4e0>
 800629e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	f000 80db 	beq.w	800645c <_dtoa_r+0x8bc>
 80062a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062a8:	2a01      	cmp	r2, #1
 80062aa:	f300 80bf 	bgt.w	800642c <_dtoa_r+0x88c>
 80062ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80062b0:	2a00      	cmp	r2, #0
 80062b2:	f000 80b7 	beq.w	8006424 <_dtoa_r+0x884>
 80062b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80062ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80062bc:	4646      	mov	r6, r8
 80062be:	9a08      	ldr	r2, [sp, #32]
 80062c0:	2101      	movs	r1, #1
 80062c2:	441a      	add	r2, r3
 80062c4:	4658      	mov	r0, fp
 80062c6:	4498      	add	r8, r3
 80062c8:	9208      	str	r2, [sp, #32]
 80062ca:	f000 fc21 	bl	8006b10 <__i2b>
 80062ce:	4605      	mov	r5, r0
 80062d0:	b15e      	cbz	r6, 80062ea <_dtoa_r+0x74a>
 80062d2:	9b08      	ldr	r3, [sp, #32]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dd08      	ble.n	80062ea <_dtoa_r+0x74a>
 80062d8:	42b3      	cmp	r3, r6
 80062da:	9a08      	ldr	r2, [sp, #32]
 80062dc:	bfa8      	it	ge
 80062de:	4633      	movge	r3, r6
 80062e0:	eba8 0803 	sub.w	r8, r8, r3
 80062e4:	1af6      	subs	r6, r6, r3
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	9308      	str	r3, [sp, #32]
 80062ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ec:	b1f3      	cbz	r3, 800632c <_dtoa_r+0x78c>
 80062ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80b7 	beq.w	8006464 <_dtoa_r+0x8c4>
 80062f6:	b18c      	cbz	r4, 800631c <_dtoa_r+0x77c>
 80062f8:	4629      	mov	r1, r5
 80062fa:	4622      	mov	r2, r4
 80062fc:	4658      	mov	r0, fp
 80062fe:	f000 fcc7 	bl	8006c90 <__pow5mult>
 8006302:	464a      	mov	r2, r9
 8006304:	4601      	mov	r1, r0
 8006306:	4605      	mov	r5, r0
 8006308:	4658      	mov	r0, fp
 800630a:	f000 fc17 	bl	8006b3c <__multiply>
 800630e:	4649      	mov	r1, r9
 8006310:	9004      	str	r0, [sp, #16]
 8006312:	4658      	mov	r0, fp
 8006314:	f000 fb48 	bl	80069a8 <_Bfree>
 8006318:	9b04      	ldr	r3, [sp, #16]
 800631a:	4699      	mov	r9, r3
 800631c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800631e:	1b1a      	subs	r2, r3, r4
 8006320:	d004      	beq.n	800632c <_dtoa_r+0x78c>
 8006322:	4649      	mov	r1, r9
 8006324:	4658      	mov	r0, fp
 8006326:	f000 fcb3 	bl	8006c90 <__pow5mult>
 800632a:	4681      	mov	r9, r0
 800632c:	2101      	movs	r1, #1
 800632e:	4658      	mov	r0, fp
 8006330:	f000 fbee 	bl	8006b10 <__i2b>
 8006334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006336:	4604      	mov	r4, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 81cf 	beq.w	80066dc <_dtoa_r+0xb3c>
 800633e:	461a      	mov	r2, r3
 8006340:	4601      	mov	r1, r0
 8006342:	4658      	mov	r0, fp
 8006344:	f000 fca4 	bl	8006c90 <__pow5mult>
 8006348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800634a:	2b01      	cmp	r3, #1
 800634c:	4604      	mov	r4, r0
 800634e:	f300 8095 	bgt.w	800647c <_dtoa_r+0x8dc>
 8006352:	9b02      	ldr	r3, [sp, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f040 8087 	bne.w	8006468 <_dtoa_r+0x8c8>
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 8089 	bne.w	8006478 <_dtoa_r+0x8d8>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800636c:	0d1b      	lsrs	r3, r3, #20
 800636e:	051b      	lsls	r3, r3, #20
 8006370:	b12b      	cbz	r3, 800637e <_dtoa_r+0x7de>
 8006372:	9b08      	ldr	r3, [sp, #32]
 8006374:	3301      	adds	r3, #1
 8006376:	9308      	str	r3, [sp, #32]
 8006378:	f108 0801 	add.w	r8, r8, #1
 800637c:	2301      	movs	r3, #1
 800637e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 81b0 	beq.w	80066e8 <_dtoa_r+0xb48>
 8006388:	6923      	ldr	r3, [r4, #16]
 800638a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800638e:	6918      	ldr	r0, [r3, #16]
 8006390:	f000 fb72 	bl	8006a78 <__hi0bits>
 8006394:	f1c0 0020 	rsb	r0, r0, #32
 8006398:	9b08      	ldr	r3, [sp, #32]
 800639a:	4418      	add	r0, r3
 800639c:	f010 001f 	ands.w	r0, r0, #31
 80063a0:	d077      	beq.n	8006492 <_dtoa_r+0x8f2>
 80063a2:	f1c0 0320 	rsb	r3, r0, #32
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	dd6b      	ble.n	8006482 <_dtoa_r+0x8e2>
 80063aa:	9b08      	ldr	r3, [sp, #32]
 80063ac:	f1c0 001c 	rsb	r0, r0, #28
 80063b0:	4403      	add	r3, r0
 80063b2:	4480      	add	r8, r0
 80063b4:	4406      	add	r6, r0
 80063b6:	9308      	str	r3, [sp, #32]
 80063b8:	f1b8 0f00 	cmp.w	r8, #0
 80063bc:	dd05      	ble.n	80063ca <_dtoa_r+0x82a>
 80063be:	4649      	mov	r1, r9
 80063c0:	4642      	mov	r2, r8
 80063c2:	4658      	mov	r0, fp
 80063c4:	f000 fcbe 	bl	8006d44 <__lshift>
 80063c8:	4681      	mov	r9, r0
 80063ca:	9b08      	ldr	r3, [sp, #32]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dd05      	ble.n	80063dc <_dtoa_r+0x83c>
 80063d0:	4621      	mov	r1, r4
 80063d2:	461a      	mov	r2, r3
 80063d4:	4658      	mov	r0, fp
 80063d6:	f000 fcb5 	bl	8006d44 <__lshift>
 80063da:	4604      	mov	r4, r0
 80063dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d059      	beq.n	8006496 <_dtoa_r+0x8f6>
 80063e2:	4621      	mov	r1, r4
 80063e4:	4648      	mov	r0, r9
 80063e6:	f000 fd19 	bl	8006e1c <__mcmp>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	da53      	bge.n	8006496 <_dtoa_r+0x8f6>
 80063ee:	1e7b      	subs	r3, r7, #1
 80063f0:	9304      	str	r3, [sp, #16]
 80063f2:	4649      	mov	r1, r9
 80063f4:	2300      	movs	r3, #0
 80063f6:	220a      	movs	r2, #10
 80063f8:	4658      	mov	r0, fp
 80063fa:	f000 faf7 	bl	80069ec <__multadd>
 80063fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006400:	4681      	mov	r9, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8172 	beq.w	80066ec <_dtoa_r+0xb4c>
 8006408:	2300      	movs	r3, #0
 800640a:	4629      	mov	r1, r5
 800640c:	220a      	movs	r2, #10
 800640e:	4658      	mov	r0, fp
 8006410:	f000 faec 	bl	80069ec <__multadd>
 8006414:	9b00      	ldr	r3, [sp, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	4605      	mov	r5, r0
 800641a:	dc67      	bgt.n	80064ec <_dtoa_r+0x94c>
 800641c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800641e:	2b02      	cmp	r3, #2
 8006420:	dc41      	bgt.n	80064a6 <_dtoa_r+0x906>
 8006422:	e063      	b.n	80064ec <_dtoa_r+0x94c>
 8006424:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006426:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800642a:	e746      	b.n	80062ba <_dtoa_r+0x71a>
 800642c:	9b07      	ldr	r3, [sp, #28]
 800642e:	1e5c      	subs	r4, r3, #1
 8006430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006432:	42a3      	cmp	r3, r4
 8006434:	bfbf      	itttt	lt
 8006436:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006438:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800643a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800643c:	1ae3      	sublt	r3, r4, r3
 800643e:	bfb4      	ite	lt
 8006440:	18d2      	addlt	r2, r2, r3
 8006442:	1b1c      	subge	r4, r3, r4
 8006444:	9b07      	ldr	r3, [sp, #28]
 8006446:	bfbc      	itt	lt
 8006448:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800644a:	2400      	movlt	r4, #0
 800644c:	2b00      	cmp	r3, #0
 800644e:	bfb5      	itete	lt
 8006450:	eba8 0603 	sublt.w	r6, r8, r3
 8006454:	9b07      	ldrge	r3, [sp, #28]
 8006456:	2300      	movlt	r3, #0
 8006458:	4646      	movge	r6, r8
 800645a:	e730      	b.n	80062be <_dtoa_r+0x71e>
 800645c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800645e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006460:	4646      	mov	r6, r8
 8006462:	e735      	b.n	80062d0 <_dtoa_r+0x730>
 8006464:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006466:	e75c      	b.n	8006322 <_dtoa_r+0x782>
 8006468:	2300      	movs	r3, #0
 800646a:	e788      	b.n	800637e <_dtoa_r+0x7de>
 800646c:	3fe00000 	.word	0x3fe00000
 8006470:	40240000 	.word	0x40240000
 8006474:	40140000 	.word	0x40140000
 8006478:	9b02      	ldr	r3, [sp, #8]
 800647a:	e780      	b.n	800637e <_dtoa_r+0x7de>
 800647c:	2300      	movs	r3, #0
 800647e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006480:	e782      	b.n	8006388 <_dtoa_r+0x7e8>
 8006482:	d099      	beq.n	80063b8 <_dtoa_r+0x818>
 8006484:	9a08      	ldr	r2, [sp, #32]
 8006486:	331c      	adds	r3, #28
 8006488:	441a      	add	r2, r3
 800648a:	4498      	add	r8, r3
 800648c:	441e      	add	r6, r3
 800648e:	9208      	str	r2, [sp, #32]
 8006490:	e792      	b.n	80063b8 <_dtoa_r+0x818>
 8006492:	4603      	mov	r3, r0
 8006494:	e7f6      	b.n	8006484 <_dtoa_r+0x8e4>
 8006496:	9b07      	ldr	r3, [sp, #28]
 8006498:	9704      	str	r7, [sp, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	dc20      	bgt.n	80064e0 <_dtoa_r+0x940>
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	dd1e      	ble.n	80064e4 <_dtoa_r+0x944>
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f47f aec0 	bne.w	800622e <_dtoa_r+0x68e>
 80064ae:	4621      	mov	r1, r4
 80064b0:	2205      	movs	r2, #5
 80064b2:	4658      	mov	r0, fp
 80064b4:	f000 fa9a 	bl	80069ec <__multadd>
 80064b8:	4601      	mov	r1, r0
 80064ba:	4604      	mov	r4, r0
 80064bc:	4648      	mov	r0, r9
 80064be:	f000 fcad 	bl	8006e1c <__mcmp>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f77f aeb3 	ble.w	800622e <_dtoa_r+0x68e>
 80064c8:	4656      	mov	r6, sl
 80064ca:	2331      	movs	r3, #49	@ 0x31
 80064cc:	f806 3b01 	strb.w	r3, [r6], #1
 80064d0:	9b04      	ldr	r3, [sp, #16]
 80064d2:	3301      	adds	r3, #1
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	e6ae      	b.n	8006236 <_dtoa_r+0x696>
 80064d8:	9c07      	ldr	r4, [sp, #28]
 80064da:	9704      	str	r7, [sp, #16]
 80064dc:	4625      	mov	r5, r4
 80064de:	e7f3      	b.n	80064c8 <_dtoa_r+0x928>
 80064e0:	9b07      	ldr	r3, [sp, #28]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 8104 	beq.w	80066f4 <_dtoa_r+0xb54>
 80064ec:	2e00      	cmp	r6, #0
 80064ee:	dd05      	ble.n	80064fc <_dtoa_r+0x95c>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4632      	mov	r2, r6
 80064f4:	4658      	mov	r0, fp
 80064f6:	f000 fc25 	bl	8006d44 <__lshift>
 80064fa:	4605      	mov	r5, r0
 80064fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d05a      	beq.n	80065b8 <_dtoa_r+0xa18>
 8006502:	6869      	ldr	r1, [r5, #4]
 8006504:	4658      	mov	r0, fp
 8006506:	f000 fa0f 	bl	8006928 <_Balloc>
 800650a:	4606      	mov	r6, r0
 800650c:	b928      	cbnz	r0, 800651a <_dtoa_r+0x97a>
 800650e:	4b84      	ldr	r3, [pc, #528]	@ (8006720 <_dtoa_r+0xb80>)
 8006510:	4602      	mov	r2, r0
 8006512:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006516:	f7ff bb5a 	b.w	8005bce <_dtoa_r+0x2e>
 800651a:	692a      	ldr	r2, [r5, #16]
 800651c:	3202      	adds	r2, #2
 800651e:	0092      	lsls	r2, r2, #2
 8006520:	f105 010c 	add.w	r1, r5, #12
 8006524:	300c      	adds	r0, #12
 8006526:	f000 ffaf 	bl	8007488 <memcpy>
 800652a:	2201      	movs	r2, #1
 800652c:	4631      	mov	r1, r6
 800652e:	4658      	mov	r0, fp
 8006530:	f000 fc08 	bl	8006d44 <__lshift>
 8006534:	f10a 0301 	add.w	r3, sl, #1
 8006538:	9307      	str	r3, [sp, #28]
 800653a:	9b00      	ldr	r3, [sp, #0]
 800653c:	4453      	add	r3, sl
 800653e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006540:	9b02      	ldr	r3, [sp, #8]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	462f      	mov	r7, r5
 8006548:	930a      	str	r3, [sp, #40]	@ 0x28
 800654a:	4605      	mov	r5, r0
 800654c:	9b07      	ldr	r3, [sp, #28]
 800654e:	4621      	mov	r1, r4
 8006550:	3b01      	subs	r3, #1
 8006552:	4648      	mov	r0, r9
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	f7ff fa98 	bl	8005a8a <quorem>
 800655a:	4639      	mov	r1, r7
 800655c:	9002      	str	r0, [sp, #8]
 800655e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006562:	4648      	mov	r0, r9
 8006564:	f000 fc5a 	bl	8006e1c <__mcmp>
 8006568:	462a      	mov	r2, r5
 800656a:	9008      	str	r0, [sp, #32]
 800656c:	4621      	mov	r1, r4
 800656e:	4658      	mov	r0, fp
 8006570:	f000 fc70 	bl	8006e54 <__mdiff>
 8006574:	68c2      	ldr	r2, [r0, #12]
 8006576:	4606      	mov	r6, r0
 8006578:	bb02      	cbnz	r2, 80065bc <_dtoa_r+0xa1c>
 800657a:	4601      	mov	r1, r0
 800657c:	4648      	mov	r0, r9
 800657e:	f000 fc4d 	bl	8006e1c <__mcmp>
 8006582:	4602      	mov	r2, r0
 8006584:	4631      	mov	r1, r6
 8006586:	4658      	mov	r0, fp
 8006588:	920e      	str	r2, [sp, #56]	@ 0x38
 800658a:	f000 fa0d 	bl	80069a8 <_Bfree>
 800658e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006592:	9e07      	ldr	r6, [sp, #28]
 8006594:	ea43 0102 	orr.w	r1, r3, r2
 8006598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800659a:	4319      	orrs	r1, r3
 800659c:	d110      	bne.n	80065c0 <_dtoa_r+0xa20>
 800659e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065a2:	d029      	beq.n	80065f8 <_dtoa_r+0xa58>
 80065a4:	9b08      	ldr	r3, [sp, #32]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	dd02      	ble.n	80065b0 <_dtoa_r+0xa10>
 80065aa:	9b02      	ldr	r3, [sp, #8]
 80065ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80065b0:	9b00      	ldr	r3, [sp, #0]
 80065b2:	f883 8000 	strb.w	r8, [r3]
 80065b6:	e63f      	b.n	8006238 <_dtoa_r+0x698>
 80065b8:	4628      	mov	r0, r5
 80065ba:	e7bb      	b.n	8006534 <_dtoa_r+0x994>
 80065bc:	2201      	movs	r2, #1
 80065be:	e7e1      	b.n	8006584 <_dtoa_r+0x9e4>
 80065c0:	9b08      	ldr	r3, [sp, #32]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	db04      	blt.n	80065d0 <_dtoa_r+0xa30>
 80065c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065c8:	430b      	orrs	r3, r1
 80065ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065cc:	430b      	orrs	r3, r1
 80065ce:	d120      	bne.n	8006612 <_dtoa_r+0xa72>
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	dded      	ble.n	80065b0 <_dtoa_r+0xa10>
 80065d4:	4649      	mov	r1, r9
 80065d6:	2201      	movs	r2, #1
 80065d8:	4658      	mov	r0, fp
 80065da:	f000 fbb3 	bl	8006d44 <__lshift>
 80065de:	4621      	mov	r1, r4
 80065e0:	4681      	mov	r9, r0
 80065e2:	f000 fc1b 	bl	8006e1c <__mcmp>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	dc03      	bgt.n	80065f2 <_dtoa_r+0xa52>
 80065ea:	d1e1      	bne.n	80065b0 <_dtoa_r+0xa10>
 80065ec:	f018 0f01 	tst.w	r8, #1
 80065f0:	d0de      	beq.n	80065b0 <_dtoa_r+0xa10>
 80065f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065f6:	d1d8      	bne.n	80065aa <_dtoa_r+0xa0a>
 80065f8:	9a00      	ldr	r2, [sp, #0]
 80065fa:	2339      	movs	r3, #57	@ 0x39
 80065fc:	7013      	strb	r3, [r2, #0]
 80065fe:	4633      	mov	r3, r6
 8006600:	461e      	mov	r6, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006608:	2a39      	cmp	r2, #57	@ 0x39
 800660a:	d052      	beq.n	80066b2 <_dtoa_r+0xb12>
 800660c:	3201      	adds	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	e612      	b.n	8006238 <_dtoa_r+0x698>
 8006612:	2a00      	cmp	r2, #0
 8006614:	dd07      	ble.n	8006626 <_dtoa_r+0xa86>
 8006616:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800661a:	d0ed      	beq.n	80065f8 <_dtoa_r+0xa58>
 800661c:	9a00      	ldr	r2, [sp, #0]
 800661e:	f108 0301 	add.w	r3, r8, #1
 8006622:	7013      	strb	r3, [r2, #0]
 8006624:	e608      	b.n	8006238 <_dtoa_r+0x698>
 8006626:	9b07      	ldr	r3, [sp, #28]
 8006628:	9a07      	ldr	r2, [sp, #28]
 800662a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800662e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006630:	4293      	cmp	r3, r2
 8006632:	d028      	beq.n	8006686 <_dtoa_r+0xae6>
 8006634:	4649      	mov	r1, r9
 8006636:	2300      	movs	r3, #0
 8006638:	220a      	movs	r2, #10
 800663a:	4658      	mov	r0, fp
 800663c:	f000 f9d6 	bl	80069ec <__multadd>
 8006640:	42af      	cmp	r7, r5
 8006642:	4681      	mov	r9, r0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	f04f 020a 	mov.w	r2, #10
 800664c:	4639      	mov	r1, r7
 800664e:	4658      	mov	r0, fp
 8006650:	d107      	bne.n	8006662 <_dtoa_r+0xac2>
 8006652:	f000 f9cb 	bl	80069ec <__multadd>
 8006656:	4607      	mov	r7, r0
 8006658:	4605      	mov	r5, r0
 800665a:	9b07      	ldr	r3, [sp, #28]
 800665c:	3301      	adds	r3, #1
 800665e:	9307      	str	r3, [sp, #28]
 8006660:	e774      	b.n	800654c <_dtoa_r+0x9ac>
 8006662:	f000 f9c3 	bl	80069ec <__multadd>
 8006666:	4629      	mov	r1, r5
 8006668:	4607      	mov	r7, r0
 800666a:	2300      	movs	r3, #0
 800666c:	220a      	movs	r2, #10
 800666e:	4658      	mov	r0, fp
 8006670:	f000 f9bc 	bl	80069ec <__multadd>
 8006674:	4605      	mov	r5, r0
 8006676:	e7f0      	b.n	800665a <_dtoa_r+0xaba>
 8006678:	9b00      	ldr	r3, [sp, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	bfcc      	ite	gt
 800667e:	461e      	movgt	r6, r3
 8006680:	2601      	movle	r6, #1
 8006682:	4456      	add	r6, sl
 8006684:	2700      	movs	r7, #0
 8006686:	4649      	mov	r1, r9
 8006688:	2201      	movs	r2, #1
 800668a:	4658      	mov	r0, fp
 800668c:	f000 fb5a 	bl	8006d44 <__lshift>
 8006690:	4621      	mov	r1, r4
 8006692:	4681      	mov	r9, r0
 8006694:	f000 fbc2 	bl	8006e1c <__mcmp>
 8006698:	2800      	cmp	r0, #0
 800669a:	dcb0      	bgt.n	80065fe <_dtoa_r+0xa5e>
 800669c:	d102      	bne.n	80066a4 <_dtoa_r+0xb04>
 800669e:	f018 0f01 	tst.w	r8, #1
 80066a2:	d1ac      	bne.n	80065fe <_dtoa_r+0xa5e>
 80066a4:	4633      	mov	r3, r6
 80066a6:	461e      	mov	r6, r3
 80066a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ac:	2a30      	cmp	r2, #48	@ 0x30
 80066ae:	d0fa      	beq.n	80066a6 <_dtoa_r+0xb06>
 80066b0:	e5c2      	b.n	8006238 <_dtoa_r+0x698>
 80066b2:	459a      	cmp	sl, r3
 80066b4:	d1a4      	bne.n	8006600 <_dtoa_r+0xa60>
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	3301      	adds	r3, #1
 80066ba:	9304      	str	r3, [sp, #16]
 80066bc:	2331      	movs	r3, #49	@ 0x31
 80066be:	f88a 3000 	strb.w	r3, [sl]
 80066c2:	e5b9      	b.n	8006238 <_dtoa_r+0x698>
 80066c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006724 <_dtoa_r+0xb84>
 80066ca:	b11b      	cbz	r3, 80066d4 <_dtoa_r+0xb34>
 80066cc:	f10a 0308 	add.w	r3, sl, #8
 80066d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	4650      	mov	r0, sl
 80066d6:	b019      	add	sp, #100	@ 0x64
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066de:	2b01      	cmp	r3, #1
 80066e0:	f77f ae37 	ble.w	8006352 <_dtoa_r+0x7b2>
 80066e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e8:	2001      	movs	r0, #1
 80066ea:	e655      	b.n	8006398 <_dtoa_r+0x7f8>
 80066ec:	9b00      	ldr	r3, [sp, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f77f aed6 	ble.w	80064a0 <_dtoa_r+0x900>
 80066f4:	4656      	mov	r6, sl
 80066f6:	4621      	mov	r1, r4
 80066f8:	4648      	mov	r0, r9
 80066fa:	f7ff f9c6 	bl	8005a8a <quorem>
 80066fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006702:	f806 8b01 	strb.w	r8, [r6], #1
 8006706:	9b00      	ldr	r3, [sp, #0]
 8006708:	eba6 020a 	sub.w	r2, r6, sl
 800670c:	4293      	cmp	r3, r2
 800670e:	ddb3      	ble.n	8006678 <_dtoa_r+0xad8>
 8006710:	4649      	mov	r1, r9
 8006712:	2300      	movs	r3, #0
 8006714:	220a      	movs	r2, #10
 8006716:	4658      	mov	r0, fp
 8006718:	f000 f968 	bl	80069ec <__multadd>
 800671c:	4681      	mov	r9, r0
 800671e:	e7ea      	b.n	80066f6 <_dtoa_r+0xb56>
 8006720:	08007c6c 	.word	0x08007c6c
 8006724:	08007bf0 	.word	0x08007bf0

08006728 <_free_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4605      	mov	r5, r0
 800672c:	2900      	cmp	r1, #0
 800672e:	d041      	beq.n	80067b4 <_free_r+0x8c>
 8006730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006734:	1f0c      	subs	r4, r1, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	bfb8      	it	lt
 800673a:	18e4      	addlt	r4, r4, r3
 800673c:	f000 f8e8 	bl	8006910 <__malloc_lock>
 8006740:	4a1d      	ldr	r2, [pc, #116]	@ (80067b8 <_free_r+0x90>)
 8006742:	6813      	ldr	r3, [r2, #0]
 8006744:	b933      	cbnz	r3, 8006754 <_free_r+0x2c>
 8006746:	6063      	str	r3, [r4, #4]
 8006748:	6014      	str	r4, [r2, #0]
 800674a:	4628      	mov	r0, r5
 800674c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006750:	f000 b8e4 	b.w	800691c <__malloc_unlock>
 8006754:	42a3      	cmp	r3, r4
 8006756:	d908      	bls.n	800676a <_free_r+0x42>
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	1821      	adds	r1, r4, r0
 800675c:	428b      	cmp	r3, r1
 800675e:	bf01      	itttt	eq
 8006760:	6819      	ldreq	r1, [r3, #0]
 8006762:	685b      	ldreq	r3, [r3, #4]
 8006764:	1809      	addeq	r1, r1, r0
 8006766:	6021      	streq	r1, [r4, #0]
 8006768:	e7ed      	b.n	8006746 <_free_r+0x1e>
 800676a:	461a      	mov	r2, r3
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	b10b      	cbz	r3, 8006774 <_free_r+0x4c>
 8006770:	42a3      	cmp	r3, r4
 8006772:	d9fa      	bls.n	800676a <_free_r+0x42>
 8006774:	6811      	ldr	r1, [r2, #0]
 8006776:	1850      	adds	r0, r2, r1
 8006778:	42a0      	cmp	r0, r4
 800677a:	d10b      	bne.n	8006794 <_free_r+0x6c>
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	4401      	add	r1, r0
 8006780:	1850      	adds	r0, r2, r1
 8006782:	4283      	cmp	r3, r0
 8006784:	6011      	str	r1, [r2, #0]
 8006786:	d1e0      	bne.n	800674a <_free_r+0x22>
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	6053      	str	r3, [r2, #4]
 800678e:	4408      	add	r0, r1
 8006790:	6010      	str	r0, [r2, #0]
 8006792:	e7da      	b.n	800674a <_free_r+0x22>
 8006794:	d902      	bls.n	800679c <_free_r+0x74>
 8006796:	230c      	movs	r3, #12
 8006798:	602b      	str	r3, [r5, #0]
 800679a:	e7d6      	b.n	800674a <_free_r+0x22>
 800679c:	6820      	ldr	r0, [r4, #0]
 800679e:	1821      	adds	r1, r4, r0
 80067a0:	428b      	cmp	r3, r1
 80067a2:	bf04      	itt	eq
 80067a4:	6819      	ldreq	r1, [r3, #0]
 80067a6:	685b      	ldreq	r3, [r3, #4]
 80067a8:	6063      	str	r3, [r4, #4]
 80067aa:	bf04      	itt	eq
 80067ac:	1809      	addeq	r1, r1, r0
 80067ae:	6021      	streq	r1, [r4, #0]
 80067b0:	6054      	str	r4, [r2, #4]
 80067b2:	e7ca      	b.n	800674a <_free_r+0x22>
 80067b4:	bd38      	pop	{r3, r4, r5, pc}
 80067b6:	bf00      	nop
 80067b8:	2000044c 	.word	0x2000044c

080067bc <malloc>:
 80067bc:	4b02      	ldr	r3, [pc, #8]	@ (80067c8 <malloc+0xc>)
 80067be:	4601      	mov	r1, r0
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f000 b825 	b.w	8006810 <_malloc_r>
 80067c6:	bf00      	nop
 80067c8:	20000018 	.word	0x20000018

080067cc <sbrk_aligned>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4e0f      	ldr	r6, [pc, #60]	@ (800680c <sbrk_aligned+0x40>)
 80067d0:	460c      	mov	r4, r1
 80067d2:	6831      	ldr	r1, [r6, #0]
 80067d4:	4605      	mov	r5, r0
 80067d6:	b911      	cbnz	r1, 80067de <sbrk_aligned+0x12>
 80067d8:	f000 fe46 	bl	8007468 <_sbrk_r>
 80067dc:	6030      	str	r0, [r6, #0]
 80067de:	4621      	mov	r1, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 fe41 	bl	8007468 <_sbrk_r>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	d103      	bne.n	80067f2 <sbrk_aligned+0x26>
 80067ea:	f04f 34ff 	mov.w	r4, #4294967295
 80067ee:	4620      	mov	r0, r4
 80067f0:	bd70      	pop	{r4, r5, r6, pc}
 80067f2:	1cc4      	adds	r4, r0, #3
 80067f4:	f024 0403 	bic.w	r4, r4, #3
 80067f8:	42a0      	cmp	r0, r4
 80067fa:	d0f8      	beq.n	80067ee <sbrk_aligned+0x22>
 80067fc:	1a21      	subs	r1, r4, r0
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 fe32 	bl	8007468 <_sbrk_r>
 8006804:	3001      	adds	r0, #1
 8006806:	d1f2      	bne.n	80067ee <sbrk_aligned+0x22>
 8006808:	e7ef      	b.n	80067ea <sbrk_aligned+0x1e>
 800680a:	bf00      	nop
 800680c:	20000448 	.word	0x20000448

08006810 <_malloc_r>:
 8006810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006814:	1ccd      	adds	r5, r1, #3
 8006816:	f025 0503 	bic.w	r5, r5, #3
 800681a:	3508      	adds	r5, #8
 800681c:	2d0c      	cmp	r5, #12
 800681e:	bf38      	it	cc
 8006820:	250c      	movcc	r5, #12
 8006822:	2d00      	cmp	r5, #0
 8006824:	4606      	mov	r6, r0
 8006826:	db01      	blt.n	800682c <_malloc_r+0x1c>
 8006828:	42a9      	cmp	r1, r5
 800682a:	d904      	bls.n	8006836 <_malloc_r+0x26>
 800682c:	230c      	movs	r3, #12
 800682e:	6033      	str	r3, [r6, #0]
 8006830:	2000      	movs	r0, #0
 8006832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006836:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800690c <_malloc_r+0xfc>
 800683a:	f000 f869 	bl	8006910 <__malloc_lock>
 800683e:	f8d8 3000 	ldr.w	r3, [r8]
 8006842:	461c      	mov	r4, r3
 8006844:	bb44      	cbnz	r4, 8006898 <_malloc_r+0x88>
 8006846:	4629      	mov	r1, r5
 8006848:	4630      	mov	r0, r6
 800684a:	f7ff ffbf 	bl	80067cc <sbrk_aligned>
 800684e:	1c43      	adds	r3, r0, #1
 8006850:	4604      	mov	r4, r0
 8006852:	d158      	bne.n	8006906 <_malloc_r+0xf6>
 8006854:	f8d8 4000 	ldr.w	r4, [r8]
 8006858:	4627      	mov	r7, r4
 800685a:	2f00      	cmp	r7, #0
 800685c:	d143      	bne.n	80068e6 <_malloc_r+0xd6>
 800685e:	2c00      	cmp	r4, #0
 8006860:	d04b      	beq.n	80068fa <_malloc_r+0xea>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	4639      	mov	r1, r7
 8006866:	4630      	mov	r0, r6
 8006868:	eb04 0903 	add.w	r9, r4, r3
 800686c:	f000 fdfc 	bl	8007468 <_sbrk_r>
 8006870:	4581      	cmp	r9, r0
 8006872:	d142      	bne.n	80068fa <_malloc_r+0xea>
 8006874:	6821      	ldr	r1, [r4, #0]
 8006876:	1a6d      	subs	r5, r5, r1
 8006878:	4629      	mov	r1, r5
 800687a:	4630      	mov	r0, r6
 800687c:	f7ff ffa6 	bl	80067cc <sbrk_aligned>
 8006880:	3001      	adds	r0, #1
 8006882:	d03a      	beq.n	80068fa <_malloc_r+0xea>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	442b      	add	r3, r5
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	f8d8 3000 	ldr.w	r3, [r8]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	bb62      	cbnz	r2, 80068ec <_malloc_r+0xdc>
 8006892:	f8c8 7000 	str.w	r7, [r8]
 8006896:	e00f      	b.n	80068b8 <_malloc_r+0xa8>
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	1b52      	subs	r2, r2, r5
 800689c:	d420      	bmi.n	80068e0 <_malloc_r+0xd0>
 800689e:	2a0b      	cmp	r2, #11
 80068a0:	d917      	bls.n	80068d2 <_malloc_r+0xc2>
 80068a2:	1961      	adds	r1, r4, r5
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	6025      	str	r5, [r4, #0]
 80068a8:	bf18      	it	ne
 80068aa:	6059      	strne	r1, [r3, #4]
 80068ac:	6863      	ldr	r3, [r4, #4]
 80068ae:	bf08      	it	eq
 80068b0:	f8c8 1000 	streq.w	r1, [r8]
 80068b4:	5162      	str	r2, [r4, r5]
 80068b6:	604b      	str	r3, [r1, #4]
 80068b8:	4630      	mov	r0, r6
 80068ba:	f000 f82f 	bl	800691c <__malloc_unlock>
 80068be:	f104 000b 	add.w	r0, r4, #11
 80068c2:	1d23      	adds	r3, r4, #4
 80068c4:	f020 0007 	bic.w	r0, r0, #7
 80068c8:	1ac2      	subs	r2, r0, r3
 80068ca:	bf1c      	itt	ne
 80068cc:	1a1b      	subne	r3, r3, r0
 80068ce:	50a3      	strne	r3, [r4, r2]
 80068d0:	e7af      	b.n	8006832 <_malloc_r+0x22>
 80068d2:	6862      	ldr	r2, [r4, #4]
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	bf0c      	ite	eq
 80068d8:	f8c8 2000 	streq.w	r2, [r8]
 80068dc:	605a      	strne	r2, [r3, #4]
 80068de:	e7eb      	b.n	80068b8 <_malloc_r+0xa8>
 80068e0:	4623      	mov	r3, r4
 80068e2:	6864      	ldr	r4, [r4, #4]
 80068e4:	e7ae      	b.n	8006844 <_malloc_r+0x34>
 80068e6:	463c      	mov	r4, r7
 80068e8:	687f      	ldr	r7, [r7, #4]
 80068ea:	e7b6      	b.n	800685a <_malloc_r+0x4a>
 80068ec:	461a      	mov	r2, r3
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	d1fb      	bne.n	80068ec <_malloc_r+0xdc>
 80068f4:	2300      	movs	r3, #0
 80068f6:	6053      	str	r3, [r2, #4]
 80068f8:	e7de      	b.n	80068b8 <_malloc_r+0xa8>
 80068fa:	230c      	movs	r3, #12
 80068fc:	6033      	str	r3, [r6, #0]
 80068fe:	4630      	mov	r0, r6
 8006900:	f000 f80c 	bl	800691c <__malloc_unlock>
 8006904:	e794      	b.n	8006830 <_malloc_r+0x20>
 8006906:	6005      	str	r5, [r0, #0]
 8006908:	e7d6      	b.n	80068b8 <_malloc_r+0xa8>
 800690a:	bf00      	nop
 800690c:	2000044c 	.word	0x2000044c

08006910 <__malloc_lock>:
 8006910:	4801      	ldr	r0, [pc, #4]	@ (8006918 <__malloc_lock+0x8>)
 8006912:	f7ff b8b8 	b.w	8005a86 <__retarget_lock_acquire_recursive>
 8006916:	bf00      	nop
 8006918:	20000444 	.word	0x20000444

0800691c <__malloc_unlock>:
 800691c:	4801      	ldr	r0, [pc, #4]	@ (8006924 <__malloc_unlock+0x8>)
 800691e:	f7ff b8b3 	b.w	8005a88 <__retarget_lock_release_recursive>
 8006922:	bf00      	nop
 8006924:	20000444 	.word	0x20000444

08006928 <_Balloc>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	69c6      	ldr	r6, [r0, #28]
 800692c:	4604      	mov	r4, r0
 800692e:	460d      	mov	r5, r1
 8006930:	b976      	cbnz	r6, 8006950 <_Balloc+0x28>
 8006932:	2010      	movs	r0, #16
 8006934:	f7ff ff42 	bl	80067bc <malloc>
 8006938:	4602      	mov	r2, r0
 800693a:	61e0      	str	r0, [r4, #28]
 800693c:	b920      	cbnz	r0, 8006948 <_Balloc+0x20>
 800693e:	4b18      	ldr	r3, [pc, #96]	@ (80069a0 <_Balloc+0x78>)
 8006940:	4818      	ldr	r0, [pc, #96]	@ (80069a4 <_Balloc+0x7c>)
 8006942:	216b      	movs	r1, #107	@ 0x6b
 8006944:	f000 fdae 	bl	80074a4 <__assert_func>
 8006948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800694c:	6006      	str	r6, [r0, #0]
 800694e:	60c6      	str	r6, [r0, #12]
 8006950:	69e6      	ldr	r6, [r4, #28]
 8006952:	68f3      	ldr	r3, [r6, #12]
 8006954:	b183      	cbz	r3, 8006978 <_Balloc+0x50>
 8006956:	69e3      	ldr	r3, [r4, #28]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800695e:	b9b8      	cbnz	r0, 8006990 <_Balloc+0x68>
 8006960:	2101      	movs	r1, #1
 8006962:	fa01 f605 	lsl.w	r6, r1, r5
 8006966:	1d72      	adds	r2, r6, #5
 8006968:	0092      	lsls	r2, r2, #2
 800696a:	4620      	mov	r0, r4
 800696c:	f000 fdb8 	bl	80074e0 <_calloc_r>
 8006970:	b160      	cbz	r0, 800698c <_Balloc+0x64>
 8006972:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006976:	e00e      	b.n	8006996 <_Balloc+0x6e>
 8006978:	2221      	movs	r2, #33	@ 0x21
 800697a:	2104      	movs	r1, #4
 800697c:	4620      	mov	r0, r4
 800697e:	f000 fdaf 	bl	80074e0 <_calloc_r>
 8006982:	69e3      	ldr	r3, [r4, #28]
 8006984:	60f0      	str	r0, [r6, #12]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e4      	bne.n	8006956 <_Balloc+0x2e>
 800698c:	2000      	movs	r0, #0
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	6802      	ldr	r2, [r0, #0]
 8006992:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006996:	2300      	movs	r3, #0
 8006998:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800699c:	e7f7      	b.n	800698e <_Balloc+0x66>
 800699e:	bf00      	nop
 80069a0:	08007bfd 	.word	0x08007bfd
 80069a4:	08007c7d 	.word	0x08007c7d

080069a8 <_Bfree>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	69c6      	ldr	r6, [r0, #28]
 80069ac:	4605      	mov	r5, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	b976      	cbnz	r6, 80069d0 <_Bfree+0x28>
 80069b2:	2010      	movs	r0, #16
 80069b4:	f7ff ff02 	bl	80067bc <malloc>
 80069b8:	4602      	mov	r2, r0
 80069ba:	61e8      	str	r0, [r5, #28]
 80069bc:	b920      	cbnz	r0, 80069c8 <_Bfree+0x20>
 80069be:	4b09      	ldr	r3, [pc, #36]	@ (80069e4 <_Bfree+0x3c>)
 80069c0:	4809      	ldr	r0, [pc, #36]	@ (80069e8 <_Bfree+0x40>)
 80069c2:	218f      	movs	r1, #143	@ 0x8f
 80069c4:	f000 fd6e 	bl	80074a4 <__assert_func>
 80069c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069cc:	6006      	str	r6, [r0, #0]
 80069ce:	60c6      	str	r6, [r0, #12]
 80069d0:	b13c      	cbz	r4, 80069e2 <_Bfree+0x3a>
 80069d2:	69eb      	ldr	r3, [r5, #28]
 80069d4:	6862      	ldr	r2, [r4, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069dc:	6021      	str	r1, [r4, #0]
 80069de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	08007bfd 	.word	0x08007bfd
 80069e8:	08007c7d 	.word	0x08007c7d

080069ec <__multadd>:
 80069ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f0:	690d      	ldr	r5, [r1, #16]
 80069f2:	4607      	mov	r7, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	461e      	mov	r6, r3
 80069f8:	f101 0c14 	add.w	ip, r1, #20
 80069fc:	2000      	movs	r0, #0
 80069fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006a02:	b299      	uxth	r1, r3
 8006a04:	fb02 6101 	mla	r1, r2, r1, r6
 8006a08:	0c1e      	lsrs	r6, r3, #16
 8006a0a:	0c0b      	lsrs	r3, r1, #16
 8006a0c:	fb02 3306 	mla	r3, r2, r6, r3
 8006a10:	b289      	uxth	r1, r1
 8006a12:	3001      	adds	r0, #1
 8006a14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a18:	4285      	cmp	r5, r0
 8006a1a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a22:	dcec      	bgt.n	80069fe <__multadd+0x12>
 8006a24:	b30e      	cbz	r6, 8006a6a <__multadd+0x7e>
 8006a26:	68a3      	ldr	r3, [r4, #8]
 8006a28:	42ab      	cmp	r3, r5
 8006a2a:	dc19      	bgt.n	8006a60 <__multadd+0x74>
 8006a2c:	6861      	ldr	r1, [r4, #4]
 8006a2e:	4638      	mov	r0, r7
 8006a30:	3101      	adds	r1, #1
 8006a32:	f7ff ff79 	bl	8006928 <_Balloc>
 8006a36:	4680      	mov	r8, r0
 8006a38:	b928      	cbnz	r0, 8006a46 <__multadd+0x5a>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a70 <__multadd+0x84>)
 8006a3e:	480d      	ldr	r0, [pc, #52]	@ (8006a74 <__multadd+0x88>)
 8006a40:	21ba      	movs	r1, #186	@ 0xba
 8006a42:	f000 fd2f 	bl	80074a4 <__assert_func>
 8006a46:	6922      	ldr	r2, [r4, #16]
 8006a48:	3202      	adds	r2, #2
 8006a4a:	f104 010c 	add.w	r1, r4, #12
 8006a4e:	0092      	lsls	r2, r2, #2
 8006a50:	300c      	adds	r0, #12
 8006a52:	f000 fd19 	bl	8007488 <memcpy>
 8006a56:	4621      	mov	r1, r4
 8006a58:	4638      	mov	r0, r7
 8006a5a:	f7ff ffa5 	bl	80069a8 <_Bfree>
 8006a5e:	4644      	mov	r4, r8
 8006a60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a64:	3501      	adds	r5, #1
 8006a66:	615e      	str	r6, [r3, #20]
 8006a68:	6125      	str	r5, [r4, #16]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a70:	08007c6c 	.word	0x08007c6c
 8006a74:	08007c7d 	.word	0x08007c7d

08006a78 <__hi0bits>:
 8006a78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	bf36      	itet	cc
 8006a80:	0403      	lslcc	r3, r0, #16
 8006a82:	2000      	movcs	r0, #0
 8006a84:	2010      	movcc	r0, #16
 8006a86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a8a:	bf3c      	itt	cc
 8006a8c:	021b      	lslcc	r3, r3, #8
 8006a8e:	3008      	addcc	r0, #8
 8006a90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a94:	bf3c      	itt	cc
 8006a96:	011b      	lslcc	r3, r3, #4
 8006a98:	3004      	addcc	r0, #4
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9e:	bf3c      	itt	cc
 8006aa0:	009b      	lslcc	r3, r3, #2
 8006aa2:	3002      	addcc	r0, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	db05      	blt.n	8006ab4 <__hi0bits+0x3c>
 8006aa8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006aac:	f100 0001 	add.w	r0, r0, #1
 8006ab0:	bf08      	it	eq
 8006ab2:	2020      	moveq	r0, #32
 8006ab4:	4770      	bx	lr

08006ab6 <__lo0bits>:
 8006ab6:	6803      	ldr	r3, [r0, #0]
 8006ab8:	4602      	mov	r2, r0
 8006aba:	f013 0007 	ands.w	r0, r3, #7
 8006abe:	d00b      	beq.n	8006ad8 <__lo0bits+0x22>
 8006ac0:	07d9      	lsls	r1, r3, #31
 8006ac2:	d421      	bmi.n	8006b08 <__lo0bits+0x52>
 8006ac4:	0798      	lsls	r0, r3, #30
 8006ac6:	bf49      	itett	mi
 8006ac8:	085b      	lsrmi	r3, r3, #1
 8006aca:	089b      	lsrpl	r3, r3, #2
 8006acc:	2001      	movmi	r0, #1
 8006ace:	6013      	strmi	r3, [r2, #0]
 8006ad0:	bf5c      	itt	pl
 8006ad2:	6013      	strpl	r3, [r2, #0]
 8006ad4:	2002      	movpl	r0, #2
 8006ad6:	4770      	bx	lr
 8006ad8:	b299      	uxth	r1, r3
 8006ada:	b909      	cbnz	r1, 8006ae0 <__lo0bits+0x2a>
 8006adc:	0c1b      	lsrs	r3, r3, #16
 8006ade:	2010      	movs	r0, #16
 8006ae0:	b2d9      	uxtb	r1, r3
 8006ae2:	b909      	cbnz	r1, 8006ae8 <__lo0bits+0x32>
 8006ae4:	3008      	adds	r0, #8
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	0719      	lsls	r1, r3, #28
 8006aea:	bf04      	itt	eq
 8006aec:	091b      	lsreq	r3, r3, #4
 8006aee:	3004      	addeq	r0, #4
 8006af0:	0799      	lsls	r1, r3, #30
 8006af2:	bf04      	itt	eq
 8006af4:	089b      	lsreq	r3, r3, #2
 8006af6:	3002      	addeq	r0, #2
 8006af8:	07d9      	lsls	r1, r3, #31
 8006afa:	d403      	bmi.n	8006b04 <__lo0bits+0x4e>
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	f100 0001 	add.w	r0, r0, #1
 8006b02:	d003      	beq.n	8006b0c <__lo0bits+0x56>
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	4770      	bx	lr
 8006b08:	2000      	movs	r0, #0
 8006b0a:	4770      	bx	lr
 8006b0c:	2020      	movs	r0, #32
 8006b0e:	4770      	bx	lr

08006b10 <__i2b>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	460c      	mov	r4, r1
 8006b14:	2101      	movs	r1, #1
 8006b16:	f7ff ff07 	bl	8006928 <_Balloc>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	b928      	cbnz	r0, 8006b2a <__i2b+0x1a>
 8006b1e:	4b05      	ldr	r3, [pc, #20]	@ (8006b34 <__i2b+0x24>)
 8006b20:	4805      	ldr	r0, [pc, #20]	@ (8006b38 <__i2b+0x28>)
 8006b22:	f240 1145 	movw	r1, #325	@ 0x145
 8006b26:	f000 fcbd 	bl	80074a4 <__assert_func>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	6144      	str	r4, [r0, #20]
 8006b2e:	6103      	str	r3, [r0, #16]
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	bf00      	nop
 8006b34:	08007c6c 	.word	0x08007c6c
 8006b38:	08007c7d 	.word	0x08007c7d

08006b3c <__multiply>:
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	4614      	mov	r4, r2
 8006b42:	690a      	ldr	r2, [r1, #16]
 8006b44:	6923      	ldr	r3, [r4, #16]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	bfa8      	it	ge
 8006b4a:	4623      	movge	r3, r4
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	bfa4      	itt	ge
 8006b50:	460c      	movge	r4, r1
 8006b52:	461f      	movge	r7, r3
 8006b54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006b58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006b5c:	68a3      	ldr	r3, [r4, #8]
 8006b5e:	6861      	ldr	r1, [r4, #4]
 8006b60:	eb0a 0609 	add.w	r6, sl, r9
 8006b64:	42b3      	cmp	r3, r6
 8006b66:	b085      	sub	sp, #20
 8006b68:	bfb8      	it	lt
 8006b6a:	3101      	addlt	r1, #1
 8006b6c:	f7ff fedc 	bl	8006928 <_Balloc>
 8006b70:	b930      	cbnz	r0, 8006b80 <__multiply+0x44>
 8006b72:	4602      	mov	r2, r0
 8006b74:	4b44      	ldr	r3, [pc, #272]	@ (8006c88 <__multiply+0x14c>)
 8006b76:	4845      	ldr	r0, [pc, #276]	@ (8006c8c <__multiply+0x150>)
 8006b78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006b7c:	f000 fc92 	bl	80074a4 <__assert_func>
 8006b80:	f100 0514 	add.w	r5, r0, #20
 8006b84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b88:	462b      	mov	r3, r5
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	4543      	cmp	r3, r8
 8006b8e:	d321      	bcc.n	8006bd4 <__multiply+0x98>
 8006b90:	f107 0114 	add.w	r1, r7, #20
 8006b94:	f104 0214 	add.w	r2, r4, #20
 8006b98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006b9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ba0:	9302      	str	r3, [sp, #8]
 8006ba2:	1b13      	subs	r3, r2, r4
 8006ba4:	3b15      	subs	r3, #21
 8006ba6:	f023 0303 	bic.w	r3, r3, #3
 8006baa:	3304      	adds	r3, #4
 8006bac:	f104 0715 	add.w	r7, r4, #21
 8006bb0:	42ba      	cmp	r2, r7
 8006bb2:	bf38      	it	cc
 8006bb4:	2304      	movcc	r3, #4
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	9b02      	ldr	r3, [sp, #8]
 8006bba:	9103      	str	r1, [sp, #12]
 8006bbc:	428b      	cmp	r3, r1
 8006bbe:	d80c      	bhi.n	8006bda <__multiply+0x9e>
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	dd03      	ble.n	8006bcc <__multiply+0x90>
 8006bc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d05b      	beq.n	8006c84 <__multiply+0x148>
 8006bcc:	6106      	str	r6, [r0, #16]
 8006bce:	b005      	add	sp, #20
 8006bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd4:	f843 2b04 	str.w	r2, [r3], #4
 8006bd8:	e7d8      	b.n	8006b8c <__multiply+0x50>
 8006bda:	f8b1 a000 	ldrh.w	sl, [r1]
 8006bde:	f1ba 0f00 	cmp.w	sl, #0
 8006be2:	d024      	beq.n	8006c2e <__multiply+0xf2>
 8006be4:	f104 0e14 	add.w	lr, r4, #20
 8006be8:	46a9      	mov	r9, r5
 8006bea:	f04f 0c00 	mov.w	ip, #0
 8006bee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006bf2:	f8d9 3000 	ldr.w	r3, [r9]
 8006bf6:	fa1f fb87 	uxth.w	fp, r7
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c04:	f8d9 7000 	ldr.w	r7, [r9]
 8006c08:	4463      	add	r3, ip
 8006c0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c0e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006c12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c1c:	4572      	cmp	r2, lr
 8006c1e:	f849 3b04 	str.w	r3, [r9], #4
 8006c22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c26:	d8e2      	bhi.n	8006bee <__multiply+0xb2>
 8006c28:	9b01      	ldr	r3, [sp, #4]
 8006c2a:	f845 c003 	str.w	ip, [r5, r3]
 8006c2e:	9b03      	ldr	r3, [sp, #12]
 8006c30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c34:	3104      	adds	r1, #4
 8006c36:	f1b9 0f00 	cmp.w	r9, #0
 8006c3a:	d021      	beq.n	8006c80 <__multiply+0x144>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	f104 0c14 	add.w	ip, r4, #20
 8006c42:	46ae      	mov	lr, r5
 8006c44:	f04f 0a00 	mov.w	sl, #0
 8006c48:	f8bc b000 	ldrh.w	fp, [ip]
 8006c4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006c50:	fb09 770b 	mla	r7, r9, fp, r7
 8006c54:	4457      	add	r7, sl
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c5c:	f84e 3b04 	str.w	r3, [lr], #4
 8006c60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c68:	f8be 3000 	ldrh.w	r3, [lr]
 8006c6c:	fb09 330a 	mla	r3, r9, sl, r3
 8006c70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006c74:	4562      	cmp	r2, ip
 8006c76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c7a:	d8e5      	bhi.n	8006c48 <__multiply+0x10c>
 8006c7c:	9f01      	ldr	r7, [sp, #4]
 8006c7e:	51eb      	str	r3, [r5, r7]
 8006c80:	3504      	adds	r5, #4
 8006c82:	e799      	b.n	8006bb8 <__multiply+0x7c>
 8006c84:	3e01      	subs	r6, #1
 8006c86:	e79b      	b.n	8006bc0 <__multiply+0x84>
 8006c88:	08007c6c 	.word	0x08007c6c
 8006c8c:	08007c7d 	.word	0x08007c7d

08006c90 <__pow5mult>:
 8006c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c94:	4615      	mov	r5, r2
 8006c96:	f012 0203 	ands.w	r2, r2, #3
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	460e      	mov	r6, r1
 8006c9e:	d007      	beq.n	8006cb0 <__pow5mult+0x20>
 8006ca0:	4c25      	ldr	r4, [pc, #148]	@ (8006d38 <__pow5mult+0xa8>)
 8006ca2:	3a01      	subs	r2, #1
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006caa:	f7ff fe9f 	bl	80069ec <__multadd>
 8006cae:	4606      	mov	r6, r0
 8006cb0:	10ad      	asrs	r5, r5, #2
 8006cb2:	d03d      	beq.n	8006d30 <__pow5mult+0xa0>
 8006cb4:	69fc      	ldr	r4, [r7, #28]
 8006cb6:	b97c      	cbnz	r4, 8006cd8 <__pow5mult+0x48>
 8006cb8:	2010      	movs	r0, #16
 8006cba:	f7ff fd7f 	bl	80067bc <malloc>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	61f8      	str	r0, [r7, #28]
 8006cc2:	b928      	cbnz	r0, 8006cd0 <__pow5mult+0x40>
 8006cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d3c <__pow5mult+0xac>)
 8006cc6:	481e      	ldr	r0, [pc, #120]	@ (8006d40 <__pow5mult+0xb0>)
 8006cc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ccc:	f000 fbea 	bl	80074a4 <__assert_func>
 8006cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cd4:	6004      	str	r4, [r0, #0]
 8006cd6:	60c4      	str	r4, [r0, #12]
 8006cd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ce0:	b94c      	cbnz	r4, 8006cf6 <__pow5mult+0x66>
 8006ce2:	f240 2171 	movw	r1, #625	@ 0x271
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f7ff ff12 	bl	8006b10 <__i2b>
 8006cec:	2300      	movs	r3, #0
 8006cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	6003      	str	r3, [r0, #0]
 8006cf6:	f04f 0900 	mov.w	r9, #0
 8006cfa:	07eb      	lsls	r3, r5, #31
 8006cfc:	d50a      	bpl.n	8006d14 <__pow5mult+0x84>
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4622      	mov	r2, r4
 8006d02:	4638      	mov	r0, r7
 8006d04:	f7ff ff1a 	bl	8006b3c <__multiply>
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4680      	mov	r8, r0
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7ff fe4b 	bl	80069a8 <_Bfree>
 8006d12:	4646      	mov	r6, r8
 8006d14:	106d      	asrs	r5, r5, #1
 8006d16:	d00b      	beq.n	8006d30 <__pow5mult+0xa0>
 8006d18:	6820      	ldr	r0, [r4, #0]
 8006d1a:	b938      	cbnz	r0, 8006d2c <__pow5mult+0x9c>
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4638      	mov	r0, r7
 8006d22:	f7ff ff0b 	bl	8006b3c <__multiply>
 8006d26:	6020      	str	r0, [r4, #0]
 8006d28:	f8c0 9000 	str.w	r9, [r0]
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	e7e4      	b.n	8006cfa <__pow5mult+0x6a>
 8006d30:	4630      	mov	r0, r6
 8006d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d36:	bf00      	nop
 8006d38:	08007cd8 	.word	0x08007cd8
 8006d3c:	08007bfd 	.word	0x08007bfd
 8006d40:	08007c7d 	.word	0x08007c7d

08006d44 <__lshift>:
 8006d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d48:	460c      	mov	r4, r1
 8006d4a:	6849      	ldr	r1, [r1, #4]
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	4607      	mov	r7, r0
 8006d56:	4691      	mov	r9, r2
 8006d58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d5c:	f108 0601 	add.w	r6, r8, #1
 8006d60:	42b3      	cmp	r3, r6
 8006d62:	db0b      	blt.n	8006d7c <__lshift+0x38>
 8006d64:	4638      	mov	r0, r7
 8006d66:	f7ff fddf 	bl	8006928 <_Balloc>
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	b948      	cbnz	r0, 8006d82 <__lshift+0x3e>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	4b28      	ldr	r3, [pc, #160]	@ (8006e14 <__lshift+0xd0>)
 8006d72:	4829      	ldr	r0, [pc, #164]	@ (8006e18 <__lshift+0xd4>)
 8006d74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006d78:	f000 fb94 	bl	80074a4 <__assert_func>
 8006d7c:	3101      	adds	r1, #1
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	e7ee      	b.n	8006d60 <__lshift+0x1c>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f100 0114 	add.w	r1, r0, #20
 8006d88:	f100 0210 	add.w	r2, r0, #16
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	4553      	cmp	r3, sl
 8006d90:	db33      	blt.n	8006dfa <__lshift+0xb6>
 8006d92:	6920      	ldr	r0, [r4, #16]
 8006d94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d98:	f104 0314 	add.w	r3, r4, #20
 8006d9c:	f019 091f 	ands.w	r9, r9, #31
 8006da0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006da4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006da8:	d02b      	beq.n	8006e02 <__lshift+0xbe>
 8006daa:	f1c9 0e20 	rsb	lr, r9, #32
 8006dae:	468a      	mov	sl, r1
 8006db0:	2200      	movs	r2, #0
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	fa00 f009 	lsl.w	r0, r0, r9
 8006db8:	4310      	orrs	r0, r2
 8006dba:	f84a 0b04 	str.w	r0, [sl], #4
 8006dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc2:	459c      	cmp	ip, r3
 8006dc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006dc8:	d8f3      	bhi.n	8006db2 <__lshift+0x6e>
 8006dca:	ebac 0304 	sub.w	r3, ip, r4
 8006dce:	3b15      	subs	r3, #21
 8006dd0:	f023 0303 	bic.w	r3, r3, #3
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	f104 0015 	add.w	r0, r4, #21
 8006dda:	4584      	cmp	ip, r0
 8006ddc:	bf38      	it	cc
 8006dde:	2304      	movcc	r3, #4
 8006de0:	50ca      	str	r2, [r1, r3]
 8006de2:	b10a      	cbz	r2, 8006de8 <__lshift+0xa4>
 8006de4:	f108 0602 	add.w	r6, r8, #2
 8006de8:	3e01      	subs	r6, #1
 8006dea:	4638      	mov	r0, r7
 8006dec:	612e      	str	r6, [r5, #16]
 8006dee:	4621      	mov	r1, r4
 8006df0:	f7ff fdda 	bl	80069a8 <_Bfree>
 8006df4:	4628      	mov	r0, r5
 8006df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dfe:	3301      	adds	r3, #1
 8006e00:	e7c5      	b.n	8006d8e <__lshift+0x4a>
 8006e02:	3904      	subs	r1, #4
 8006e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e08:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e0c:	459c      	cmp	ip, r3
 8006e0e:	d8f9      	bhi.n	8006e04 <__lshift+0xc0>
 8006e10:	e7ea      	b.n	8006de8 <__lshift+0xa4>
 8006e12:	bf00      	nop
 8006e14:	08007c6c 	.word	0x08007c6c
 8006e18:	08007c7d 	.word	0x08007c7d

08006e1c <__mcmp>:
 8006e1c:	690a      	ldr	r2, [r1, #16]
 8006e1e:	4603      	mov	r3, r0
 8006e20:	6900      	ldr	r0, [r0, #16]
 8006e22:	1a80      	subs	r0, r0, r2
 8006e24:	b530      	push	{r4, r5, lr}
 8006e26:	d10e      	bne.n	8006e46 <__mcmp+0x2a>
 8006e28:	3314      	adds	r3, #20
 8006e2a:	3114      	adds	r1, #20
 8006e2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e3c:	4295      	cmp	r5, r2
 8006e3e:	d003      	beq.n	8006e48 <__mcmp+0x2c>
 8006e40:	d205      	bcs.n	8006e4e <__mcmp+0x32>
 8006e42:	f04f 30ff 	mov.w	r0, #4294967295
 8006e46:	bd30      	pop	{r4, r5, pc}
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d3f3      	bcc.n	8006e34 <__mcmp+0x18>
 8006e4c:	e7fb      	b.n	8006e46 <__mcmp+0x2a>
 8006e4e:	2001      	movs	r0, #1
 8006e50:	e7f9      	b.n	8006e46 <__mcmp+0x2a>
	...

08006e54 <__mdiff>:
 8006e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	4689      	mov	r9, r1
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	4648      	mov	r0, r9
 8006e60:	4614      	mov	r4, r2
 8006e62:	f7ff ffdb 	bl	8006e1c <__mcmp>
 8006e66:	1e05      	subs	r5, r0, #0
 8006e68:	d112      	bne.n	8006e90 <__mdiff+0x3c>
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	f7ff fd5b 	bl	8006928 <_Balloc>
 8006e72:	4602      	mov	r2, r0
 8006e74:	b928      	cbnz	r0, 8006e82 <__mdiff+0x2e>
 8006e76:	4b3f      	ldr	r3, [pc, #252]	@ (8006f74 <__mdiff+0x120>)
 8006e78:	f240 2137 	movw	r1, #567	@ 0x237
 8006e7c:	483e      	ldr	r0, [pc, #248]	@ (8006f78 <__mdiff+0x124>)
 8006e7e:	f000 fb11 	bl	80074a4 <__assert_func>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e88:	4610      	mov	r0, r2
 8006e8a:	b003      	add	sp, #12
 8006e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e90:	bfbc      	itt	lt
 8006e92:	464b      	movlt	r3, r9
 8006e94:	46a1      	movlt	r9, r4
 8006e96:	4630      	mov	r0, r6
 8006e98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006e9c:	bfba      	itte	lt
 8006e9e:	461c      	movlt	r4, r3
 8006ea0:	2501      	movlt	r5, #1
 8006ea2:	2500      	movge	r5, #0
 8006ea4:	f7ff fd40 	bl	8006928 <_Balloc>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	b918      	cbnz	r0, 8006eb4 <__mdiff+0x60>
 8006eac:	4b31      	ldr	r3, [pc, #196]	@ (8006f74 <__mdiff+0x120>)
 8006eae:	f240 2145 	movw	r1, #581	@ 0x245
 8006eb2:	e7e3      	b.n	8006e7c <__mdiff+0x28>
 8006eb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006eb8:	6926      	ldr	r6, [r4, #16]
 8006eba:	60c5      	str	r5, [r0, #12]
 8006ebc:	f109 0310 	add.w	r3, r9, #16
 8006ec0:	f109 0514 	add.w	r5, r9, #20
 8006ec4:	f104 0e14 	add.w	lr, r4, #20
 8006ec8:	f100 0b14 	add.w	fp, r0, #20
 8006ecc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ed0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	46d9      	mov	r9, fp
 8006ed8:	f04f 0c00 	mov.w	ip, #0
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ee2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006ee6:	9301      	str	r3, [sp, #4]
 8006ee8:	fa1f f38a 	uxth.w	r3, sl
 8006eec:	4619      	mov	r1, r3
 8006eee:	b283      	uxth	r3, r0
 8006ef0:	1acb      	subs	r3, r1, r3
 8006ef2:	0c00      	lsrs	r0, r0, #16
 8006ef4:	4463      	add	r3, ip
 8006ef6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006efa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f04:	4576      	cmp	r6, lr
 8006f06:	f849 3b04 	str.w	r3, [r9], #4
 8006f0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f0e:	d8e5      	bhi.n	8006edc <__mdiff+0x88>
 8006f10:	1b33      	subs	r3, r6, r4
 8006f12:	3b15      	subs	r3, #21
 8006f14:	f023 0303 	bic.w	r3, r3, #3
 8006f18:	3415      	adds	r4, #21
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	42a6      	cmp	r6, r4
 8006f1e:	bf38      	it	cc
 8006f20:	2304      	movcc	r3, #4
 8006f22:	441d      	add	r5, r3
 8006f24:	445b      	add	r3, fp
 8006f26:	461e      	mov	r6, r3
 8006f28:	462c      	mov	r4, r5
 8006f2a:	4544      	cmp	r4, r8
 8006f2c:	d30e      	bcc.n	8006f4c <__mdiff+0xf8>
 8006f2e:	f108 0103 	add.w	r1, r8, #3
 8006f32:	1b49      	subs	r1, r1, r5
 8006f34:	f021 0103 	bic.w	r1, r1, #3
 8006f38:	3d03      	subs	r5, #3
 8006f3a:	45a8      	cmp	r8, r5
 8006f3c:	bf38      	it	cc
 8006f3e:	2100      	movcc	r1, #0
 8006f40:	440b      	add	r3, r1
 8006f42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f46:	b191      	cbz	r1, 8006f6e <__mdiff+0x11a>
 8006f48:	6117      	str	r7, [r2, #16]
 8006f4a:	e79d      	b.n	8006e88 <__mdiff+0x34>
 8006f4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006f50:	46e6      	mov	lr, ip
 8006f52:	0c08      	lsrs	r0, r1, #16
 8006f54:	fa1c fc81 	uxtah	ip, ip, r1
 8006f58:	4471      	add	r1, lr
 8006f5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006f5e:	b289      	uxth	r1, r1
 8006f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f64:	f846 1b04 	str.w	r1, [r6], #4
 8006f68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f6c:	e7dd      	b.n	8006f2a <__mdiff+0xd6>
 8006f6e:	3f01      	subs	r7, #1
 8006f70:	e7e7      	b.n	8006f42 <__mdiff+0xee>
 8006f72:	bf00      	nop
 8006f74:	08007c6c 	.word	0x08007c6c
 8006f78:	08007c7d 	.word	0x08007c7d

08006f7c <__d2b>:
 8006f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f80:	460f      	mov	r7, r1
 8006f82:	2101      	movs	r1, #1
 8006f84:	ec59 8b10 	vmov	r8, r9, d0
 8006f88:	4616      	mov	r6, r2
 8006f8a:	f7ff fccd 	bl	8006928 <_Balloc>
 8006f8e:	4604      	mov	r4, r0
 8006f90:	b930      	cbnz	r0, 8006fa0 <__d2b+0x24>
 8006f92:	4602      	mov	r2, r0
 8006f94:	4b23      	ldr	r3, [pc, #140]	@ (8007024 <__d2b+0xa8>)
 8006f96:	4824      	ldr	r0, [pc, #144]	@ (8007028 <__d2b+0xac>)
 8006f98:	f240 310f 	movw	r1, #783	@ 0x30f
 8006f9c:	f000 fa82 	bl	80074a4 <__assert_func>
 8006fa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fa8:	b10d      	cbz	r5, 8006fae <__d2b+0x32>
 8006faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	f1b8 0300 	subs.w	r3, r8, #0
 8006fb4:	d023      	beq.n	8006ffe <__d2b+0x82>
 8006fb6:	4668      	mov	r0, sp
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	f7ff fd7c 	bl	8006ab6 <__lo0bits>
 8006fbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fc2:	b1d0      	cbz	r0, 8006ffa <__d2b+0x7e>
 8006fc4:	f1c0 0320 	rsb	r3, r0, #32
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	40c2      	lsrs	r2, r0
 8006fd0:	6163      	str	r3, [r4, #20]
 8006fd2:	9201      	str	r2, [sp, #4]
 8006fd4:	9b01      	ldr	r3, [sp, #4]
 8006fd6:	61a3      	str	r3, [r4, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bf0c      	ite	eq
 8006fdc:	2201      	moveq	r2, #1
 8006fde:	2202      	movne	r2, #2
 8006fe0:	6122      	str	r2, [r4, #16]
 8006fe2:	b1a5      	cbz	r5, 800700e <__d2b+0x92>
 8006fe4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006fe8:	4405      	add	r5, r0
 8006fea:	603d      	str	r5, [r7, #0]
 8006fec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ff0:	6030      	str	r0, [r6, #0]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	b003      	add	sp, #12
 8006ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ffa:	6161      	str	r1, [r4, #20]
 8006ffc:	e7ea      	b.n	8006fd4 <__d2b+0x58>
 8006ffe:	a801      	add	r0, sp, #4
 8007000:	f7ff fd59 	bl	8006ab6 <__lo0bits>
 8007004:	9b01      	ldr	r3, [sp, #4]
 8007006:	6163      	str	r3, [r4, #20]
 8007008:	3020      	adds	r0, #32
 800700a:	2201      	movs	r2, #1
 800700c:	e7e8      	b.n	8006fe0 <__d2b+0x64>
 800700e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007012:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007016:	6038      	str	r0, [r7, #0]
 8007018:	6918      	ldr	r0, [r3, #16]
 800701a:	f7ff fd2d 	bl	8006a78 <__hi0bits>
 800701e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007022:	e7e5      	b.n	8006ff0 <__d2b+0x74>
 8007024:	08007c6c 	.word	0x08007c6c
 8007028:	08007c7d 	.word	0x08007c7d

0800702c <__ssputs_r>:
 800702c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	688e      	ldr	r6, [r1, #8]
 8007032:	461f      	mov	r7, r3
 8007034:	42be      	cmp	r6, r7
 8007036:	680b      	ldr	r3, [r1, #0]
 8007038:	4682      	mov	sl, r0
 800703a:	460c      	mov	r4, r1
 800703c:	4690      	mov	r8, r2
 800703e:	d82d      	bhi.n	800709c <__ssputs_r+0x70>
 8007040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007044:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007048:	d026      	beq.n	8007098 <__ssputs_r+0x6c>
 800704a:	6965      	ldr	r5, [r4, #20]
 800704c:	6909      	ldr	r1, [r1, #16]
 800704e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007052:	eba3 0901 	sub.w	r9, r3, r1
 8007056:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800705a:	1c7b      	adds	r3, r7, #1
 800705c:	444b      	add	r3, r9
 800705e:	106d      	asrs	r5, r5, #1
 8007060:	429d      	cmp	r5, r3
 8007062:	bf38      	it	cc
 8007064:	461d      	movcc	r5, r3
 8007066:	0553      	lsls	r3, r2, #21
 8007068:	d527      	bpl.n	80070ba <__ssputs_r+0x8e>
 800706a:	4629      	mov	r1, r5
 800706c:	f7ff fbd0 	bl	8006810 <_malloc_r>
 8007070:	4606      	mov	r6, r0
 8007072:	b360      	cbz	r0, 80070ce <__ssputs_r+0xa2>
 8007074:	6921      	ldr	r1, [r4, #16]
 8007076:	464a      	mov	r2, r9
 8007078:	f000 fa06 	bl	8007488 <memcpy>
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007086:	81a3      	strh	r3, [r4, #12]
 8007088:	6126      	str	r6, [r4, #16]
 800708a:	6165      	str	r5, [r4, #20]
 800708c:	444e      	add	r6, r9
 800708e:	eba5 0509 	sub.w	r5, r5, r9
 8007092:	6026      	str	r6, [r4, #0]
 8007094:	60a5      	str	r5, [r4, #8]
 8007096:	463e      	mov	r6, r7
 8007098:	42be      	cmp	r6, r7
 800709a:	d900      	bls.n	800709e <__ssputs_r+0x72>
 800709c:	463e      	mov	r6, r7
 800709e:	6820      	ldr	r0, [r4, #0]
 80070a0:	4632      	mov	r2, r6
 80070a2:	4641      	mov	r1, r8
 80070a4:	f000 f9c6 	bl	8007434 <memmove>
 80070a8:	68a3      	ldr	r3, [r4, #8]
 80070aa:	1b9b      	subs	r3, r3, r6
 80070ac:	60a3      	str	r3, [r4, #8]
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	4433      	add	r3, r6
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	2000      	movs	r0, #0
 80070b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ba:	462a      	mov	r2, r5
 80070bc:	f000 fa36 	bl	800752c <_realloc_r>
 80070c0:	4606      	mov	r6, r0
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d1e0      	bne.n	8007088 <__ssputs_r+0x5c>
 80070c6:	6921      	ldr	r1, [r4, #16]
 80070c8:	4650      	mov	r0, sl
 80070ca:	f7ff fb2d 	bl	8006728 <_free_r>
 80070ce:	230c      	movs	r3, #12
 80070d0:	f8ca 3000 	str.w	r3, [sl]
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	f04f 30ff 	mov.w	r0, #4294967295
 80070e0:	e7e9      	b.n	80070b6 <__ssputs_r+0x8a>
	...

080070e4 <_svfiprintf_r>:
 80070e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	4698      	mov	r8, r3
 80070ea:	898b      	ldrh	r3, [r1, #12]
 80070ec:	061b      	lsls	r3, r3, #24
 80070ee:	b09d      	sub	sp, #116	@ 0x74
 80070f0:	4607      	mov	r7, r0
 80070f2:	460d      	mov	r5, r1
 80070f4:	4614      	mov	r4, r2
 80070f6:	d510      	bpl.n	800711a <_svfiprintf_r+0x36>
 80070f8:	690b      	ldr	r3, [r1, #16]
 80070fa:	b973      	cbnz	r3, 800711a <_svfiprintf_r+0x36>
 80070fc:	2140      	movs	r1, #64	@ 0x40
 80070fe:	f7ff fb87 	bl	8006810 <_malloc_r>
 8007102:	6028      	str	r0, [r5, #0]
 8007104:	6128      	str	r0, [r5, #16]
 8007106:	b930      	cbnz	r0, 8007116 <_svfiprintf_r+0x32>
 8007108:	230c      	movs	r3, #12
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	b01d      	add	sp, #116	@ 0x74
 8007112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007116:	2340      	movs	r3, #64	@ 0x40
 8007118:	616b      	str	r3, [r5, #20]
 800711a:	2300      	movs	r3, #0
 800711c:	9309      	str	r3, [sp, #36]	@ 0x24
 800711e:	2320      	movs	r3, #32
 8007120:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007124:	f8cd 800c 	str.w	r8, [sp, #12]
 8007128:	2330      	movs	r3, #48	@ 0x30
 800712a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80072c8 <_svfiprintf_r+0x1e4>
 800712e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007132:	f04f 0901 	mov.w	r9, #1
 8007136:	4623      	mov	r3, r4
 8007138:	469a      	mov	sl, r3
 800713a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800713e:	b10a      	cbz	r2, 8007144 <_svfiprintf_r+0x60>
 8007140:	2a25      	cmp	r2, #37	@ 0x25
 8007142:	d1f9      	bne.n	8007138 <_svfiprintf_r+0x54>
 8007144:	ebba 0b04 	subs.w	fp, sl, r4
 8007148:	d00b      	beq.n	8007162 <_svfiprintf_r+0x7e>
 800714a:	465b      	mov	r3, fp
 800714c:	4622      	mov	r2, r4
 800714e:	4629      	mov	r1, r5
 8007150:	4638      	mov	r0, r7
 8007152:	f7ff ff6b 	bl	800702c <__ssputs_r>
 8007156:	3001      	adds	r0, #1
 8007158:	f000 80a7 	beq.w	80072aa <_svfiprintf_r+0x1c6>
 800715c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800715e:	445a      	add	r2, fp
 8007160:	9209      	str	r2, [sp, #36]	@ 0x24
 8007162:	f89a 3000 	ldrb.w	r3, [sl]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 809f 	beq.w	80072aa <_svfiprintf_r+0x1c6>
 800716c:	2300      	movs	r3, #0
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007176:	f10a 0a01 	add.w	sl, sl, #1
 800717a:	9304      	str	r3, [sp, #16]
 800717c:	9307      	str	r3, [sp, #28]
 800717e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007182:	931a      	str	r3, [sp, #104]	@ 0x68
 8007184:	4654      	mov	r4, sl
 8007186:	2205      	movs	r2, #5
 8007188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718c:	484e      	ldr	r0, [pc, #312]	@ (80072c8 <_svfiprintf_r+0x1e4>)
 800718e:	f7f9 f81f 	bl	80001d0 <memchr>
 8007192:	9a04      	ldr	r2, [sp, #16]
 8007194:	b9d8      	cbnz	r0, 80071ce <_svfiprintf_r+0xea>
 8007196:	06d0      	lsls	r0, r2, #27
 8007198:	bf44      	itt	mi
 800719a:	2320      	movmi	r3, #32
 800719c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071a0:	0711      	lsls	r1, r2, #28
 80071a2:	bf44      	itt	mi
 80071a4:	232b      	movmi	r3, #43	@ 0x2b
 80071a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071aa:	f89a 3000 	ldrb.w	r3, [sl]
 80071ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80071b0:	d015      	beq.n	80071de <_svfiprintf_r+0xfa>
 80071b2:	9a07      	ldr	r2, [sp, #28]
 80071b4:	4654      	mov	r4, sl
 80071b6:	2000      	movs	r0, #0
 80071b8:	f04f 0c0a 	mov.w	ip, #10
 80071bc:	4621      	mov	r1, r4
 80071be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071c2:	3b30      	subs	r3, #48	@ 0x30
 80071c4:	2b09      	cmp	r3, #9
 80071c6:	d94b      	bls.n	8007260 <_svfiprintf_r+0x17c>
 80071c8:	b1b0      	cbz	r0, 80071f8 <_svfiprintf_r+0x114>
 80071ca:	9207      	str	r2, [sp, #28]
 80071cc:	e014      	b.n	80071f8 <_svfiprintf_r+0x114>
 80071ce:	eba0 0308 	sub.w	r3, r0, r8
 80071d2:	fa09 f303 	lsl.w	r3, r9, r3
 80071d6:	4313      	orrs	r3, r2
 80071d8:	9304      	str	r3, [sp, #16]
 80071da:	46a2      	mov	sl, r4
 80071dc:	e7d2      	b.n	8007184 <_svfiprintf_r+0xa0>
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	1d19      	adds	r1, r3, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	9103      	str	r1, [sp, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bfbb      	ittet	lt
 80071ea:	425b      	neglt	r3, r3
 80071ec:	f042 0202 	orrlt.w	r2, r2, #2
 80071f0:	9307      	strge	r3, [sp, #28]
 80071f2:	9307      	strlt	r3, [sp, #28]
 80071f4:	bfb8      	it	lt
 80071f6:	9204      	strlt	r2, [sp, #16]
 80071f8:	7823      	ldrb	r3, [r4, #0]
 80071fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80071fc:	d10a      	bne.n	8007214 <_svfiprintf_r+0x130>
 80071fe:	7863      	ldrb	r3, [r4, #1]
 8007200:	2b2a      	cmp	r3, #42	@ 0x2a
 8007202:	d132      	bne.n	800726a <_svfiprintf_r+0x186>
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	1d1a      	adds	r2, r3, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	9203      	str	r2, [sp, #12]
 800720c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007210:	3402      	adds	r4, #2
 8007212:	9305      	str	r3, [sp, #20]
 8007214:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80072d8 <_svfiprintf_r+0x1f4>
 8007218:	7821      	ldrb	r1, [r4, #0]
 800721a:	2203      	movs	r2, #3
 800721c:	4650      	mov	r0, sl
 800721e:	f7f8 ffd7 	bl	80001d0 <memchr>
 8007222:	b138      	cbz	r0, 8007234 <_svfiprintf_r+0x150>
 8007224:	9b04      	ldr	r3, [sp, #16]
 8007226:	eba0 000a 	sub.w	r0, r0, sl
 800722a:	2240      	movs	r2, #64	@ 0x40
 800722c:	4082      	lsls	r2, r0
 800722e:	4313      	orrs	r3, r2
 8007230:	3401      	adds	r4, #1
 8007232:	9304      	str	r3, [sp, #16]
 8007234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007238:	4824      	ldr	r0, [pc, #144]	@ (80072cc <_svfiprintf_r+0x1e8>)
 800723a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800723e:	2206      	movs	r2, #6
 8007240:	f7f8 ffc6 	bl	80001d0 <memchr>
 8007244:	2800      	cmp	r0, #0
 8007246:	d036      	beq.n	80072b6 <_svfiprintf_r+0x1d2>
 8007248:	4b21      	ldr	r3, [pc, #132]	@ (80072d0 <_svfiprintf_r+0x1ec>)
 800724a:	bb1b      	cbnz	r3, 8007294 <_svfiprintf_r+0x1b0>
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	3307      	adds	r3, #7
 8007250:	f023 0307 	bic.w	r3, r3, #7
 8007254:	3308      	adds	r3, #8
 8007256:	9303      	str	r3, [sp, #12]
 8007258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800725a:	4433      	add	r3, r6
 800725c:	9309      	str	r3, [sp, #36]	@ 0x24
 800725e:	e76a      	b.n	8007136 <_svfiprintf_r+0x52>
 8007260:	fb0c 3202 	mla	r2, ip, r2, r3
 8007264:	460c      	mov	r4, r1
 8007266:	2001      	movs	r0, #1
 8007268:	e7a8      	b.n	80071bc <_svfiprintf_r+0xd8>
 800726a:	2300      	movs	r3, #0
 800726c:	3401      	adds	r4, #1
 800726e:	9305      	str	r3, [sp, #20]
 8007270:	4619      	mov	r1, r3
 8007272:	f04f 0c0a 	mov.w	ip, #10
 8007276:	4620      	mov	r0, r4
 8007278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800727c:	3a30      	subs	r2, #48	@ 0x30
 800727e:	2a09      	cmp	r2, #9
 8007280:	d903      	bls.n	800728a <_svfiprintf_r+0x1a6>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0c6      	beq.n	8007214 <_svfiprintf_r+0x130>
 8007286:	9105      	str	r1, [sp, #20]
 8007288:	e7c4      	b.n	8007214 <_svfiprintf_r+0x130>
 800728a:	fb0c 2101 	mla	r1, ip, r1, r2
 800728e:	4604      	mov	r4, r0
 8007290:	2301      	movs	r3, #1
 8007292:	e7f0      	b.n	8007276 <_svfiprintf_r+0x192>
 8007294:	ab03      	add	r3, sp, #12
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	462a      	mov	r2, r5
 800729a:	4b0e      	ldr	r3, [pc, #56]	@ (80072d4 <_svfiprintf_r+0x1f0>)
 800729c:	a904      	add	r1, sp, #16
 800729e:	4638      	mov	r0, r7
 80072a0:	f7fd fe96 	bl	8004fd0 <_printf_float>
 80072a4:	1c42      	adds	r2, r0, #1
 80072a6:	4606      	mov	r6, r0
 80072a8:	d1d6      	bne.n	8007258 <_svfiprintf_r+0x174>
 80072aa:	89ab      	ldrh	r3, [r5, #12]
 80072ac:	065b      	lsls	r3, r3, #25
 80072ae:	f53f af2d 	bmi.w	800710c <_svfiprintf_r+0x28>
 80072b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072b4:	e72c      	b.n	8007110 <_svfiprintf_r+0x2c>
 80072b6:	ab03      	add	r3, sp, #12
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	462a      	mov	r2, r5
 80072bc:	4b05      	ldr	r3, [pc, #20]	@ (80072d4 <_svfiprintf_r+0x1f0>)
 80072be:	a904      	add	r1, sp, #16
 80072c0:	4638      	mov	r0, r7
 80072c2:	f7fe f91d 	bl	8005500 <_printf_i>
 80072c6:	e7ed      	b.n	80072a4 <_svfiprintf_r+0x1c0>
 80072c8:	08007dd8 	.word	0x08007dd8
 80072cc:	08007de2 	.word	0x08007de2
 80072d0:	08004fd1 	.word	0x08004fd1
 80072d4:	0800702d 	.word	0x0800702d
 80072d8:	08007dde 	.word	0x08007dde

080072dc <__sflush_r>:
 80072dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e4:	0716      	lsls	r6, r2, #28
 80072e6:	4605      	mov	r5, r0
 80072e8:	460c      	mov	r4, r1
 80072ea:	d454      	bmi.n	8007396 <__sflush_r+0xba>
 80072ec:	684b      	ldr	r3, [r1, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dc02      	bgt.n	80072f8 <__sflush_r+0x1c>
 80072f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dd48      	ble.n	800738a <__sflush_r+0xae>
 80072f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072fa:	2e00      	cmp	r6, #0
 80072fc:	d045      	beq.n	800738a <__sflush_r+0xae>
 80072fe:	2300      	movs	r3, #0
 8007300:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007304:	682f      	ldr	r7, [r5, #0]
 8007306:	6a21      	ldr	r1, [r4, #32]
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	d030      	beq.n	800736e <__sflush_r+0x92>
 800730c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	0759      	lsls	r1, r3, #29
 8007312:	d505      	bpl.n	8007320 <__sflush_r+0x44>
 8007314:	6863      	ldr	r3, [r4, #4]
 8007316:	1ad2      	subs	r2, r2, r3
 8007318:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800731a:	b10b      	cbz	r3, 8007320 <__sflush_r+0x44>
 800731c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800731e:	1ad2      	subs	r2, r2, r3
 8007320:	2300      	movs	r3, #0
 8007322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007324:	6a21      	ldr	r1, [r4, #32]
 8007326:	4628      	mov	r0, r5
 8007328:	47b0      	blx	r6
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	d106      	bne.n	800733e <__sflush_r+0x62>
 8007330:	6829      	ldr	r1, [r5, #0]
 8007332:	291d      	cmp	r1, #29
 8007334:	d82b      	bhi.n	800738e <__sflush_r+0xb2>
 8007336:	4a2a      	ldr	r2, [pc, #168]	@ (80073e0 <__sflush_r+0x104>)
 8007338:	410a      	asrs	r2, r1
 800733a:	07d6      	lsls	r6, r2, #31
 800733c:	d427      	bmi.n	800738e <__sflush_r+0xb2>
 800733e:	2200      	movs	r2, #0
 8007340:	6062      	str	r2, [r4, #4]
 8007342:	04d9      	lsls	r1, r3, #19
 8007344:	6922      	ldr	r2, [r4, #16]
 8007346:	6022      	str	r2, [r4, #0]
 8007348:	d504      	bpl.n	8007354 <__sflush_r+0x78>
 800734a:	1c42      	adds	r2, r0, #1
 800734c:	d101      	bne.n	8007352 <__sflush_r+0x76>
 800734e:	682b      	ldr	r3, [r5, #0]
 8007350:	b903      	cbnz	r3, 8007354 <__sflush_r+0x78>
 8007352:	6560      	str	r0, [r4, #84]	@ 0x54
 8007354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007356:	602f      	str	r7, [r5, #0]
 8007358:	b1b9      	cbz	r1, 800738a <__sflush_r+0xae>
 800735a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800735e:	4299      	cmp	r1, r3
 8007360:	d002      	beq.n	8007368 <__sflush_r+0x8c>
 8007362:	4628      	mov	r0, r5
 8007364:	f7ff f9e0 	bl	8006728 <_free_r>
 8007368:	2300      	movs	r3, #0
 800736a:	6363      	str	r3, [r4, #52]	@ 0x34
 800736c:	e00d      	b.n	800738a <__sflush_r+0xae>
 800736e:	2301      	movs	r3, #1
 8007370:	4628      	mov	r0, r5
 8007372:	47b0      	blx	r6
 8007374:	4602      	mov	r2, r0
 8007376:	1c50      	adds	r0, r2, #1
 8007378:	d1c9      	bne.n	800730e <__sflush_r+0x32>
 800737a:	682b      	ldr	r3, [r5, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0c6      	beq.n	800730e <__sflush_r+0x32>
 8007380:	2b1d      	cmp	r3, #29
 8007382:	d001      	beq.n	8007388 <__sflush_r+0xac>
 8007384:	2b16      	cmp	r3, #22
 8007386:	d11e      	bne.n	80073c6 <__sflush_r+0xea>
 8007388:	602f      	str	r7, [r5, #0]
 800738a:	2000      	movs	r0, #0
 800738c:	e022      	b.n	80073d4 <__sflush_r+0xf8>
 800738e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007392:	b21b      	sxth	r3, r3
 8007394:	e01b      	b.n	80073ce <__sflush_r+0xf2>
 8007396:	690f      	ldr	r7, [r1, #16]
 8007398:	2f00      	cmp	r7, #0
 800739a:	d0f6      	beq.n	800738a <__sflush_r+0xae>
 800739c:	0793      	lsls	r3, r2, #30
 800739e:	680e      	ldr	r6, [r1, #0]
 80073a0:	bf08      	it	eq
 80073a2:	694b      	ldreq	r3, [r1, #20]
 80073a4:	600f      	str	r7, [r1, #0]
 80073a6:	bf18      	it	ne
 80073a8:	2300      	movne	r3, #0
 80073aa:	eba6 0807 	sub.w	r8, r6, r7
 80073ae:	608b      	str	r3, [r1, #8]
 80073b0:	f1b8 0f00 	cmp.w	r8, #0
 80073b4:	dde9      	ble.n	800738a <__sflush_r+0xae>
 80073b6:	6a21      	ldr	r1, [r4, #32]
 80073b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80073ba:	4643      	mov	r3, r8
 80073bc:	463a      	mov	r2, r7
 80073be:	4628      	mov	r0, r5
 80073c0:	47b0      	blx	r6
 80073c2:	2800      	cmp	r0, #0
 80073c4:	dc08      	bgt.n	80073d8 <__sflush_r+0xfc>
 80073c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073ce:	81a3      	strh	r3, [r4, #12]
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	4407      	add	r7, r0
 80073da:	eba8 0800 	sub.w	r8, r8, r0
 80073de:	e7e7      	b.n	80073b0 <__sflush_r+0xd4>
 80073e0:	dfbffffe 	.word	0xdfbffffe

080073e4 <_fflush_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	690b      	ldr	r3, [r1, #16]
 80073e8:	4605      	mov	r5, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	b913      	cbnz	r3, 80073f4 <_fflush_r+0x10>
 80073ee:	2500      	movs	r5, #0
 80073f0:	4628      	mov	r0, r5
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	b118      	cbz	r0, 80073fe <_fflush_r+0x1a>
 80073f6:	6a03      	ldr	r3, [r0, #32]
 80073f8:	b90b      	cbnz	r3, 80073fe <_fflush_r+0x1a>
 80073fa:	f7fe fa2d 	bl	8005858 <__sinit>
 80073fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0f3      	beq.n	80073ee <_fflush_r+0xa>
 8007406:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007408:	07d0      	lsls	r0, r2, #31
 800740a:	d404      	bmi.n	8007416 <_fflush_r+0x32>
 800740c:	0599      	lsls	r1, r3, #22
 800740e:	d402      	bmi.n	8007416 <_fflush_r+0x32>
 8007410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007412:	f7fe fb38 	bl	8005a86 <__retarget_lock_acquire_recursive>
 8007416:	4628      	mov	r0, r5
 8007418:	4621      	mov	r1, r4
 800741a:	f7ff ff5f 	bl	80072dc <__sflush_r>
 800741e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007420:	07da      	lsls	r2, r3, #31
 8007422:	4605      	mov	r5, r0
 8007424:	d4e4      	bmi.n	80073f0 <_fflush_r+0xc>
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	059b      	lsls	r3, r3, #22
 800742a:	d4e1      	bmi.n	80073f0 <_fflush_r+0xc>
 800742c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800742e:	f7fe fb2b 	bl	8005a88 <__retarget_lock_release_recursive>
 8007432:	e7dd      	b.n	80073f0 <_fflush_r+0xc>

08007434 <memmove>:
 8007434:	4288      	cmp	r0, r1
 8007436:	b510      	push	{r4, lr}
 8007438:	eb01 0402 	add.w	r4, r1, r2
 800743c:	d902      	bls.n	8007444 <memmove+0x10>
 800743e:	4284      	cmp	r4, r0
 8007440:	4623      	mov	r3, r4
 8007442:	d807      	bhi.n	8007454 <memmove+0x20>
 8007444:	1e43      	subs	r3, r0, #1
 8007446:	42a1      	cmp	r1, r4
 8007448:	d008      	beq.n	800745c <memmove+0x28>
 800744a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800744e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007452:	e7f8      	b.n	8007446 <memmove+0x12>
 8007454:	4402      	add	r2, r0
 8007456:	4601      	mov	r1, r0
 8007458:	428a      	cmp	r2, r1
 800745a:	d100      	bne.n	800745e <memmove+0x2a>
 800745c:	bd10      	pop	{r4, pc}
 800745e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007466:	e7f7      	b.n	8007458 <memmove+0x24>

08007468 <_sbrk_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d06      	ldr	r5, [pc, #24]	@ (8007484 <_sbrk_r+0x1c>)
 800746c:	2300      	movs	r3, #0
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	f7fa fa64 	bl	8001940 <_sbrk>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_sbrk_r+0x1a>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_sbrk_r+0x1a>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20000440 	.word	0x20000440

08007488 <memcpy>:
 8007488:	440a      	add	r2, r1
 800748a:	4291      	cmp	r1, r2
 800748c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007490:	d100      	bne.n	8007494 <memcpy+0xc>
 8007492:	4770      	bx	lr
 8007494:	b510      	push	{r4, lr}
 8007496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800749a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800749e:	4291      	cmp	r1, r2
 80074a0:	d1f9      	bne.n	8007496 <memcpy+0xe>
 80074a2:	bd10      	pop	{r4, pc}

080074a4 <__assert_func>:
 80074a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074a6:	4614      	mov	r4, r2
 80074a8:	461a      	mov	r2, r3
 80074aa:	4b09      	ldr	r3, [pc, #36]	@ (80074d0 <__assert_func+0x2c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4605      	mov	r5, r0
 80074b0:	68d8      	ldr	r0, [r3, #12]
 80074b2:	b954      	cbnz	r4, 80074ca <__assert_func+0x26>
 80074b4:	4b07      	ldr	r3, [pc, #28]	@ (80074d4 <__assert_func+0x30>)
 80074b6:	461c      	mov	r4, r3
 80074b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074bc:	9100      	str	r1, [sp, #0]
 80074be:	462b      	mov	r3, r5
 80074c0:	4905      	ldr	r1, [pc, #20]	@ (80074d8 <__assert_func+0x34>)
 80074c2:	f000 f86f 	bl	80075a4 <fiprintf>
 80074c6:	f000 f87f 	bl	80075c8 <abort>
 80074ca:	4b04      	ldr	r3, [pc, #16]	@ (80074dc <__assert_func+0x38>)
 80074cc:	e7f4      	b.n	80074b8 <__assert_func+0x14>
 80074ce:	bf00      	nop
 80074d0:	20000018 	.word	0x20000018
 80074d4:	08007e2e 	.word	0x08007e2e
 80074d8:	08007e00 	.word	0x08007e00
 80074dc:	08007df3 	.word	0x08007df3

080074e0 <_calloc_r>:
 80074e0:	b570      	push	{r4, r5, r6, lr}
 80074e2:	fba1 5402 	umull	r5, r4, r1, r2
 80074e6:	b93c      	cbnz	r4, 80074f8 <_calloc_r+0x18>
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7ff f991 	bl	8006810 <_malloc_r>
 80074ee:	4606      	mov	r6, r0
 80074f0:	b928      	cbnz	r0, 80074fe <_calloc_r+0x1e>
 80074f2:	2600      	movs	r6, #0
 80074f4:	4630      	mov	r0, r6
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	220c      	movs	r2, #12
 80074fa:	6002      	str	r2, [r0, #0]
 80074fc:	e7f9      	b.n	80074f2 <_calloc_r+0x12>
 80074fe:	462a      	mov	r2, r5
 8007500:	4621      	mov	r1, r4
 8007502:	f7fe fa42 	bl	800598a <memset>
 8007506:	e7f5      	b.n	80074f4 <_calloc_r+0x14>

08007508 <__ascii_mbtowc>:
 8007508:	b082      	sub	sp, #8
 800750a:	b901      	cbnz	r1, 800750e <__ascii_mbtowc+0x6>
 800750c:	a901      	add	r1, sp, #4
 800750e:	b142      	cbz	r2, 8007522 <__ascii_mbtowc+0x1a>
 8007510:	b14b      	cbz	r3, 8007526 <__ascii_mbtowc+0x1e>
 8007512:	7813      	ldrb	r3, [r2, #0]
 8007514:	600b      	str	r3, [r1, #0]
 8007516:	7812      	ldrb	r2, [r2, #0]
 8007518:	1e10      	subs	r0, r2, #0
 800751a:	bf18      	it	ne
 800751c:	2001      	movne	r0, #1
 800751e:	b002      	add	sp, #8
 8007520:	4770      	bx	lr
 8007522:	4610      	mov	r0, r2
 8007524:	e7fb      	b.n	800751e <__ascii_mbtowc+0x16>
 8007526:	f06f 0001 	mvn.w	r0, #1
 800752a:	e7f8      	b.n	800751e <__ascii_mbtowc+0x16>

0800752c <_realloc_r>:
 800752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007530:	4680      	mov	r8, r0
 8007532:	4615      	mov	r5, r2
 8007534:	460c      	mov	r4, r1
 8007536:	b921      	cbnz	r1, 8007542 <_realloc_r+0x16>
 8007538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800753c:	4611      	mov	r1, r2
 800753e:	f7ff b967 	b.w	8006810 <_malloc_r>
 8007542:	b92a      	cbnz	r2, 8007550 <_realloc_r+0x24>
 8007544:	f7ff f8f0 	bl	8006728 <_free_r>
 8007548:	2400      	movs	r4, #0
 800754a:	4620      	mov	r0, r4
 800754c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007550:	f000 f841 	bl	80075d6 <_malloc_usable_size_r>
 8007554:	4285      	cmp	r5, r0
 8007556:	4606      	mov	r6, r0
 8007558:	d802      	bhi.n	8007560 <_realloc_r+0x34>
 800755a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800755e:	d8f4      	bhi.n	800754a <_realloc_r+0x1e>
 8007560:	4629      	mov	r1, r5
 8007562:	4640      	mov	r0, r8
 8007564:	f7ff f954 	bl	8006810 <_malloc_r>
 8007568:	4607      	mov	r7, r0
 800756a:	2800      	cmp	r0, #0
 800756c:	d0ec      	beq.n	8007548 <_realloc_r+0x1c>
 800756e:	42b5      	cmp	r5, r6
 8007570:	462a      	mov	r2, r5
 8007572:	4621      	mov	r1, r4
 8007574:	bf28      	it	cs
 8007576:	4632      	movcs	r2, r6
 8007578:	f7ff ff86 	bl	8007488 <memcpy>
 800757c:	4621      	mov	r1, r4
 800757e:	4640      	mov	r0, r8
 8007580:	f7ff f8d2 	bl	8006728 <_free_r>
 8007584:	463c      	mov	r4, r7
 8007586:	e7e0      	b.n	800754a <_realloc_r+0x1e>

08007588 <__ascii_wctomb>:
 8007588:	4603      	mov	r3, r0
 800758a:	4608      	mov	r0, r1
 800758c:	b141      	cbz	r1, 80075a0 <__ascii_wctomb+0x18>
 800758e:	2aff      	cmp	r2, #255	@ 0xff
 8007590:	d904      	bls.n	800759c <__ascii_wctomb+0x14>
 8007592:	228a      	movs	r2, #138	@ 0x8a
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	f04f 30ff 	mov.w	r0, #4294967295
 800759a:	4770      	bx	lr
 800759c:	700a      	strb	r2, [r1, #0]
 800759e:	2001      	movs	r0, #1
 80075a0:	4770      	bx	lr
	...

080075a4 <fiprintf>:
 80075a4:	b40e      	push	{r1, r2, r3}
 80075a6:	b503      	push	{r0, r1, lr}
 80075a8:	4601      	mov	r1, r0
 80075aa:	ab03      	add	r3, sp, #12
 80075ac:	4805      	ldr	r0, [pc, #20]	@ (80075c4 <fiprintf+0x20>)
 80075ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80075b2:	6800      	ldr	r0, [r0, #0]
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	f000 f83f 	bl	8007638 <_vfiprintf_r>
 80075ba:	b002      	add	sp, #8
 80075bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075c0:	b003      	add	sp, #12
 80075c2:	4770      	bx	lr
 80075c4:	20000018 	.word	0x20000018

080075c8 <abort>:
 80075c8:	b508      	push	{r3, lr}
 80075ca:	2006      	movs	r0, #6
 80075cc:	f000 fa08 	bl	80079e0 <raise>
 80075d0:	2001      	movs	r0, #1
 80075d2:	f7fa f93c 	bl	800184e <_exit>

080075d6 <_malloc_usable_size_r>:
 80075d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075da:	1f18      	subs	r0, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	bfbc      	itt	lt
 80075e0:	580b      	ldrlt	r3, [r1, r0]
 80075e2:	18c0      	addlt	r0, r0, r3
 80075e4:	4770      	bx	lr

080075e6 <__sfputc_r>:
 80075e6:	6893      	ldr	r3, [r2, #8]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	b410      	push	{r4}
 80075ee:	6093      	str	r3, [r2, #8]
 80075f0:	da08      	bge.n	8007604 <__sfputc_r+0x1e>
 80075f2:	6994      	ldr	r4, [r2, #24]
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	db01      	blt.n	80075fc <__sfputc_r+0x16>
 80075f8:	290a      	cmp	r1, #10
 80075fa:	d103      	bne.n	8007604 <__sfputc_r+0x1e>
 80075fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007600:	f000 b932 	b.w	8007868 <__swbuf_r>
 8007604:	6813      	ldr	r3, [r2, #0]
 8007606:	1c58      	adds	r0, r3, #1
 8007608:	6010      	str	r0, [r2, #0]
 800760a:	7019      	strb	r1, [r3, #0]
 800760c:	4608      	mov	r0, r1
 800760e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007612:	4770      	bx	lr

08007614 <__sfputs_r>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	4606      	mov	r6, r0
 8007618:	460f      	mov	r7, r1
 800761a:	4614      	mov	r4, r2
 800761c:	18d5      	adds	r5, r2, r3
 800761e:	42ac      	cmp	r4, r5
 8007620:	d101      	bne.n	8007626 <__sfputs_r+0x12>
 8007622:	2000      	movs	r0, #0
 8007624:	e007      	b.n	8007636 <__sfputs_r+0x22>
 8007626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800762a:	463a      	mov	r2, r7
 800762c:	4630      	mov	r0, r6
 800762e:	f7ff ffda 	bl	80075e6 <__sfputc_r>
 8007632:	1c43      	adds	r3, r0, #1
 8007634:	d1f3      	bne.n	800761e <__sfputs_r+0xa>
 8007636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007638 <_vfiprintf_r>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	460d      	mov	r5, r1
 800763e:	b09d      	sub	sp, #116	@ 0x74
 8007640:	4614      	mov	r4, r2
 8007642:	4698      	mov	r8, r3
 8007644:	4606      	mov	r6, r0
 8007646:	b118      	cbz	r0, 8007650 <_vfiprintf_r+0x18>
 8007648:	6a03      	ldr	r3, [r0, #32]
 800764a:	b90b      	cbnz	r3, 8007650 <_vfiprintf_r+0x18>
 800764c:	f7fe f904 	bl	8005858 <__sinit>
 8007650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007652:	07d9      	lsls	r1, r3, #31
 8007654:	d405      	bmi.n	8007662 <_vfiprintf_r+0x2a>
 8007656:	89ab      	ldrh	r3, [r5, #12]
 8007658:	059a      	lsls	r2, r3, #22
 800765a:	d402      	bmi.n	8007662 <_vfiprintf_r+0x2a>
 800765c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800765e:	f7fe fa12 	bl	8005a86 <__retarget_lock_acquire_recursive>
 8007662:	89ab      	ldrh	r3, [r5, #12]
 8007664:	071b      	lsls	r3, r3, #28
 8007666:	d501      	bpl.n	800766c <_vfiprintf_r+0x34>
 8007668:	692b      	ldr	r3, [r5, #16]
 800766a:	b99b      	cbnz	r3, 8007694 <_vfiprintf_r+0x5c>
 800766c:	4629      	mov	r1, r5
 800766e:	4630      	mov	r0, r6
 8007670:	f000 f938 	bl	80078e4 <__swsetup_r>
 8007674:	b170      	cbz	r0, 8007694 <_vfiprintf_r+0x5c>
 8007676:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007678:	07dc      	lsls	r4, r3, #31
 800767a:	d504      	bpl.n	8007686 <_vfiprintf_r+0x4e>
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	b01d      	add	sp, #116	@ 0x74
 8007682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	0598      	lsls	r0, r3, #22
 800768a:	d4f7      	bmi.n	800767c <_vfiprintf_r+0x44>
 800768c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800768e:	f7fe f9fb 	bl	8005a88 <__retarget_lock_release_recursive>
 8007692:	e7f3      	b.n	800767c <_vfiprintf_r+0x44>
 8007694:	2300      	movs	r3, #0
 8007696:	9309      	str	r3, [sp, #36]	@ 0x24
 8007698:	2320      	movs	r3, #32
 800769a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800769e:	f8cd 800c 	str.w	r8, [sp, #12]
 80076a2:	2330      	movs	r3, #48	@ 0x30
 80076a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007854 <_vfiprintf_r+0x21c>
 80076a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076ac:	f04f 0901 	mov.w	r9, #1
 80076b0:	4623      	mov	r3, r4
 80076b2:	469a      	mov	sl, r3
 80076b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076b8:	b10a      	cbz	r2, 80076be <_vfiprintf_r+0x86>
 80076ba:	2a25      	cmp	r2, #37	@ 0x25
 80076bc:	d1f9      	bne.n	80076b2 <_vfiprintf_r+0x7a>
 80076be:	ebba 0b04 	subs.w	fp, sl, r4
 80076c2:	d00b      	beq.n	80076dc <_vfiprintf_r+0xa4>
 80076c4:	465b      	mov	r3, fp
 80076c6:	4622      	mov	r2, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7ff ffa2 	bl	8007614 <__sfputs_r>
 80076d0:	3001      	adds	r0, #1
 80076d2:	f000 80a7 	beq.w	8007824 <_vfiprintf_r+0x1ec>
 80076d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076d8:	445a      	add	r2, fp
 80076da:	9209      	str	r2, [sp, #36]	@ 0x24
 80076dc:	f89a 3000 	ldrb.w	r3, [sl]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 809f 	beq.w	8007824 <_vfiprintf_r+0x1ec>
 80076e6:	2300      	movs	r3, #0
 80076e8:	f04f 32ff 	mov.w	r2, #4294967295
 80076ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076f0:	f10a 0a01 	add.w	sl, sl, #1
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80076fe:	4654      	mov	r4, sl
 8007700:	2205      	movs	r2, #5
 8007702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007706:	4853      	ldr	r0, [pc, #332]	@ (8007854 <_vfiprintf_r+0x21c>)
 8007708:	f7f8 fd62 	bl	80001d0 <memchr>
 800770c:	9a04      	ldr	r2, [sp, #16]
 800770e:	b9d8      	cbnz	r0, 8007748 <_vfiprintf_r+0x110>
 8007710:	06d1      	lsls	r1, r2, #27
 8007712:	bf44      	itt	mi
 8007714:	2320      	movmi	r3, #32
 8007716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800771a:	0713      	lsls	r3, r2, #28
 800771c:	bf44      	itt	mi
 800771e:	232b      	movmi	r3, #43	@ 0x2b
 8007720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007724:	f89a 3000 	ldrb.w	r3, [sl]
 8007728:	2b2a      	cmp	r3, #42	@ 0x2a
 800772a:	d015      	beq.n	8007758 <_vfiprintf_r+0x120>
 800772c:	9a07      	ldr	r2, [sp, #28]
 800772e:	4654      	mov	r4, sl
 8007730:	2000      	movs	r0, #0
 8007732:	f04f 0c0a 	mov.w	ip, #10
 8007736:	4621      	mov	r1, r4
 8007738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800773c:	3b30      	subs	r3, #48	@ 0x30
 800773e:	2b09      	cmp	r3, #9
 8007740:	d94b      	bls.n	80077da <_vfiprintf_r+0x1a2>
 8007742:	b1b0      	cbz	r0, 8007772 <_vfiprintf_r+0x13a>
 8007744:	9207      	str	r2, [sp, #28]
 8007746:	e014      	b.n	8007772 <_vfiprintf_r+0x13a>
 8007748:	eba0 0308 	sub.w	r3, r0, r8
 800774c:	fa09 f303 	lsl.w	r3, r9, r3
 8007750:	4313      	orrs	r3, r2
 8007752:	9304      	str	r3, [sp, #16]
 8007754:	46a2      	mov	sl, r4
 8007756:	e7d2      	b.n	80076fe <_vfiprintf_r+0xc6>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	1d19      	adds	r1, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	9103      	str	r1, [sp, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	bfbb      	ittet	lt
 8007764:	425b      	neglt	r3, r3
 8007766:	f042 0202 	orrlt.w	r2, r2, #2
 800776a:	9307      	strge	r3, [sp, #28]
 800776c:	9307      	strlt	r3, [sp, #28]
 800776e:	bfb8      	it	lt
 8007770:	9204      	strlt	r2, [sp, #16]
 8007772:	7823      	ldrb	r3, [r4, #0]
 8007774:	2b2e      	cmp	r3, #46	@ 0x2e
 8007776:	d10a      	bne.n	800778e <_vfiprintf_r+0x156>
 8007778:	7863      	ldrb	r3, [r4, #1]
 800777a:	2b2a      	cmp	r3, #42	@ 0x2a
 800777c:	d132      	bne.n	80077e4 <_vfiprintf_r+0x1ac>
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	1d1a      	adds	r2, r3, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	9203      	str	r2, [sp, #12]
 8007786:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800778a:	3402      	adds	r4, #2
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007864 <_vfiprintf_r+0x22c>
 8007792:	7821      	ldrb	r1, [r4, #0]
 8007794:	2203      	movs	r2, #3
 8007796:	4650      	mov	r0, sl
 8007798:	f7f8 fd1a 	bl	80001d0 <memchr>
 800779c:	b138      	cbz	r0, 80077ae <_vfiprintf_r+0x176>
 800779e:	9b04      	ldr	r3, [sp, #16]
 80077a0:	eba0 000a 	sub.w	r0, r0, sl
 80077a4:	2240      	movs	r2, #64	@ 0x40
 80077a6:	4082      	lsls	r2, r0
 80077a8:	4313      	orrs	r3, r2
 80077aa:	3401      	adds	r4, #1
 80077ac:	9304      	str	r3, [sp, #16]
 80077ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b2:	4829      	ldr	r0, [pc, #164]	@ (8007858 <_vfiprintf_r+0x220>)
 80077b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077b8:	2206      	movs	r2, #6
 80077ba:	f7f8 fd09 	bl	80001d0 <memchr>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d03f      	beq.n	8007842 <_vfiprintf_r+0x20a>
 80077c2:	4b26      	ldr	r3, [pc, #152]	@ (800785c <_vfiprintf_r+0x224>)
 80077c4:	bb1b      	cbnz	r3, 800780e <_vfiprintf_r+0x1d6>
 80077c6:	9b03      	ldr	r3, [sp, #12]
 80077c8:	3307      	adds	r3, #7
 80077ca:	f023 0307 	bic.w	r3, r3, #7
 80077ce:	3308      	adds	r3, #8
 80077d0:	9303      	str	r3, [sp, #12]
 80077d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d4:	443b      	add	r3, r7
 80077d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80077d8:	e76a      	b.n	80076b0 <_vfiprintf_r+0x78>
 80077da:	fb0c 3202 	mla	r2, ip, r2, r3
 80077de:	460c      	mov	r4, r1
 80077e0:	2001      	movs	r0, #1
 80077e2:	e7a8      	b.n	8007736 <_vfiprintf_r+0xfe>
 80077e4:	2300      	movs	r3, #0
 80077e6:	3401      	adds	r4, #1
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	4619      	mov	r1, r3
 80077ec:	f04f 0c0a 	mov.w	ip, #10
 80077f0:	4620      	mov	r0, r4
 80077f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077f6:	3a30      	subs	r2, #48	@ 0x30
 80077f8:	2a09      	cmp	r2, #9
 80077fa:	d903      	bls.n	8007804 <_vfiprintf_r+0x1cc>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0c6      	beq.n	800778e <_vfiprintf_r+0x156>
 8007800:	9105      	str	r1, [sp, #20]
 8007802:	e7c4      	b.n	800778e <_vfiprintf_r+0x156>
 8007804:	fb0c 2101 	mla	r1, ip, r1, r2
 8007808:	4604      	mov	r4, r0
 800780a:	2301      	movs	r3, #1
 800780c:	e7f0      	b.n	80077f0 <_vfiprintf_r+0x1b8>
 800780e:	ab03      	add	r3, sp, #12
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	462a      	mov	r2, r5
 8007814:	4b12      	ldr	r3, [pc, #72]	@ (8007860 <_vfiprintf_r+0x228>)
 8007816:	a904      	add	r1, sp, #16
 8007818:	4630      	mov	r0, r6
 800781a:	f7fd fbd9 	bl	8004fd0 <_printf_float>
 800781e:	4607      	mov	r7, r0
 8007820:	1c78      	adds	r0, r7, #1
 8007822:	d1d6      	bne.n	80077d2 <_vfiprintf_r+0x19a>
 8007824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007826:	07d9      	lsls	r1, r3, #31
 8007828:	d405      	bmi.n	8007836 <_vfiprintf_r+0x1fe>
 800782a:	89ab      	ldrh	r3, [r5, #12]
 800782c:	059a      	lsls	r2, r3, #22
 800782e:	d402      	bmi.n	8007836 <_vfiprintf_r+0x1fe>
 8007830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007832:	f7fe f929 	bl	8005a88 <__retarget_lock_release_recursive>
 8007836:	89ab      	ldrh	r3, [r5, #12]
 8007838:	065b      	lsls	r3, r3, #25
 800783a:	f53f af1f 	bmi.w	800767c <_vfiprintf_r+0x44>
 800783e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007840:	e71e      	b.n	8007680 <_vfiprintf_r+0x48>
 8007842:	ab03      	add	r3, sp, #12
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	462a      	mov	r2, r5
 8007848:	4b05      	ldr	r3, [pc, #20]	@ (8007860 <_vfiprintf_r+0x228>)
 800784a:	a904      	add	r1, sp, #16
 800784c:	4630      	mov	r0, r6
 800784e:	f7fd fe57 	bl	8005500 <_printf_i>
 8007852:	e7e4      	b.n	800781e <_vfiprintf_r+0x1e6>
 8007854:	08007dd8 	.word	0x08007dd8
 8007858:	08007de2 	.word	0x08007de2
 800785c:	08004fd1 	.word	0x08004fd1
 8007860:	08007615 	.word	0x08007615
 8007864:	08007dde 	.word	0x08007dde

08007868 <__swbuf_r>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	460e      	mov	r6, r1
 800786c:	4614      	mov	r4, r2
 800786e:	4605      	mov	r5, r0
 8007870:	b118      	cbz	r0, 800787a <__swbuf_r+0x12>
 8007872:	6a03      	ldr	r3, [r0, #32]
 8007874:	b90b      	cbnz	r3, 800787a <__swbuf_r+0x12>
 8007876:	f7fd ffef 	bl	8005858 <__sinit>
 800787a:	69a3      	ldr	r3, [r4, #24]
 800787c:	60a3      	str	r3, [r4, #8]
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	071a      	lsls	r2, r3, #28
 8007882:	d501      	bpl.n	8007888 <__swbuf_r+0x20>
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	b943      	cbnz	r3, 800789a <__swbuf_r+0x32>
 8007888:	4621      	mov	r1, r4
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f82a 	bl	80078e4 <__swsetup_r>
 8007890:	b118      	cbz	r0, 800789a <__swbuf_r+0x32>
 8007892:	f04f 37ff 	mov.w	r7, #4294967295
 8007896:	4638      	mov	r0, r7
 8007898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	6922      	ldr	r2, [r4, #16]
 800789e:	1a98      	subs	r0, r3, r2
 80078a0:	6963      	ldr	r3, [r4, #20]
 80078a2:	b2f6      	uxtb	r6, r6
 80078a4:	4283      	cmp	r3, r0
 80078a6:	4637      	mov	r7, r6
 80078a8:	dc05      	bgt.n	80078b6 <__swbuf_r+0x4e>
 80078aa:	4621      	mov	r1, r4
 80078ac:	4628      	mov	r0, r5
 80078ae:	f7ff fd99 	bl	80073e4 <_fflush_r>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d1ed      	bne.n	8007892 <__swbuf_r+0x2a>
 80078b6:	68a3      	ldr	r3, [r4, #8]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	60a3      	str	r3, [r4, #8]
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	6022      	str	r2, [r4, #0]
 80078c2:	701e      	strb	r6, [r3, #0]
 80078c4:	6962      	ldr	r2, [r4, #20]
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d004      	beq.n	80078d6 <__swbuf_r+0x6e>
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	07db      	lsls	r3, r3, #31
 80078d0:	d5e1      	bpl.n	8007896 <__swbuf_r+0x2e>
 80078d2:	2e0a      	cmp	r6, #10
 80078d4:	d1df      	bne.n	8007896 <__swbuf_r+0x2e>
 80078d6:	4621      	mov	r1, r4
 80078d8:	4628      	mov	r0, r5
 80078da:	f7ff fd83 	bl	80073e4 <_fflush_r>
 80078de:	2800      	cmp	r0, #0
 80078e0:	d0d9      	beq.n	8007896 <__swbuf_r+0x2e>
 80078e2:	e7d6      	b.n	8007892 <__swbuf_r+0x2a>

080078e4 <__swsetup_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4b29      	ldr	r3, [pc, #164]	@ (800798c <__swsetup_r+0xa8>)
 80078e8:	4605      	mov	r5, r0
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	460c      	mov	r4, r1
 80078ee:	b118      	cbz	r0, 80078f8 <__swsetup_r+0x14>
 80078f0:	6a03      	ldr	r3, [r0, #32]
 80078f2:	b90b      	cbnz	r3, 80078f8 <__swsetup_r+0x14>
 80078f4:	f7fd ffb0 	bl	8005858 <__sinit>
 80078f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078fc:	0719      	lsls	r1, r3, #28
 80078fe:	d422      	bmi.n	8007946 <__swsetup_r+0x62>
 8007900:	06da      	lsls	r2, r3, #27
 8007902:	d407      	bmi.n	8007914 <__swsetup_r+0x30>
 8007904:	2209      	movs	r2, #9
 8007906:	602a      	str	r2, [r5, #0]
 8007908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800790c:	81a3      	strh	r3, [r4, #12]
 800790e:	f04f 30ff 	mov.w	r0, #4294967295
 8007912:	e033      	b.n	800797c <__swsetup_r+0x98>
 8007914:	0758      	lsls	r0, r3, #29
 8007916:	d512      	bpl.n	800793e <__swsetup_r+0x5a>
 8007918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800791a:	b141      	cbz	r1, 800792e <__swsetup_r+0x4a>
 800791c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007920:	4299      	cmp	r1, r3
 8007922:	d002      	beq.n	800792a <__swsetup_r+0x46>
 8007924:	4628      	mov	r0, r5
 8007926:	f7fe feff 	bl	8006728 <_free_r>
 800792a:	2300      	movs	r3, #0
 800792c:	6363      	str	r3, [r4, #52]	@ 0x34
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007934:	81a3      	strh	r3, [r4, #12]
 8007936:	2300      	movs	r3, #0
 8007938:	6063      	str	r3, [r4, #4]
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	f043 0308 	orr.w	r3, r3, #8
 8007944:	81a3      	strh	r3, [r4, #12]
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	b94b      	cbnz	r3, 800795e <__swsetup_r+0x7a>
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007954:	d003      	beq.n	800795e <__swsetup_r+0x7a>
 8007956:	4621      	mov	r1, r4
 8007958:	4628      	mov	r0, r5
 800795a:	f000 f883 	bl	8007a64 <__smakebuf_r>
 800795e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007962:	f013 0201 	ands.w	r2, r3, #1
 8007966:	d00a      	beq.n	800797e <__swsetup_r+0x9a>
 8007968:	2200      	movs	r2, #0
 800796a:	60a2      	str	r2, [r4, #8]
 800796c:	6962      	ldr	r2, [r4, #20]
 800796e:	4252      	negs	r2, r2
 8007970:	61a2      	str	r2, [r4, #24]
 8007972:	6922      	ldr	r2, [r4, #16]
 8007974:	b942      	cbnz	r2, 8007988 <__swsetup_r+0xa4>
 8007976:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800797a:	d1c5      	bne.n	8007908 <__swsetup_r+0x24>
 800797c:	bd38      	pop	{r3, r4, r5, pc}
 800797e:	0799      	lsls	r1, r3, #30
 8007980:	bf58      	it	pl
 8007982:	6962      	ldrpl	r2, [r4, #20]
 8007984:	60a2      	str	r2, [r4, #8]
 8007986:	e7f4      	b.n	8007972 <__swsetup_r+0x8e>
 8007988:	2000      	movs	r0, #0
 800798a:	e7f7      	b.n	800797c <__swsetup_r+0x98>
 800798c:	20000018 	.word	0x20000018

08007990 <_raise_r>:
 8007990:	291f      	cmp	r1, #31
 8007992:	b538      	push	{r3, r4, r5, lr}
 8007994:	4605      	mov	r5, r0
 8007996:	460c      	mov	r4, r1
 8007998:	d904      	bls.n	80079a4 <_raise_r+0x14>
 800799a:	2316      	movs	r3, #22
 800799c:	6003      	str	r3, [r0, #0]
 800799e:	f04f 30ff 	mov.w	r0, #4294967295
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80079a6:	b112      	cbz	r2, 80079ae <_raise_r+0x1e>
 80079a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079ac:	b94b      	cbnz	r3, 80079c2 <_raise_r+0x32>
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f830 	bl	8007a14 <_getpid_r>
 80079b4:	4622      	mov	r2, r4
 80079b6:	4601      	mov	r1, r0
 80079b8:	4628      	mov	r0, r5
 80079ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079be:	f000 b817 	b.w	80079f0 <_kill_r>
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d00a      	beq.n	80079dc <_raise_r+0x4c>
 80079c6:	1c59      	adds	r1, r3, #1
 80079c8:	d103      	bne.n	80079d2 <_raise_r+0x42>
 80079ca:	2316      	movs	r3, #22
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	2001      	movs	r0, #1
 80079d0:	e7e7      	b.n	80079a2 <_raise_r+0x12>
 80079d2:	2100      	movs	r1, #0
 80079d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80079d8:	4620      	mov	r0, r4
 80079da:	4798      	blx	r3
 80079dc:	2000      	movs	r0, #0
 80079de:	e7e0      	b.n	80079a2 <_raise_r+0x12>

080079e0 <raise>:
 80079e0:	4b02      	ldr	r3, [pc, #8]	@ (80079ec <raise+0xc>)
 80079e2:	4601      	mov	r1, r0
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	f7ff bfd3 	b.w	8007990 <_raise_r>
 80079ea:	bf00      	nop
 80079ec:	20000018 	.word	0x20000018

080079f0 <_kill_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4d07      	ldr	r5, [pc, #28]	@ (8007a10 <_kill_r+0x20>)
 80079f4:	2300      	movs	r3, #0
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	f7f9 ff16 	bl	800182e <_kill>
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	d102      	bne.n	8007a0c <_kill_r+0x1c>
 8007a06:	682b      	ldr	r3, [r5, #0]
 8007a08:	b103      	cbz	r3, 8007a0c <_kill_r+0x1c>
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	bd38      	pop	{r3, r4, r5, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000440 	.word	0x20000440

08007a14 <_getpid_r>:
 8007a14:	f7f9 bf03 	b.w	800181e <_getpid>

08007a18 <__swhatbuf_r>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a20:	2900      	cmp	r1, #0
 8007a22:	b096      	sub	sp, #88	@ 0x58
 8007a24:	4615      	mov	r5, r2
 8007a26:	461e      	mov	r6, r3
 8007a28:	da0d      	bge.n	8007a46 <__swhatbuf_r+0x2e>
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a30:	f04f 0100 	mov.w	r1, #0
 8007a34:	bf14      	ite	ne
 8007a36:	2340      	movne	r3, #64	@ 0x40
 8007a38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	6031      	str	r1, [r6, #0]
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	b016      	add	sp, #88	@ 0x58
 8007a44:	bd70      	pop	{r4, r5, r6, pc}
 8007a46:	466a      	mov	r2, sp
 8007a48:	f000 f848 	bl	8007adc <_fstat_r>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	dbec      	blt.n	8007a2a <__swhatbuf_r+0x12>
 8007a50:	9901      	ldr	r1, [sp, #4]
 8007a52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a5a:	4259      	negs	r1, r3
 8007a5c:	4159      	adcs	r1, r3
 8007a5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a62:	e7eb      	b.n	8007a3c <__swhatbuf_r+0x24>

08007a64 <__smakebuf_r>:
 8007a64:	898b      	ldrh	r3, [r1, #12]
 8007a66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a68:	079d      	lsls	r5, r3, #30
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	d507      	bpl.n	8007a80 <__smakebuf_r+0x1c>
 8007a70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	6123      	str	r3, [r4, #16]
 8007a78:	2301      	movs	r3, #1
 8007a7a:	6163      	str	r3, [r4, #20]
 8007a7c:	b003      	add	sp, #12
 8007a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a80:	ab01      	add	r3, sp, #4
 8007a82:	466a      	mov	r2, sp
 8007a84:	f7ff ffc8 	bl	8007a18 <__swhatbuf_r>
 8007a88:	9f00      	ldr	r7, [sp, #0]
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f7fe febe 	bl	8006810 <_malloc_r>
 8007a94:	b948      	cbnz	r0, 8007aaa <__smakebuf_r+0x46>
 8007a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9a:	059a      	lsls	r2, r3, #22
 8007a9c:	d4ee      	bmi.n	8007a7c <__smakebuf_r+0x18>
 8007a9e:	f023 0303 	bic.w	r3, r3, #3
 8007aa2:	f043 0302 	orr.w	r3, r3, #2
 8007aa6:	81a3      	strh	r3, [r4, #12]
 8007aa8:	e7e2      	b.n	8007a70 <__smakebuf_r+0xc>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	6020      	str	r0, [r4, #0]
 8007aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ab2:	81a3      	strh	r3, [r4, #12]
 8007ab4:	9b01      	ldr	r3, [sp, #4]
 8007ab6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007aba:	b15b      	cbz	r3, 8007ad4 <__smakebuf_r+0x70>
 8007abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f000 f81d 	bl	8007b00 <_isatty_r>
 8007ac6:	b128      	cbz	r0, 8007ad4 <__smakebuf_r+0x70>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	f023 0303 	bic.w	r3, r3, #3
 8007ace:	f043 0301 	orr.w	r3, r3, #1
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	431d      	orrs	r5, r3
 8007ad8:	81a5      	strh	r5, [r4, #12]
 8007ada:	e7cf      	b.n	8007a7c <__smakebuf_r+0x18>

08007adc <_fstat_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d07      	ldr	r5, [pc, #28]	@ (8007afc <_fstat_r+0x20>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	602b      	str	r3, [r5, #0]
 8007aea:	f7f9 ff00 	bl	80018ee <_fstat>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d102      	bne.n	8007af8 <_fstat_r+0x1c>
 8007af2:	682b      	ldr	r3, [r5, #0]
 8007af4:	b103      	cbz	r3, 8007af8 <_fstat_r+0x1c>
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	bd38      	pop	{r3, r4, r5, pc}
 8007afa:	bf00      	nop
 8007afc:	20000440 	.word	0x20000440

08007b00 <_isatty_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d06      	ldr	r5, [pc, #24]	@ (8007b1c <_isatty_r+0x1c>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	f7f9 feff 	bl	800190e <_isatty>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_isatty_r+0x1a>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_isatty_r+0x1a>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20000440 	.word	0x20000440

08007b20 <_init>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	bf00      	nop
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr

08007b2c <_fini>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	bf00      	nop
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr
